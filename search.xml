<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AI Learning</title>
    <url>/2021/02/17/AI-Learning/</url>
    <content><![CDATA[<h1 id="界面-版本-快捷键"><a href="#界面-版本-快捷键" class="headerlink" title="界面/版本/快捷键"></a>界面/版本/快捷键</h1><h2 id="版本挑选"><a href="#版本挑选" class="headerlink" title="版本挑选"></a>版本挑选</h2><h2 id="CS6-CC2018-CC2020"><a href="#CS6-CC2018-CC2020" class="headerlink" title="CS6/CC2018/CC2020"></a>CS6/CC2018/CC2020</h2><h2 id="AI输出格式"><a href="#AI输出格式" class="headerlink" title="AI输出格式"></a>AI输出格式</h2><p>.ai 工程文件<br>.eps 矢量图<br>.tif 位图<br>.pdf 最稳定</p>
<hr>
<h2 id="设置-快捷键"><a href="#设置-快捷键" class="headerlink" title="设置+快捷键"></a>设置+快捷键</h2><ol>
<li>出血边：相当于margin，预留给打印等的装订，一般0.3px</li>
<li><code>ALT+滚动滑轮/ctrl+加减键</code>：放大缩小 (CTRL+0：恢复到默认大小)</li>
<li><code>空格键+鼠标左键</code>：抓手工具</li>
<li><code>CTRL+R</code>:标尺</li>
<li><code>CTRL+;</code>:参考线</li>
<li><code>CTRL+&quot;</code>:网格</li>
<li><code>CTRL+Y</code>：轮廓模式，可以看到轮廓边缘</li>
<li><code>CTRL+ALT+Y</code>：像素模式  </li>
</ol>
<hr>
<h1 id="选择工具组-描边-缩放工具"><a href="#选择工具组-描边-缩放工具" class="headerlink" title="选择工具组/描边/缩放工具"></a>选择工具组/描边/缩放工具</h1><h2 id="选择工具组"><a href="#选择工具组" class="headerlink" title="选择工具组"></a>选择工具组</h2><p><code>选择工具(V)</code>:选择、移动、缩放、旋转（按shift表示等比缩放）<br><code>直接选择(A)</code>:选择、移动、变形<br>显示/隐藏定界框：<code>ctrl+shift+B</code><br>显示/隐藏边缘：<code>ctrl+H</code><br>套索工具：自由选择需要的锚点</p>
]]></content>
      <categories>
        <category>toolsLearning</category>
      </categories>
      <tags>
        <tag>Adobe Illustrator</tag>
      </tags>
  </entry>
  <entry>
    <title>CUT&amp;Tag Analysis</title>
    <url>/2021/03/25/CUT-Tag-Analysis/</url>
    <content><![CDATA[<ul>
<li>有一个隐藏的节点可以用，ssh 192.168.1.23 (有24个线程)</li>
<li>jobs命令，查看后台有没有任务在运行</li>
<li>IGV可以save session回到之前的界面</li>
</ul>
<h1 id="分析流程"><a href="#分析流程" class="headerlink" title="分析流程"></a>分析流程</h1><p>参考： <a href="https://yezhengstat.github.io/CUTTag_tutorial">https://yezhengstat.github.io/CUTTag_tutorial</a><br>数据来源： <a href="https://www.nature.com/articles/s41467-019-09982-5">https://www.nature.com/articles/s41467-019-09982-5</a> </p>
<h2 id="主要步骤："><a href="#主要步骤：" class="headerlink" title="主要步骤："></a>主要步骤：</h2><ol>
<li>质量监控（fastqc，multiqc）（略）</li>
<li>读段比对（bowtie2）（略）及利用spike-in计算scale factor</li>
<li>sam过滤及格式转换（samtools、bedtools）及归一化</li>
<li>Peak calling（SEACR、MACS2）</li>
<li>motif识别（MEME）</li>
<li>IGV可视化</li>
<li>deeptools可视化及homer注释（可选）</li>
</ol>
<ul>
<li>BlackList</li>
</ul>
<p>被设为黑名单后，不能当做是peak<br>call peak之后，用Black List过滤一下</p>
<h3 id="Bam文件"><a href="#Bam文件" class="headerlink" title="Bam文件"></a>Bam文件</h3><p><a href="http://genome.ucsc.edu/FAQ/FAQformat.html#format1">http://genome.ucsc.edu/FAQ/FAQformat.html#format1</a></p>
<p>相当于压缩文件，要用samtools view看</p>
<h3 id="Bed文件格式"><a href="#Bed文件格式" class="headerlink" title="Bed文件格式"></a>Bed文件格式</h3><p>UCSC format</p>
<p>可以直接导入IGV</p>
<p>用于表示染色体区域</p>
<ol>
<li><p><strong>chrom</strong> - 染色体号; 例如，chr1，chrX……</p>
</li>
<li><p><strong>chromStart</strong> - feature在染色体上起始位置. 从0开始算，染色体上第一个碱基位置标记为0。</p>
</li>
<li><p><strong>chromEnd</strong> - feature在染色体上终止位置。染色体上前100个碱基片段的位置位置标记为：chromStart=0, chromEnd=100。 实际上，第100个碱基不属于当前片段中，当前片段的碱基应该是0-99。所以在BED文件中，起始位置从0开始，终止位置从1开始。</p>
</li>
<li><p><strong>name</strong> - BED行名，在基因组浏览器左边显示；</p>
</li>
<li><p><strong>score</strong> - 在基因组浏览器中显示的灰度设定，值介于0-1000；</p>
</li>
<li><p><strong>strand</strong> - 正负链标记. Either “.” (=no strand) or “+” or “-“.</p>
</li>
</ol>
<p>bedtools工具bamtobed: 将bam转bed</p>
<h3 id="Bedpe文件"><a href="#Bedpe文件" class="headerlink" title="Bedpe文件"></a>Bedpe文件</h3><p>用于表示双末端bed文件，一行里面有两个坐标，前三列一个坐标，三到六另一个</p>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ssh 192.168.1.23</span></span><br><span class="line">rootpath=/public/workspace/stu18230130/MyCourse/NGS-02/lab1-CUTTag/</span><br><span class="line"><span class="comment"># ---------------------------&gt;</span></span><br><span class="line"><span class="comment"># download and extract data</span></span><br><span class="line"><span class="comment"># ---------------------------&gt;</span></span><br><span class="line">mkdir -p <span class="variable">$rootpath</span>/data</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$rootpath</span>/data</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> SRR8435039 SRR8435040 SRR8435051 SRR8435052</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  wget https://sra-pub-run-odp.s3.amazonaws.com/sra/<span class="variable">$i</span>/<span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> SRR8435039 SRR8435040 SRR8435051 SRR8435052</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  fastq-dump -split-files <span class="variable">$i</span> &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># wait 等待前面后台命令全部完成，在往下</span></span><br><span class="line"><span class="comment"># 先fastq-dump再gzip会比较快</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> SRR8435039 SRR8435040 SRR8435051 SRR8435052</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  gzip <span class="variable">$&#123;i&#125;</span>_1.fastq &amp;</span><br><span class="line">  gzip <span class="variable">$&#123;i&#125;</span>_2.fastq &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cd $rootpath</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------&gt;</span></span><br><span class="line"><span class="comment"># QC and pre-processing</span></span><br><span class="line"><span class="comment"># ---------------------------&gt;</span></span><br><span class="line">mkdir -p <span class="variable">$rootpath</span>/1.QC</span><br><span class="line"><span class="comment"># cd $rootpath/1.QC </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> SRR8435039 SRR8435040 SRR8435051 SRR8435052</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  fastqc -o <span class="variable">$rootpath</span>/1.QC/ <span class="variable">$rootpath</span>/data/<span class="variable">$&#123;i&#125;</span>_1.fastq.gz &amp;</span><br><span class="line">  fastqc -o <span class="variable">$rootpath</span>/1.QC/ <span class="variable">$rootpath</span>/data/<span class="variable">$&#123;i&#125;</span>_2.fastq.gz &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------&gt;</span></span><br><span class="line"><span class="comment"># mapping with bowtie2</span></span><br><span class="line"><span class="comment"># ---------------------------&gt;</span></span><br><span class="line"><span class="comment"># core 线程数</span></span><br><span class="line"><span class="comment"># 文件重命名策略：输出文件名称，SRR8435039:CTCF1，旧名字：新名字</span></span><br><span class="line">mkdir -p <span class="variable">$rootpath</span>/2.map/bowtie2_result</span><br><span class="line">mkdir -p <span class="variable">$rootpath</span>/2.map/bowtie2_summary</span><br><span class="line">bt2ref=/public/workspace/shaojf/Course/NGS/Reference/bowtie2_Index/GRCh38.bowtie2</span><br><span class="line">cores=4</span><br><span class="line"><span class="keyword">for</span> info <span class="keyword">in</span> SRR8435039:CTCF1 SRR8435040:CTCF2 SRR8435051:IgG1 SRR8435052:IgG2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  i=`<span class="built_in">echo</span> <span class="variable">$info</span> | cut -d <span class="string">&quot;:&quot;</span> -f 1`</span><br><span class="line">  name=`<span class="built_in">echo</span> <span class="variable">$info</span> | cut -d <span class="string">&quot;:&quot;</span> -f 2`</span><br><span class="line">  bowtie2 --end-to-end --very-sensitive --no-mixed --no-discordant --phred33 \</span><br><span class="line">    -I 10 -X 700 -p <span class="variable">$cores</span> -x <span class="variable">$bt2ref</span> \</span><br><span class="line">    -1 <span class="variable">$rootpath</span>/data/<span class="variable">$&#123;i&#125;</span>_1.fastq.gz -2 <span class="variable">$rootpath</span>/data/<span class="variable">$&#123;i&#125;</span>_2.fastq.gz \</span><br><span class="line">    -S <span class="variable">$rootpath</span>/2.map/bowtie2_result/<span class="variable">$&#123;name&#125;</span>_bowtie2.sam \</span><br><span class="line">    &amp;&gt; <span class="variable">$rootpath</span>/2.map/bowtie2_summary/<span class="variable">$&#123;name&#125;</span>_bowtie2.txt &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"><span class="comment"># The paired-end reads are aligned by Bowtie2 using parameters --end-to-end --very-sensitive --no-mixed --no-discordant --phred33 -I 10 -X 700 for mapping of inserts 10-700 bp in length.</span></span><br><span class="line"><span class="comment"># Critical step: There is no need to trim reads from out standard 25x25 PE sequencing, as adapter sequences will not be included in reads of inserts &gt;25 bp. However, for users performing longer sequencing, reads will need to be trimmed by Cutadapt and mapped by --local --very-sensitive --no-mixed --no-discordant --phred33 -I 10 -X 700 to ignore any remaining adapter sequence at the 3’ ends of reads during mapping.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># U00096.3</span></span><br><span class="line"><span class="comment"># 可以去ncbi下载E.coli的ref</span></span><br><span class="line">spikeinref=/public/workspace/shaojf/Course/NGS/Reference/bowtie2_Index/Ecoli</span><br><span class="line"><span class="keyword">for</span> info <span class="keyword">in</span> SRR8435039:CTCF1 SRR8435040:CTCF2 SRR8435051:IgG1 SRR8435052:IgG2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  i=`<span class="built_in">echo</span> <span class="variable">$info</span> | cut -d <span class="string">&quot;:&quot;</span> -f 1`</span><br><span class="line">  name=`<span class="built_in">echo</span> <span class="variable">$info</span> | cut -d <span class="string">&quot;:&quot;</span> -f 2`</span><br><span class="line">  bowtie2 --end-to-end --very-sensitive --no-mixed --no-discordant --phred33 \</span><br><span class="line">    -I 10 -X 700 -p <span class="variable">$cores</span> -x <span class="variable">$spikeinref</span> \</span><br><span class="line">    -1 <span class="variable">$rootpath</span>/data/<span class="variable">$&#123;i&#125;</span>_1.fastq.gz -2 <span class="variable">$rootpath</span>/data/<span class="variable">$&#123;i&#125;</span>_2.fastq.gz \</span><br><span class="line">    -S <span class="variable">$rootpath</span>/2.map/bowtie2_result/<span class="variable">$&#123;name&#125;</span>_bowtie2_spikeIn.sam \</span><br><span class="line">    &amp;&gt; <span class="variable">$rootpath</span>/2.map/bowtie2_summary/<span class="variable">$&#123;name&#125;</span>_bowtie2_spikeIn.txt &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># grep &quot;rate&quot; 2.map/bowtie2_summary/*.txt</span></span><br><span class="line"><span class="comment"># 计算有多少对读段比对到E.coli上,再写到一个文件里，方便后面计算scale factor</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> CTCF1 CTCF2 IgG1 IgG2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  seqDepthDouble=`samtools view -F 0x04 <span class="variable">$rootpath</span>/2.map/bowtie2_result/<span class="variable">$&#123;name&#125;</span>_bowtie2_spikeIn.sam | wc -l`</span><br><span class="line">  seqDepth=$((seqDepthDouble/<span class="number">2</span>))</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$seqDepth</span> &gt; <span class="variable">$rootpath</span>/2.map/bowtie2_result/<span class="variable">$&#123;name&#125;</span>_bowtie2_spikeIn.seqDepth</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># In practice, we have found that the apparent duplication rate is low for high quality CUT&amp;Tag datasets, and even the apparent ‘duplicate’ fragments are likely to be true fragments. Thus, we do not recommend removing the duplicates.</span></span><br><span class="line"><span class="comment"># mkdir -p mkdir -p $rootpath/2.map/removeDuplicate/picard_summary</span></span><br><span class="line"><span class="comment"># for name in CTCF1 CTCF2 IgG1 IgG2</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment"># 	picard SortSam I=$rootpath/2.map/bowtie2_result/$&#123;name&#125;_bowtie2.sam \</span></span><br><span class="line"><span class="comment"># 		O=$rootpath/2.map/removeDuplicate/$&#123;name&#125;_bowtie2.sorted.sam SORT_ORDER=coordinate</span></span><br><span class="line"><span class="comment"># 	picard MarkDuplicates I=$rootpath/2.map/removeDuplicate/$&#123;name&#125;_bowtie2.sorted.sam \</span></span><br><span class="line"><span class="comment"># 		O=$rootpath/2.map/removeDuplicate/$&#123;name&#125;_bowtie2.sorted.dupMarked.sam METRICS_FILE=$rootpath/2.map/removeDuplicate/picard_summary/$&#123;name&#125;_picard.dupMark.txt</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -F unmap </span></span><br><span class="line">mkdir -p <span class="variable">$rootpath</span>/2.map/fragmentLen</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> CTCF1 CTCF2 IgG1 IgG2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  samtools view -F 0x04 <span class="variable">$rootpath</span>/2.map/bowtie2_result/<span class="variable">$&#123;name&#125;</span>_bowtie2.sam | \</span><br><span class="line">    awk -F<span class="string">&#x27;\t&#x27;</span> <span class="string">&#x27;function abs(x)&#123;return ((x &lt; 0.0) ? -x : x)&#125; &#123;print abs($9)&#125;&#x27;</span> | \</span><br><span class="line">    sort | uniq -c | awk -v OFS=<span class="string">&quot;\t&quot;</span> <span class="string">&#x27;&#123;print $2, $1/2&#125;&#x27;</span> \</span><br><span class="line">    &gt; <span class="variable">$rootpath</span>/2.map/fragmentLen/<span class="variable">$&#123;name&#125;</span>_fragmentLen.txt &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------&gt;</span></span><br><span class="line"><span class="comment"># filtering and file format conversion</span></span><br><span class="line"><span class="comment"># ---------------------------------------&gt;</span></span><br><span class="line"><span class="comment"># sam转成bam，并且留下Q10以上的</span></span><br><span class="line"><span class="comment"># 转成bedgraph格式</span></span><br><span class="line"><span class="comment"># -F INT   only include reads with none of the FLAGS in INT present [0]</span></span><br><span class="line"></span><br><span class="line">mkdir -p <span class="variable">$rootpath</span>/3.filter/</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> CTCF1 CTCF2 IgG1 IgG2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  samtools view -bS -F 0x04 -q 10 <span class="variable">$rootpath</span>/2.map/bowtie2_result/<span class="variable">$&#123;name&#125;</span>_bowtie2.sam \</span><br><span class="line">    &gt;<span class="variable">$rootpath</span>/3.filter/<span class="variable">$&#123;name&#125;</span>_bowtie2.q10.bam &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转成bedpe</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> CTCF1 CTCF2 IgG1 IgG2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  bedtools bamtobed -i <span class="variable">$rootpath</span>/3.filter/<span class="variable">$&#123;name&#125;</span>_bowtie2.q10.bam \</span><br><span class="line">  -bedpe &gt; <span class="variable">$rootpath</span>/3.filter/<span class="variable">$&#123;name&#125;</span>_bowtie2.bed &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上一步已转换成bedpe格式，用于表示双末端bed文件，一行里面有两个坐标，前三列一个坐标（正向测），三到六另一个（反向测）</span></span><br><span class="line"><span class="comment"># awk 第一列等于第四列（在同一染色体上）且终止-起始&lt;1000</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> CTCF1 CTCF2 IgG1 IgG2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  awk <span class="string">&#x27;$1==$4 &amp;&amp; $6-$2 &lt; 1000 &#123;print $0&#125;&#x27;</span> <span class="variable">$rootpath</span>/3.filter/<span class="variable">$&#123;name&#125;</span>_bowtie2.bed \</span><br><span class="line">    &gt; <span class="variable">$rootpath</span>/3.filter/<span class="variable">$&#123;name&#125;</span>_bowtie2.clean.bed &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果第一列相同，则按第二列从小到大排序，如果第二列相同，按照第三列从小到大排</span></span><br><span class="line"><span class="comment"># -k，1 只看第一列</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> CTCF1 CTCF2 IgG1 IgG2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  cut -f 1,2,6 <span class="variable">$rootpath</span>/3.filter/<span class="variable">$&#123;name&#125;</span>_bowtie2.clean.bed | \</span><br><span class="line">  sort -k1,1 -k2,2n -k3,3n &gt; <span class="variable">$rootpath</span>/3.filter/<span class="variable">$&#123;name&#125;</span>_bowtie2.fragments.bed &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># scale factor</span></span><br><span class="line"><span class="comment"># if [ expression ]</span></span><br><span class="line"><span class="comment"># then</span></span><br><span class="line"><span class="comment">#    Statement(s) to be executed if expression is true</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line"><span class="comment"># Shell expression求值。如果结果值是true，给定statement被执行。如果 expression 为false ，则没有语句将不会被执行。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bc-l 相当于一个计算器，用长浮点型来表示</span></span><br><span class="line"><span class="comment"># echo 1+3 | bc 把计算的公式穿给bc去运算</span></span><br><span class="line">chromSize=/public/workspace/shaojf/Course/NGS/Reference/bowtie2_Index/GRCh38.chrom.size</span><br><span class="line">长度</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> CTCF1 CTCF2 IgG1 IgG2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  seqDepth=`cat <span class="variable">$rootpath</span>/2.map/bowtie2_result/<span class="variable">$&#123;name&#125;</span>_bowtie2_spikeIn.seqDepth`</span><br><span class="line">  <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$seqDepth</span>&quot;</span> -gt <span class="string">&quot;1&quot;</span> ]]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">      mkdir -p <span class="variable">$rootpath</span>/3.filter/bedgraph</span><br><span class="line">      scale_factor=`<span class="built_in">echo</span> <span class="string">&quot;10000 / <span class="variable">$seqDepth</span>&quot;</span> | bc -l`</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;Scaling factor for <span class="variable">$name</span> is: <span class="variable">$scale_factor</span>&quot;</span></span><br><span class="line">      bedtools genomecov -<span class="built_in">bg</span> -scale <span class="variable">$scale_factor</span> \</span><br><span class="line">      	-i <span class="variable">$rootpath</span>/3.filter/<span class="variable">$&#123;name&#125;</span>_bowtie2.fragments.bed \</span><br><span class="line">      	-g <span class="variable">$chromSize</span> &gt; <span class="variable">$rootpath</span>/3.filter/bedgraph/<span class="variable">$&#123;name&#125;</span>_bowtie2.fragments.normalized.bedgraph &amp;</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line">mkdir -p <span class="variable">$rootpath</span>/3.filter/bigwig</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> CTCF1 CTCF2 IgG1 IgG2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  bedSort <span class="variable">$rootpath</span>/3.filter/bedgraph/<span class="variable">$&#123;name&#125;</span>_bowtie2.fragments.normalized.bedgraph <span class="variable">$rootpath</span>/3.filter/bedgraph/<span class="variable">$&#123;name&#125;</span>_bowtie2.fragments.normalized.srt.bedgraph &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转bigwig方便可视化</span></span><br><span class="line"><span class="comment"># 用IGV打开，调颜色，bed文件第四列在IGV中会标注</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> CTCF1 CTCF2 IgG1 IgG2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  bedGraphToBigWig <span class="variable">$rootpath</span>/3.filter/bedgraph/<span class="variable">$&#123;name&#125;</span>_bowtie2.fragments.normalized.srt.bedgraph <span class="variable">$chromSize</span> <span class="variable">$rootpath</span>/3.filter/bigwig/<span class="variable">$&#123;name&#125;</span>_bowtie2.fragments.normalized.bw &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------&gt;</span></span><br><span class="line"><span class="comment"># peak calling</span></span><br><span class="line"><span class="comment"># -------------&gt;</span></span><br><span class="line"><span class="comment"># SEACR</span></span><br><span class="line"><span class="comment"># SEACR is intended to call peaks and enriched regions from sparse CUT&amp;RUN or chromatin profiling data in which background is dominated by &quot;zeroes&quot; (i.e. regions with no read coverage).</span></span><br><span class="line"><span class="comment"># bash SEACR_1.3.sh &lt;experimental bedgraph&gt;.bg [&lt;control bedgraph&gt;.bg | &lt;FDR threshold&gt;] [norm | non] [relaxed | stringent] output prefix</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加不加0.01差很多，把top1%作为peak</span></span><br><span class="line">seacr=/public/workspace/shaojf/anaconda3/bin/SEACR_1.3.sh</span><br><span class="line">mkdir -p <span class="variable">$rootpath</span>/4.peakCalling/</span><br><span class="line"><span class="keyword">for</span> pair <span class="keyword">in</span> CTCF1:IgG1 CTCF2:IgG2 <span class="comment">#ip组：ctl组</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  name=`<span class="built_in">echo</span> <span class="variable">$pair</span> | cut -d <span class="string">&quot;:&quot;</span> -f 1`</span><br><span class="line">  control=`<span class="built_in">echo</span> <span class="variable">$pair</span> | cut -d <span class="string">&quot;:&quot;</span> -f 2`</span><br><span class="line">  bash <span class="variable">$seacr</span> \</span><br><span class="line">    <span class="variable">$rootpath</span>/3.filter/bedgraph/<span class="variable">$&#123;name&#125;</span>_bowtie2.fragments.normalized.bedgraph \</span><br><span class="line">    <span class="variable">$rootpath</span>/3.filter/bedgraph/<span class="variable">$&#123;control&#125;</span>_bowtie2.fragments.normalized.bedgraph \</span><br><span class="line">    non stringent <span class="variable">$rootpath</span>/4.peakCalling/<span class="variable">$&#123;name&#125;</span>_seacr_control.peaks &amp;</span><br><span class="line">  bash <span class="variable">$seacr</span> \</span><br><span class="line">    <span class="variable">$rootpath</span>/3.filter/bedgraph/<span class="variable">$&#123;name&#125;</span>_bowtie2.fragments.normalized.bedgraph \</span><br><span class="line">    0.01 \</span><br><span class="line">    non stringent <span class="variable">$rootpath</span>/4.peakCalling/<span class="variable">$&#123;name&#125;</span>_seacr_top0.01.peaks &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### alternative method with MACS2</span></span><br><span class="line"><span class="comment"># 单末端测序：给所有的读段延长到200/300bp的fragment</span></span><br><span class="line"><span class="comment"># 双末端测序：直接基于bam文件，用真正的长度。需要-f BAMPE </span></span><br><span class="line">mkdir -p <span class="variable">$rootpath</span>/4.peakCalling/MACS2</span><br><span class="line"><span class="keyword">for</span> pair <span class="keyword">in</span> CTCF1:IgG1 CTCF2:IgG2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  name=`<span class="built_in">echo</span> <span class="variable">$pair</span> | cut -d <span class="string">&quot;:&quot;</span> -f 1`</span><br><span class="line">  control=`<span class="built_in">echo</span> <span class="variable">$pair</span> | cut -d <span class="string">&quot;:&quot;</span> -f 2`</span><br><span class="line">  macs2 callpeak -t <span class="variable">$rootpath</span>/3.filter/<span class="variable">$&#123;name&#125;</span>_bowtie2.q10.bam \</span><br><span class="line">        -c <span class="variable">$rootpath</span>/3.filter/<span class="variable">$&#123;control&#125;</span>_bowtie2.q10.bam \</span><br><span class="line">        -g hs -f BAMPE -n macs2_peak_q0.1.<span class="variable">$name</span> \</span><br><span class="line">        --outdir <span class="variable">$rootpath</span>/4.peakCalling/MACS2 \</span><br><span class="line">        -q 0.1 --keep-dup all \</span><br><span class="line">        2&gt;<span class="variable">$rootpath</span>/4.peakCalling/MACS2/macs2Peak_summary.<span class="variable">$name</span>.txt &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"></span><br><span class="line">Rscript cuttag.visualization.R /public/workspace/stu18230130/MyCourse/NGS-02/lab1-CUTTag CTCF,IgG 1,2 CTCF</span><br><span class="line"></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># https://github.com/Boyle-Lab/Blacklist/tree/master/lists</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------&gt;</span></span><br><span class="line"><span class="comment"># motif</span></span><br><span class="line"><span class="comment"># -------------&gt;</span></span><br><span class="line"><span class="comment"># MEME输入需要fasta格式</span></span><br><span class="line"><span class="comment"># 其他功能：想知道基因组上那些位置有某个motif,去基因组上scan</span></span><br><span class="line">mkdir -p <span class="variable">$rootpath</span>/5.motif/</span><br><span class="line">motifdb=/public/workspace/shaojf/Course/NGS/Reference/MEME/JASPAR2018_CORE_vertebrates_non-redundant.meme</span><br><span class="line">reffasta=/public/workspace/shaojf/Course/NGS/Reference/bowtie2_Index/GRCh38.fa</span><br><span class="line">blacklist=/public/workspace/shaojf/Course/NGS/Reference/ENCODE/blacklist.v2/hg38-blacklist.v2.bed</span><br><span class="line"></span><br><span class="line"><span class="comment"># - 表示从标准输入中获取</span></span><br><span class="line"><span class="comment"># sed &#x27;s?chr??&#x27; 把chr去掉</span></span><br><span class="line">bedtools intersect -u \</span><br><span class="line">  -a <span class="variable">$rootpath</span>/4.peakCalling/CTCF2_seacr_top0.01.peaks.stringent.bed \</span><br><span class="line">  -b <span class="variable">$rootpath</span>/4.peakCalling/CTCF1_seacr_top0.01.peaks.stringent.bed | \</span><br><span class="line">  bedtools intersect -v -a - -b &lt;(sed <span class="string">&#x27;s?chr??&#x27;</span> <span class="variable">$blacklist</span>) &gt; <span class="variable">$rootpath</span>/4.peakCalling/CTCF.overlapped.bed</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 给坐标提取fasta，把两个重复的peak去交集</span></span><br><span class="line">bedtools getfasta -<span class="keyword">fi</span> <span class="variable">$reffasta</span> -fo <span class="variable">$rootpath</span>/5.motif/CTCF.overlapped.fa -bed <span class="variable">$rootpath</span>/4.peakCalling/CTCF.overlapped.bed</span><br><span class="line"></span><br><span class="line"><span class="comment"># -oc 强行用某个文件夹 -o 需要新建的文件夹 </span></span><br><span class="line"><span class="comment"># -db denovo找出来的和数据库比对 $motifdb已知的数据库</span></span><br><span class="line">meme-chip -o <span class="variable">$rootpath</span>/5.motif/meme.CTCF.overlapped -db <span class="variable">$motifdb</span> <span class="variable">$rootpath</span>/5.motif/CTCF.overlapped.fa</span><br><span class="line"><span class="comment"># for name in CTCF1 CTCF2</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment"># 	bedtools getfasta -fi $reffasta \</span></span><br><span class="line"><span class="comment"># 		-fo $rootpath/5.motif/$&#123;name&#125;_seacr_top0.01.peaks.stringent.fa \</span></span><br><span class="line"><span class="comment"># 		-bed $rootpath/4.peakCalling/$&#123;name&#125;_seacr_top0.01.peaks.stringent.bed &amp;</span></span><br><span class="line"><span class="comment"># done </span></span><br><span class="line"><span class="comment"># wait</span></span><br><span class="line"><span class="comment"># for name in CTCF1 CTCF2</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment"># 	meme-chip -o $rootpath/5.motif/meme.$name -db $motifdb $rootpath/5.motif/$&#123;name&#125;_seacr_top0.01.peaks.stringent.fa &amp;</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line"><span class="comment"># wait</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CUT&amp;Tag</category>
      </categories>
      <tags>
        <tag>CUT&amp;Tag</tag>
      </tags>
  </entry>
  <entry>
    <title>Functional Genomics-01-BioinfoAna of Transcriptional Regulation</title>
    <url>/2021/03/02/Functional-Genomics-01-BioinfoAna-of-Transcriptional-Regulation/</url>
    <content><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ol>
<li><strong>表达(gene expression)</strong>:基因在生物体内的转录、剪接、翻译以及转变成具有生物活性的蛋白质分子之前的所有加工过程。<br>从一套基本不变的基因组中产生出多元化的细胞类型，是由调控基因活性的各种信号途径所控制。</li>
<li><strong>转录因子(transcr iption factor, TF)</strong>: 也称反式作用因子，有序地结合在目标基因启动子(promoter)序列中的特殊位点，启动基因的转录和控制基因的转录效率。<br> 根据转录因子的作用特点可分为二类:<ul>
<li>普遍转录因子，它们与RNA聚合酶II共同组成转录起始复合体时，转录才能在正确的位置开始。包括TFIID，TFIIA，TFIIF，TFIIE，TFIIH等;</li>
<li>组织细胞特异性转录因子，这些TF是在特异的组织细胞或是受到一些类固醇激素/生长因子的刺激后，开始表达某些特异蛋白质分子时，才需要的一类转录因子。</li>
</ul>
</li>
<li><strong>转录因子的结合位点(transcription factor binding site, TFBS)</strong>: 转录因子调节基因表达时，与基因模板链结合的区域，又被称为顺式作用元件。长度从几个到几十个碱基不等。</li>
<li>**模体(motif)**：转录因子的结合位点的特定模式。不是一段序列</li>
</ol>
<hr>
<h1 id="基因转录调节的基本模式"><a href="#基因转录调节的基本模式" class="headerlink" title="基因转录调节的基本模式"></a>基因转录调节的基本模式</h1><p><img src="/img/article/functionalgenomics/basic.png" alt="basic mode"></p>
<ol>
<li>启动子：启动子一般位于真核基因转录起始点上游 200bp以内。包括至少一个转录起始点以及一个以上的机能组件。启动子是基因的一个组成部分，控制基因表达（转录）的起始时间和表达的程度。</li>
<li>TATA盒：共有序列是TATAAAA，通常位于转录起始点上游-25~-30bp，决定转录的方向和精确的转录起始点。TATA盒是基本转录因子TFIID结合位点。</li>
<li>上游启动子元件：除TATA盒外，GC盒（GGGCGG）和 CAAT盒（GCCAAT）也是很多基因常见的，它们通常位于转录起始点上游-30~-110bp区域</li>
<li>RNA聚合酶：以一条DNA链或RNA为模板催化由核苷5′-三磷酸合成RNA的酶。是催化以DNA为模板(template)、三磷酸核糖核苷为底物、通过磷酸二酯键而聚合的合成RNA的酶。</li>
<li>顺式作用元件(cis-acting element): 存在于基因旁侧序列中能影响基因表达的序列。顺式作用元件包括启动子、增强子、调控序列和可诱导元件等，作用是参与基因表达的调控。顺式作用元件本身不编码任何蛋白质，仅仅提供一个作用位点，要与反式作用因子相互作用而起作用。</li>
</ol>
<hr>
<h1 id="基因转录调节机制的研究方法"><a href="#基因转录调节机制的研究方法" class="headerlink" title="基因转录调节机制的研究方法"></a>基因转录调节机制的研究方法</h1><h2 id="实验方法"><a href="#实验方法" class="headerlink" title="实验方法"></a>实验方法</h2><h3 id="荧光素酶报告基因-luciferase-report-gene-："><a href="#荧光素酶报告基因-luciferase-report-gene-：" class="headerlink" title="荧光素酶报告基因(luciferase report gene)："></a>荧光素酶报告基因(luciferase report gene)：</h3><p>检测转录因子与目的基因启动子区DNA相互作用，荧光素酶的表达量与转录因子的作用强度成正比。 </p>
<h3 id="凝胶迁移-EMSA-electrophoreticmobility-shift-assays"><a href="#凝胶迁移-EMSA-electrophoreticmobility-shift-assays" class="headerlink" title="凝胶迁移(EMSA, electrophoreticmobility shift assays):"></a>凝胶迁移(EMSA, electrophoreticmobility shift assays):</h3><p>是一种用于蛋白与核酸相互作用的技术，可用于定性和定量分析。最初是用于转录因子与启动子相互作用的验证性实验，也可应用与蛋白DNA、蛋白-RNA互作研究。EMSA主要基于蛋白-探针复合物在在凝胶电泳过程中迁移较慢的原理。</p>
<h3 id="DNase足迹法-DNase-footprinting-："><a href="#DNase足迹法-DNase-footprinting-：" class="headerlink" title="DNase足迹法(DNase footprinting)："></a>DNase足迹法(DNase footprinting)：</h3><p>鉴别RNA聚合酶等蛋白质在DNA上结合位点的方法。不仅能找到与特异性DNA结合的目标蛋白，而且能告知目标蛋白结合在哪些碱基部位。（原理：蛋白质结合在DNA片段上，能保护结合部位不被DNase破坏，DNA分子经酶切作用后遗留下该片段(亦称“足迹”)，进而可以确定它的序列）</p>
<h3 id="染色质免疫沉淀-ChIP-chromatin-immunoprecipitation"><a href="#染色质免疫沉淀-ChIP-chromatin-immunoprecipitation" class="headerlink" title="染色质免疫沉淀(ChIP, chromatin immunoprecipitation)"></a>染色质免疫沉淀(ChIP, chromatin immunoprecipitation)</h3><ul>
<li>创立者: 20世纪80年代末Alexander Varshavsky等人(Cell. 1988,53(6): 937-947 )</li>
<li>原理:<br>活细胞采用甲醛交联后裂解，染色体分离成为一定大小的片段，然后用特异性抗体免疫沉淀目标蛋白与DNA交联的复合物，对特定靶蛋白与DNA片段进行富集。采用低pH值反交联，DNA与蛋白质之间的Schiff键（-C=N-）水解，释放DNA片段。通过对目标片段的纯化与检测，获得DNA与蛋白质相互作用的序列信息。</li>
<li>应用: 主要用来分析目标基因有没有活性、或者分析一种已知蛋白（转录因子）的靶基因有哪些。</li>
<li>特点：<ol>
<li>针对某一特定候选转录因子，是否特异性结合于所调节的靶基因某一预定区域内，如启动子区，进行检测。</li>
<li>对同一DNA底物, 可以运用多种不同的抗体, 分别进行免疫共沉淀,以确定多种结合蛋白在同一染色质片段上的结合</li>
</ol>
</li>
</ul>
<h3 id="高通量实验测定-ChIP-chip-ChIP-seq"><a href="#高通量实验测定-ChIP-chip-ChIP-seq" class="headerlink" title="高通量实验测定(ChIP-chip, ChIP-seq)"></a>高通量实验测定(ChIP-chip, ChIP-seq)</h3><ol>
<li><strong>ChIP-chip</strong>:</li>
</ol>
<ul>
<li>创立者:2000年，Richard A. Young等人(Science.2000, 290(5500): 2306-2309)</li>
<li>原理:<br>该方法首先使用固定剂将DNA染色质断裂为0.2-1kp的碱基段;然后用针对特异性蛋白质的抗体进行ChIP，将富集的蛋白质一DNA复合物进行扩增，再将扩增的DNA片断与覆盖欲检测基因组的芯片进行杂交，使用芯片扫描仪对芯片的信息进行处理。</li>
<li>特点:<br> ChIP和芯片技术的联合运用<br> 全基因组范围内的定位分析<br> 靶基因群的高通量分析</li>
<li>不足：分辨率较低，大于200bp；只能检测已知序列</li>
</ul>
<ol start="2">
<li><strong>ChIP-seq</strong>:</li>
</ol>
<ul>
<li>创立者： 2007年，Steven J.M. Jones等人 (Science. 2000, 290(5500): 2306-2309 )</li>
<li>定义：<br>ChIP-seq是将深度测序技术与ChIP实验相结合，分析全基因组范围内DNA结合蛋白结合位点、组蛋白修饰、核小体定位或DNA甲基化的高通量方法，可以应用到任何基因组序列已知的物种，并能确切得到每一个片段的序列信息</li>
<li>原理：<ul>
<li>首先通过染色质免疫共沉淀技术（ChIP）特异性地富集目的蛋白结合的DNA片段，并对其进行纯化与文库构建；</li>
<li>然后对富集得到的DNA片段进行高通量测序。</li>
<li>研究人员通过将获得的数百万条序列标签精确定位到基因组上，从而获得全基因组范围内与组蛋白、转录因子等互作的DNA区段信息。</li>
</ul>
</li>
<li>特点：<ul>
<li>染色质免疫沉淀后的DNA，直接进行高通量测序 </li>
<li>是一个“开放系统”。它可以检测更小的结合区段、未知的结合位点、结合位点内的突变情况和蛋白亲合力较低的区段</li>
<li>成本低，周期短，省去了标记和杂交等步骤，并且无需多次重复实验，效率高</li>
<li>分辨率可提高到30～50bp</li>
</ul>
</li>
</ul>
<h2 id="转录因子结合位点的信息学预测方法"><a href="#转录因子结合位点的信息学预测方法" class="headerlink" title="转录因子结合位点的信息学预测方法"></a>转录因子结合位点的信息学预测方法</h2><p>问题：转录因子结合位点一般在6-12bp间，ChIPchip分辨率200-800bp, ChIP-seq在100bp或更高， 因此要对现有的高通量数据进行处理。<br>1.转录因子结合位点定位：根据若干个motif，在所研究的某个基因启动子区域内，搜索相应转录因子可能的结合位点。<br>2.转录因子结合位点的识别：通过收集多个基因启动子序列，在其中寻找具有统计显著性的短片段，作为同一转录因子可能的结合位点。</p>
<h3 id="转录因子结合位点的表示方式"><a href="#转录因子结合位点的表示方式" class="headerlink" title="转录因子结合位点的表示方式"></a>转录因子结合位点的表示方式</h3><h4 id="（一）共性序列-consensus-sequence"><a href="#（一）共性序列-consensus-sequence" class="headerlink" title="（一）共性序列(consensus sequence)"></a>（一）共性序列(consensus sequence)</h4><ul>
<li>将能与同一个转录因子结合的所有DNA片段按照对应位置进行排列，在每个位置上选择最可能出现的碱基,就组成了该转录因子结合位点的共性序列。</li>
<li>共性序列中用A、C、G、T之外的字母来表示结合位点中各个位置上可能出现的碱基组合，这些字母称为IUPAC简并码。</li>
<li>共性序列的表示方法简明易懂，却不能够反映每个位置上不同碱基出现的概率。</li>
</ul>
<p><img src="/img/article/functionalgenomics/IUPAC.png" alt="IUPAC"></p>
<h4 id="（二）位置频率矩阵-position-frequency-matrix"><a href="#（二）位置频率矩阵-position-frequency-matrix" class="headerlink" title="（二）位置频率矩阵(position frequency matrix)"></a>（二）位置频率矩阵(position frequency matrix)</h4><p>位置频率矩阵可以反映出每个位置上不同碱基出现的概率。</p>
<ul>
<li>该模型的一个前提假设是各个位置上碱基出现的概率相互独立。</li>
<li>矩阵每一列表示模体相应位置上四种碱基出现的概率。</li>
</ul>
<p><img src="/img/article/functionalgenomics/PFM.png" alt="PFM"></p>
<h3 id="三-序列标识图-sequence-logo"><a href="#三-序列标识图-sequence-logo" class="headerlink" title="(三)序列标识图(sequence logo)"></a>(三)序列标识图(sequence logo)</h3><ul>
<li>序列标识图依次绘出模体中各个位置上出现的碱基，每个位置上所有碱基的高度和反映了该位置上碱基的一致性，每个碱基字母的大小与碱基在该位置上出现<br>的频率成正比。</li>
<li>这种表示方法直观地给出模体各个位置上碱基出现的倾向性和整个模体的序列的一致性。</li>
</ul>
<p><img src="/img/article/functionalgenomics/methods.png" alt="methods"></p>
]]></content>
      <categories>
        <category>Functional Genomics</category>
      </categories>
      <tags>
        <tag>Functional Genomics</tag>
      </tags>
  </entry>
  <entry>
    <title>Git love RProject--push your project to Github/Gitee!</title>
    <url>/2021/04/10/Git-love-RProject-push-your-project-to-Github-Gitee/</url>
    <content><![CDATA[<style>
  p{
    font-size:18px;
    line-height:1.7em;

  }
</style>

<h1 id="R-project"><a href="#R-project" class="headerlink" title="R project"></a>R project</h1><ul>
<li>为什么要用R project：乱七八糟随手新建脚本的习惯该改掉了!想找以前代码的时候真的想哭！！</li>
<li>git：菜鸡终于发现了git的妙用了！把自己的项目整个推送到github/gitee上，然后但凡修改都能找到前后对比，改错了也能及时改回来</li>
</ul>
<h1 id="R-project的结构"><a href="#R-project的结构" class="headerlink" title="R project的结构"></a>R project的结构</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">└── my_project</span><br><span class="line">├── src # 这部分用来装R函数或者其他的可执行文件</span><br><span class="line">│ ├── bin # 可执行文件或者外程序包比如java包</span><br><span class="line">│ └── scripts # R函数脚本</span><br><span class="line">├── output # 输出数据 ignore</span><br><span class="line">├── data # 数据文件，你不会想把这个上传git的，进.gitignore</span><br><span class="line">│ ├── raw # 原始数据 ignore</span><br><span class="line">│ └── processed #中间文件 ignore</span><br><span class="line">├── reports # 报告，保存一些rmd生成的pdf/ppt，再也不用担心我的进展汇报啦</span><br><span class="line">├── README.md # 项目简介</span><br><span class="line">├── analysis.R # 调用函数的函数，需要的图表作为函数输出，结合rmarkdown舒服</span><br><span class="line">├── .gitignore # who is ignored .gitignore里添加文件夹必须加上/ ，比如data/</span><br><span class="line">├── all.rmd # rmarkdown，配合analysis.R，生成pdf报告挺不错的</span><br><span class="line">├── require.R # 把用到的包都require一遍，以防万一</span><br><span class="line">└── packrat # 里面主要存储安装包的信息(可选,这个文件夹通常挺大)。</span><br></pre></td></tr></table></figure>
<h1 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h1><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><center><img src="/img/scATAC/new.png" alt="new" style="zoom:100%;" /></center>
这个太简单了，直接建就行，语言写R

<h2 id="复制仓库地址，创建Rproject"><a href="#复制仓库地址，创建Rproject" class="headerlink" title="复制仓库地址，创建Rproject"></a>复制仓库地址，创建Rproject</h2><p>file -&gt; New Project -&gt; Version Control -&gt; Git (svn 没用过不知道) -&gt; Create Project</p>
<center><img src="/img/scATAC/gitee-link.png" alt="HC" style="zoom:80%;" /></center>

<center><img src="/img/scATAC/RStudio-clone-git-project.gif" alt="HC" style="zoom:60%;" /></center>

<h2 id="RStudio设置"><a href="#RStudio设置" class="headerlink" title="RStudio设置"></a>RStudio设置</h2><p>Tools -&gt; Global Options -&gt; Git/SVN<br>设置git的路径+获取RSA keys<br>这样就创建了一个用于SSH连接的RSA秘钥</p>
<center><img src="/img/scATAC/setting.png" alt="setting" style="zoom:100%;" /></center>

<p>复制public keys</p>
<h2 id="仓库中部署公钥"><a href="#仓库中部署公钥" class="headerlink" title="仓库中部署公钥"></a>仓库中部署公钥</h2><p>找到仓库设置中的SSH公钥，把刚刚复制的keys添加进来</p>
<h2 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h2><p>在Terminal中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&#x27;yourGitHubUsername&#x27;</span></span><br><span class="line">git config --global user.email <span class="string">&#x27;name@provider.com&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="first-commit"><a href="#first-commit" class="headerlink" title="first commit"></a>first commit</h2><p>选择要push的内容</p>
<center><img src="/img/scATAC/commit.png" alt="setting" style="zoom:100%;" /></center>]]></content>
      <categories>
        <category>ToolsLearning</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Metagenomics Analysis</title>
    <url>/2021/04/01/Metagenomics/</url>
    <content><![CDATA[<ol>
<li>通过single end示例数据了解qiime2分析过程。</li>
<li>尝试利用pair end示例数据进行16S数据分析。</li>
</ol>
<hr>
<h1 id="Qiime2"><a href="#Qiime2" class="headerlink" title="Qiime2"></a>Qiime2</h1><h2 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h2><p>QIIME 2是一款强大、可扩展和去中心化的微生物组分析平台，强调数据分析透明。QIIME 2可以使研究者从原始DNA序列开始分析，直接获取出版级的统计和图片结果。</p>
<p>主要特点：</p>
<ul>
<li>整合分析流程、自动化追踪数据来源</li>
<li>语义类型系统，自动识别输入文件类型</li>
<li>插件系统可扩展微生物分析功能种类</li>
<li>支持多种用户界面，如API、命令行、图形界面</li>
</ul>
<p>QIIME 2是对QIIME 1完全重新设计并重写的微生物组分析流程。QIIME 2保留了QIIME 1强大和广泛使用的优点，同时改进了其众多不足之处。</p>
<p>QIIME 2当前支持从头到尾的完整微生物组分析流程。通常QIIME 2插件功能，不断有新功能可用。可以在可用插件列表中查找当前可用的插件。在未来可用插件页列出了正在开发的插件。</p>
<h2 id="installation"><a href="#installation" class="headerlink" title="installation"></a>installation</h2><ul>
<li><p>conda环境安装QIIME2（推荐）<br>Install QIIME 2 within a conda environment<br>mkdir -p 2020.11 &amp;&amp; cd 2020.11</p>
</li>
<li><p>下载软件安装列表，官方源不容易下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -c https://data.qiime2.org/distro/core/qiime2-2020.11-py36-linux-conda.yml</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">wget -c http://210.75.224.110/github/QIIME2ChineseManual/2020.11/qiime2-2020.11-py36-linux-conda.yml</span><br><span class="line">time conda env create -n qiime2-2020.11 --file qiime2-2020.11-py36-linux-conda.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除软件列表</span></span><br><span class="line">rm qiime2-2020.11-py36-linux-conda.yml</span><br></pre></td></tr></table></figure></li>
<li><p>服务器已安装，直接使用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qiime2 conda environment path:</span><br><span class="line">/public/workspace/zmy1/home/wujian/.conda/envs/qimme2-2020.11/</span><br><span class="line"></span><br><span class="line"><span class="comment"># ln至自己的文件夹下</span></span><br><span class="line"><span class="built_in">source</span> activate qimme2-2020.11</span><br></pre></td></tr></table></figure>
<h2 id="Qiime2重要概念"><a href="#Qiime2重要概念" class="headerlink" title="Qiime2重要概念"></a>Qiime2重要概念</h2></li>
</ul>
<ol>
<li><p>数据文件: QIIME 2对象/文件格式<br>由QIIME 2产生的数据类型，叫QIIME 2对象(artifacts)，通常包括数据和元数据/样本信息(metadata)。元数据描述数据，包括类型、格式和它如何产生。典型的扩展名为.qza。</p>
</li>
<li><p>数据文件：可视化<br>QIIME2生成的图表结果对象或文件类型，以.qzv为扩展名，末尾的v代表visual；它同qza文件类似，包括分析方法和结果，方便追溯图表是如何产生的；唯一与qza不同的，它是分析的终点，即结果的呈现，不会在流程中继续分析。可视化的结果包括统计结果表格、交互式图像、静态图片及其它组合的可视化呈现。这类文件可以使用QIIME2 qiime tools view命令查看。</p>
<p>可通过网站：<a href="https://view.qiime2.org/">https://view.qiime2.org/</a><br>导入文件并显示结果图表，同时可查看数据分析过程；方便与不使用QIIME 2的合作者分享结果。</p>
</li>
<li><p>插件<br>QIIME2中的用户的某个特定功能即为插件，你可以安装并完成分析，比如拆分样品的q2-demux插件、Alpha-或beta-多样性分析的q2-diversity插件等。</p>
</li>
<li><p>方法和可视化软件<br>QIIME 2插件定义的用于进行分析的方法和可视化工具类型。</p>
<p>方法是对QIIME2定义的输入对象进行操作的过程，包括命令和参数，并产生1个或多个标准格式的输出。这一结果可以后续分析或可视化，产生中间或末端的输出。例如rarefy方法，输入文件为q2-feature-table插件产生的特征表，输出文件为样本深度一致的特征表。它可以作为输入文件，用于alpha多样性分析中的q2-diversity方法。输入和输出均为qza文件；</p>
<p>可视化工具定义了标准输入，包括QIIME 2对象和参数的组合，产生统计表格或可视化图形，方便用户解读，输入为qza格式，输出为qzv，文件不仅包括结果，还包括处理的分析命令和参数，方便重复和检查分析过程是否准确。可视化的结果文件qzv是分析的终点，不可以进一步分析。</p>
</li>
</ol>
<h2 id="Qiime2使用"><a href="#Qiime2使用" class="headerlink" title="Qiime2使用"></a>Qiime2使用</h2><p><img src="/img/Metagenomics/qiime.png" alt="qiime"></p>
<h1 id="16S分析流程"><a href="#16S分析流程" class="headerlink" title="16S分析流程"></a>16S分析流程</h1><blockquote>
<p>数据位置<br>/public/workspace/zmy1/home/wujian/metagenomics/single_end/<br>分别将emp-single-end-sequences和sample-metadata.tsv软链至相应文件夹下。<br>/public/workspace/zmy1/home/wujian/metagenomics/single_end/emp-single-end-sequences/<br>/public/workspace/zmy1/home/wujian/metagenomics/single_end/sample-metadata.tsv</p>
</blockquote>
<h2 id="Metadata-元数据"><a href="#Metadata-元数据" class="headerlink" title="Metadata 元数据"></a>Metadata 元数据</h2><p>元数据提供了从数据中获得生物学发现的关键。在QIIME 2中，样本元数据可以包括更多技术细节，例如在多次测序批次中用于每个样本的DNA条形码，或者样本的描述，例如每个样本来自人类微生物组对应时间序列研究中的分组、时间点和身体部位。特征元数据通常是特征注释，例如分配给序列变量或OTU的物种注释。</p>
<p>收集样本元数据通常是在开始QIIME 2分析之前要进行的第一步。由研究人员决定哪些信息是作为元数据收集和跟踪的。<br>尽可能多的收集元数据，因为您可能无法追溯收集某些类型的信息，以便后续分析中使用。<br><img src="/img/Metagenomics/Metadata.png" alt="Metadata"></p>
<h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><p>EMPSingleEndSequences是包含多样本混合的序列文件，这意味着序列尚未分配给样本（因此包括sequences.fastq.gz和barcode.fastq.gz文件，其中barcode.fastq.gz包含与sequences.fastq.gz中的每个序列相关联的条形码）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/public/workspace/zmy1/home/wujian/metagenomics/single_end/emp-single-end-sequences/</span><br></pre></td></tr></table></figure>
<h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">time qiime tools import \</span><br><span class="line">  --<span class="built_in">type</span> EMPSingleEndSequences \</span><br><span class="line">  --input-path ./0.rawdata/emp-single-end-sequences \</span><br><span class="line">  --output-path ./0.rawdata/emp-single-end-sequences.qza</span><br></pre></td></tr></table></figure>
<h2 id="拆分样品-Demultiplexing-sequences"><a href="#拆分样品-Demultiplexing-sequences" class="headerlink" title="拆分样品 Demultiplexing sequences"></a>拆分样品 Demultiplexing sequences</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">time qiime demux emp-single \</span><br><span class="line">  --i-seqs ./0.rawdata/emp-single-end-sequences.qza \</span><br><span class="line">  --m-barcodes-file ./0.rawdata/sample-metadata.tsv \</span><br><span class="line">  --m-barcodes-column barcode-sequence \</span><br><span class="line">  --o-per-sample-sequences 1.demuxdata/demux.qza \</span><br><span class="line">  --o-error-correction-details 1.demuxdata/demux-details.qza &amp;</span><br></pre></td></tr></table></figure>
<h2 id="结果统计"><a href="#结果统计" class="headerlink" title="结果统计"></a>结果统计</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">time qiime demux summarize \</span><br><span class="line">  --i-data demux.qza \</span><br><span class="line">  --o-visualization demux.qzv &amp;</span><br></pre></td></tr></table></figure>
<p>.qzv可以在 <a href="https://view.qiime2.org/">https://view.qiime2.org/</a> 上查看可视化结果</p>
<h2 id="序列质控和生成特征表-Sequence-quality-control-and-feature-table-construction"><a href="#序列质控和生成特征表-Sequence-quality-control-and-feature-table-construction" class="headerlink" title="序列质控和生成特征表 Sequence quality control and feature table construction"></a>序列质控和生成特征表 Sequence quality control and feature table construction</h2><p>dada2 denoise-single方法需要两个用于质量过滤的参数：</p>
<blockquote>
<p>–p-trim-left m，它去除每个序列的前m个碱基(如引物、标签序列barcode)；<br>–p-trunc-len n，它在位置n截断每个序列。这允许用户去除序列的低质量区域、引物或标签序列等。</p>
</blockquote>
<p>确定要为这两个参数的值，查看由qiime demux summarize生成的demux.qzv文件中的交互质量图选项卡。</p>
<blockquote>
<p>– p-trim-left 截取左端低质量序列，我们看上图中箱线图，左端质量都很高，无低质量区，设置为0；<br>– p-trunc-len 序列截取长度，也是为了去除右端低质量序列，我们看到大于120以后，质量下降极大，甚至中位数都下降至20以下，需要全部去除，综合考虑决定设置为120。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">time qiime dada2 denoise-single \</span><br><span class="line">  --i-demultiplexed-seqs 1.demuxdata/demux.qza \</span><br><span class="line">  --p-trim-left 0 \</span><br><span class="line">  --p-trunc-len 120 \</span><br><span class="line">  --o-representative-sequences ./2.QCandFeatureTable/rep-seqs-dada2.qza \</span><br><span class="line">  --o-table ./2.QCandFeatureTable/table-dada2.qza \</span><br><span class="line">  --o-denoising-stats ./2.QCandFeatureTable/stats-dada2.qza</span><br></pre></td></tr></table></figure>
<p>对特征表统计进行进行可视化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qiime metadata tabulate \</span><br><span class="line">  --m-input-file stats-dada2.qza \</span><br><span class="line">  --o-visualization stats-dada2.qzv</span><br></pre></td></tr></table></figure>
<h2 id="特征表和特征序列汇总-FeatureTable-and-FeatureData-summaries"><a href="#特征表和特征序列汇总-FeatureTable-and-FeatureData-summaries" class="headerlink" title="特征表和特征序列汇总 FeatureTable and FeatureData summaries"></a>特征表和特征序列汇总 FeatureTable and FeatureData summaries</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qiime feature-table summarize \</span><br><span class="line">  --i-table ./2.QCandFeatureTable/table-dada2.qza \</span><br><span class="line">  --o-visualization ./2.QCandFeatureTable/table.qzv \</span><br><span class="line">  --m-sample-metadata-file  ./0.rawdata/sample-metadata.tsv</span><br><span class="line"></span><br><span class="line">qiime feature-table tabulate-seqs \</span><br><span class="line">  --i-data ./2.QCandFeatureTable/rep-seqs-dada2.qza \</span><br><span class="line">  --o-visualization ./2.QCandFeatureTable/rep-seqs.qzv</span><br></pre></td></tr></table></figure>
<p>Output:</p>
<ol>
<li>table.qzv: 特征表统计。<br>Frequency per sample:<br>Frequency per feature: 一群数据里出现次数多的？<br>Feature Detail: 4b5eeb300368260019c1fbc7a3c718fc </li>
<li>rep-seqs.qzv: 代表序列统计，可点击序列跳转NCBI blast查看相近序列的信息。</li>
</ol>
<h2 id="构建进化树用于多样性分析-Generate-a-tree-for-phylogenetic-diversity"><a href="#构建进化树用于多样性分析-Generate-a-tree-for-phylogenetic-diversity" class="headerlink" title="构建进化树用于多样性分析 Generate a tree for phylogenetic diversity"></a>构建进化树用于多样性分析 Generate a tree for phylogenetic diversity</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">time qiime phylogeny align-to-tree-mafft-fasttree \</span><br><span class="line">  --i-sequences ./2.QCandFeatureTable/rep-seqs-dada2.qza \</span><br><span class="line">  --o-alignment ./3.generateTree/aligned-rep-seqs.qza \</span><br><span class="line">  --o-masked-alignment ./3.generateTree/masked-aligned-rep-seqs.qza \</span><br><span class="line">  --o-tree ./3.generateTree/unrooted-tree.qza \</span><br><span class="line">  --o-rooted-tree ./3.generateTree/rooted-tree.qza</span><br></pre></td></tr></table></figure>
<p>Output:<br>aligned-rep-seqs.qza: 多序列比对结果。<br>masked-aligned-rep-seqs.qza: 过滤去除高变区后的多序列比对结果。<br>rooted-tree.qza: 有根树，用于多样性分析。<br>unrooted-tree.qza: 无根树。</p>
<h2 id="Alpha和Beta多样性分析"><a href="#Alpha和Beta多样性分析" class="headerlink" title="Alpha和Beta多样性分析"></a>Alpha和Beta多样性分析</h2><p>QIIME 2的多样性分析使用q2-diversity插件，该插件支持计算α和β多样性指数、并应用相关的统计检验以及生成交互式可视化图表。我们将首先应用core-metrics-phylogenetic方法，该方法将FeatureTable抽平到用户指定的测序深度，然后计算几种常用的α和β多样性指数，并使用Emperor为每个β多样性指数生成主坐标分析（PCoA）图。</p>
<ul>
<li>α多样性</li>
</ul>
<p>-香农(Shannon’s)多样性指数（群落丰富度的定量度量，即包括丰富度richness和均匀度evenness两个层面）<br>-可观测的OTU(Observed OTUs，群落丰富度的定性度量，只包括丰富度）<br>-Faith’s系统发育多样性（包含特征之间的系统发育关系的群落丰富度的定性度量）<br>-均匀度Evenness（或 Pielou’s均匀度；群落均匀度的度量）</p>
<ul>
<li>β多样性</li>
</ul>
<p>-Jaccard距离（群落差异的定性度量，即只考虑种类，不考虑丰度）<br>-Bray-Curtis距离（群落差异的定量度量，较常用）<br>-非加权UniFrac距离（包含特征之间的系统发育关系的群落差异定性度量）<br>-加权UniFrac距离（包含特征之间的系统发育关系的群落差异定量度量）</p>
<p>需要提供给这个脚本的一个重要参数是–p-sampling-depth，它是指定重采样（即稀疏/稀疏rarefaction）深度。因为大多数多样指数对不同样本的不同测序深度敏感，所以这个脚本将随机地将每个样本的测序量重新采样至该参数值。例如，提供–p-sampling-depth 500，则此步骤将对每个样本中的计数进行无放回抽样，从而使得结果表中的每个样本的总计数为500。如果任何样本的总计数小于该值，那么这些样本将从多样性分析中删除。选择这个值很棘手。建议通过查看上面创建的表table.qzv文件中呈现的信息并选择一个尽可能高的值（因此每个样本保留更多的序列）同时尽可能少地排除样本来进行选择。<br><strong>如是数据量都很大，选最小的即可。如果有个别数据量非常小，去除最小值再选最小值。</strong><br>一般采用HiSeq2500或NovaSeq6000的 PE250模式测序，数据量都非常大，通常可以采用3万或5万的标准抽平，仍可保留90%以上样本。过低或过高一般结果也会波动较大，不建议放在一起分析。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">time qiime diversity core-metrics-phylogenetic \</span><br><span class="line">  --i-phylogeny ./3.generateTree/rooted-tree.qza \</span><br><span class="line">  --i-table ./2.QCandFeatureTable/table-dada2.qza \</span><br><span class="line">  --p-sampling-depth 1103 \</span><br><span class="line">  --m-metadata-file ./0.rawdata/sample-metadata.tsv \</span><br><span class="line">  --output-dir  ./4.CoreMetricsRes</span><br></pre></td></tr></table></figure>
<blockquote>
<p>13个数据文件:<br>core-metrics-results/faith_pd_vector.qza: Alpha多样性考虑进化的faith指数。<br>core-metrics-results/unweighted_unifrac_distance_matrix.qza: 无权重unifrac距离矩阵。<br>core-metrics-results/bray_curtis_pcoa_results.qza: 基于Bray-Curtis距离PCoA的结果。<br>core-metrics-results/shannon_vector.qza: Alpha多样性香农指数。<br>core-metrics-results/rarefied_table.qza: 等量重采样后的特征表。<br>core-metrics-results/weighted_unifrac_distance_matrix.qza: 有权重的unifrac距离矩阵。<br>core-metrics-results/jaccard_pcoa_results.qza: jaccard距离PCoA结果。<br>core-metrics-results/observed_otus_vector.qza: Alpha多样性observed otus指数。<br>core-metrics-results/weighted_unifrac_pcoa_results.qza: 基于有权重的unifrac距离的PCoA结果。<br>core-metrics-results/jaccard_distance_matrix.qza: jaccard距离矩阵。<br>core-metrics-results/evenness_vector.qza: Alpha多样性均匀度指数。<br>core-metrics-results/bray_curtis_distance_matrix.qza: Bray-Curtis距离矩阵。<br>core-metrics-results/unweighted_unifrac_pcoa_results.qza: 无权重的unifrac距离的PCoA结果</p>
</blockquote>
<blockquote>
<p>4个可视化结果:<br>core-metrics-results/unweighted_unifrac_emperor.qzv：无权重的unifrac距离PCoA结果采用emperor可视化。<br>core-metrics-results/jaccard_emperor.qzv：jaccard距离PCoA结果采用emperor可视化。<br>core-metrics-results/bray_curtis_emperor.qzv： Bray-Curtis距离PCoA结果采用emperor可视化。<br>core-metrics-results/weighted_unifrac_emperor.qzv： 有权重的unifrac距离PCoA结果采用emperor可视化。</p>
</blockquote>
<h2 id="Alpha多样性组间显著性分析和可视化"><a href="#Alpha多样性组间显著性分析和可视化" class="headerlink" title="Alpha多样性组间显著性分析和可视化"></a>Alpha多样性组间显著性分析和可视化</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qiime diversity alpha-group-significance \</span><br><span class="line">--i-alpha-diversity core-metrics-results/faith_pd_vector.qza \</span><br><span class="line">--m-metadata-file ./sample-metadata.tsv \</span><br><span class="line">--o-visualization core-metrics-results/faith-pd-group-significance.qzv</span><br><span class="line"></span><br><span class="line">qiime diversity alpha-group-significance \</span><br><span class="line">--i-alpha-diversity core-metrics-results/evenness_vector.qza \</span><br><span class="line">--m-metadata-file ./sample-metadata.tsv \</span><br><span class="line">--o-visualization core-metrics-results/evenness-group-significance.qzv</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#不同身体部位之间比较；</span></span><br><span class="line">time qiime diversity beta-group-significance \</span><br><span class="line">  --i-distance-matrix core-metrics-results/unweighted_unifrac_distance_matrix.qza \</span><br><span class="line">  --m-metadata-file sample-metadata.tsv \</span><br><span class="line">  --m-metadata-column body-site \</span><br><span class="line">  --o-visualization core-metrics-results/unweighted-unifrac-body-site-significance.qzv \</span><br><span class="line">  --p-pairwise</span><br><span class="line"></span><br><span class="line"><span class="comment">#不同subject之间比较；</span></span><br><span class="line">time qiime diversity beta-group-significance \</span><br><span class="line">  --i-distance-matrix core-metrics-results/unweighted_unifrac_distance_matrix.qza \</span><br><span class="line">  --m-metadata-file sample-metadata.tsv \</span><br><span class="line">  --m-metadata-column subject \</span><br><span class="line">  --o-visualization core-metrics-results/unweighted-unifrac-subject-group-significance.qzv \</span><br><span class="line">  --p-pairwise</span><br></pre></td></tr></table></figure>
<h2 id="Alpha稀疏曲线-Alpha-rarefaction-plotting"><a href="#Alpha稀疏曲线-Alpha-rarefaction-plotting" class="headerlink" title="Alpha稀疏曲线 Alpha rarefaction plotting"></a>Alpha稀疏曲线 Alpha rarefaction plotting</h2><p>稀疏曲线：到什么时候饱和，捕获到采样中所有微生物的菌群</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">time qiime diversity alpha-rarefaction \</span><br><span class="line">  --i-table table-dada2.qza \</span><br><span class="line">  --i-phylogeny rooted-tree.qza \</span><br><span class="line">  --p-max-depth 4000 \</span><br><span class="line">  --m-metadata-file sample-metadata.tsv \</span><br><span class="line">  --o-visualization alpha-rarefaction.qzv</span><br></pre></td></tr></table></figure>
<p>Output：<br>alpha-rarefaction.qzv: 稀疏曲线。</p>
<h2 id="物种组成分析-Taxonomic-analysis"><a href="#物种组成分析-Taxonomic-analysis" class="headerlink" title="物种组成分析 Taxonomic analysis"></a>物种组成分析 Taxonomic analysis</h2><p>物种分类器</p>
<ul>
<li><p>物种分类器根据你特定的样品制备和测序参数进行训练时表现最好，包括用于扩增的引物和测序序列的长度。因此，一般来说，你应该按照使用q2-feature-classifier的训练特征分类器的说明来训练自己的物种分类器。</p>
</li>
<li><p>这里使用的分类器是在Greengenes 13_8 99% OTU上训练的，其中序列被修剪到仅包括来自16S区域的250个碱基。利用这个分类器生成从序列到物种注释结果关联的可视化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln –s /public/workspace/zmy1/home/wujian/metagenomics/single_end/gg-13-8-99-515-806-nb-classifier.qza ./</span><br></pre></td></tr></table></figure>
<h2 id="物种注释和可视化"><a href="#物种注释和可视化" class="headerlink" title="物种注释和可视化"></a>物种注释和可视化</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">time qiime feature-classifier classify-sklearn \</span><br><span class="line">  --i-classifier gg-13-8-99-515-806-nb-classifier.qza \</span><br><span class="line">  --i-reads ./2.QCandFeatureTable/rep-seqs-dada2.qza \</span><br><span class="line">  --o-classification taxonomy.qza</span><br><span class="line"></span><br><span class="line">qiime metadata tabulate \</span><br><span class="line">  --m-input-file taxonomy.qza \</span><br><span class="line">  --o-visualization taxonomy.qzv</span><br></pre></td></tr></table></figure>
<p>Output:<br>taxonomy.qza: 物种注释结果。<br>gg-13-8-99-515-806-nb-classifier.qza: 分类器的训练结果。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Barplot</span></span><br><span class="line">qiime taxa barplot \</span><br><span class="line">  --i-table table-dada2.qza \</span><br><span class="line">  --i-taxonomy taxonomy.qza \</span><br><span class="line">  --m-metadata-file sample-metadata.tsv \</span><br><span class="line">  --o-visualization taxa-bar-plots.qzv</span><br></pre></td></tr></table></figure>
<p>Output:<br>taxa-bar-plots.qzv: 交互式物种组成barplot。</p>
]]></content>
      <categories>
        <category>Metagenomics</category>
      </categories>
  </entry>
  <entry>
    <title>Paper-writing Tips</title>
    <url>/2021/03/17/Paper-writing-Tips/</url>
    <content><![CDATA[<h1 id="Word-amp-Phrase"><a href="#Word-amp-Phrase" class="headerlink" title="Word &amp; Phrase"></a>Word &amp; Phrase</h1><ol>
<li><p>and<br> , and 顺承关系，存在因果逻辑 （eg. 我昨天晚上晚睡了, and 我今天早上迟到了）<br> and 前后并列</p>
</li>
<li><p>however<br> however是强转折，隐含着否定前述结果或结论的意思，要么是你的实验结果和别人不一样，要么是否认自己的前期猜想。<br> 一般程度转折应该用regardless，even, despite。而且母语者很少在句首用however。<br> however就是“但你是个好人”里的“但”，但凡对前文有一丝留恋的，都没法说出口在句子开头。</p>
</li>
<li><p>Above (“the above method,” “mentioned above,” etc.) – Often, you are referring to something<br>preceding, but not necessarily above; a loose reference, convenient for writers, but not for<br>readers. Be specific. You know exactly what and where, but your readers may have to search<br>(sometimes through much preceding material).</p>
</li>
<li><p>Affect, effect – Affect is a verb and means to influence. Effect, as a verb, means to bring about;<br>as a noun, effect means result.</p>
</li>
<li><p>All of, both of – Just “all” or “both” will serve in most instances.</p>
</li>
<li><p>Alternate, alternative – Be sure which you mean.</p>
</li>
<li><p>And (to begin a sentence) – Quite proper. You may have been told not to do this in grade<br>school. But teacher’s purpose was to keep you from using fragmentary sentences; either “and” or<br>“but” may be used to begin complete sentences. And both are useful transitional words between<br>related or contrasting statements.</p>
</li>
<li><p>Apparently (apparent) – means obviously, clearly, plainly evident, but also means seemingly or<br>ostensibly as well as observably. You know the meaning that you intend, but readers may not.<br>Ambiguity results. Use obvious(ly), clear(ly), seeming(ly), evident(ly), observable or observably,<br>to remove all doubt.</p>
</li>
<li><p>Appear, appears – Seem(s)? “He always appears on the scene, but never seems to know what<br>to do.” “Marley’s ghost appeared but seemed harmless.”</p>
</li>
<li><p>As – Dialectal when used in place of that or whether; do not use “as” to mean because or<br>inasmuch as.<br>At the present time, at this point in time – Say “at present” or “now” if necessary at all.</p>
</li>
<li><p>Below – See comment about “above”.</p>
</li>
<li><p>But (to begin a sentence) – Go right ahead (see “And” and “However”). </p>
</li>
<li><p>By means of – Most often, just “by” will serve and save words.</p>
</li>
<li><p>Case – Can be ambiguous, misleading, or ludicrous because of different connotations; e.g., “In<br>the case of Scotch whiskey,….” Case also is a frequent offender in padded, drawn-out sentences.<br>For “in this case,” try “in this instance.”</p>
</li>
<li><p>Commas and punctuation – Not precisely a word-usuage matter except in relation to how<br>words are put together. The trend was toward less punctuation (particularly fewer commas), but<br>that demands careful writing, without misplaced or dangling elements. Do not omit commas<br>before the conjunctions in compound sentences. Most journals, but not all, use final commas<br>before ‘and” or “or” in series; check the journal.</p>
</li>
<li><p>Compare with, compare to – Compare with means to examine differences and similarities;<br>compare to means to represent as similar. One may conclude that the music of Brahms compares<br>to that of Beethoven, but to do that, one must first compare the music of Brahms with that of<br>Beethoven. (See also: Ian A. Greaves. On making comparisons: Reminded again. Science<br>226(4672):242. 1984.)</p>
</li>
<li><p>Comprise – Before misuse, comprise meant to contain, include, or encompass (not to constitute<br>or compose) and still does, despite two now opposite meanings. Use and meanings now are so<br>confused and mixed that “comprise” is best avoided altogether!</p>
</li>
<li><p>Correlated with, correlated to – Although things may be related to one another, things are<br>correlated with one another.</p>
</li>
<li><p>Different from, different than – Different from! Also, one thing differs from another, although<br>you may differ with your colleagues.</p>
</li>
<li><p>Due to – Make sure that you don’t mean because of. Due is an adjective modifier and must be<br>directly related to a noun, not to a concept or series of ideas gleaned from the rest of a statement.<br>“Due to the fact that…” is an attempt to weasel out.</p>
</li>
<li><p>During the course of, in the course of – Just use “during” or “in.”<br>Either….or, neither…nor – Apply to no more than two items or categories. Similarly, former<br>and latter refer only to the first and second of only two items or categories.</p>
</li>
<li><p>Etc. – Use at least two items or illustrations before “and so forth” or “etc.”</p>
</li>
<li><p>Experience(d) – To experience something is sensory; inanimate, unsensing things (lakes, soils,<br>enzymes, streambeds, farm fields, etc.) do not experience anything.</p>
</li>
<li><p>Following – “After” is more precise if “after” is the meaning intended. “After [not following] the<br>procession, the leader announced that the ceremony was over.” </p>
</li>
<li><p>High(er), low(er) – Much too often used, frequently ambiguously or imprecisely, for other<br>words such as greater, lesser, larger, smaller, more, fewer; e.g., “Occurrences of higher<br>concentrations were lower at higher levels of effluent outflow.” One interpretation is that greater<br>concentrations were fewer or less frequent as effluent volume(s) increased, but others also are<br>possible.</p>
</li>
<li><p>However – Place it more often within a sentence or major element rather than at the beginning<br>or end. “But” serves better at the beginning.</p>
</li>
<li><p>Hyphening of compound or unit modifiers – Often needed to clarify what is modifying what;<br>e.g., a small-grain harvest (harvest of small grain) is different from a small grain harvest (small<br>harvest of all grain), a fast acting dean isn’t necessarily as effective as a fast-acting dean, a batch<br>of (say, 20) 10-liter containers is different from a batch of 10 [1-] liter containers, and a man<br>eating fish is very different from a man-eating fish! Grammatically, adjectives are noun<br>modifiers, and the problem is when adjectives and nouns are used to modify other adjectives and<br>nouns. Adverbs (usually with “ly” endings), however, are adjective modifiers.</p>
</li>
<li><p>In order to – For brevity, just use “to”, the full phrase may be used, however [in order] to<br>achieve useless padding.</p>
</li>
<li><p>Irregardless – No, regardless. But irrespective might do.</p>
</li>
<li><p>It should be mentioned, noted, pointed out, emphasized, etc. – Such preambles often add<br>nothing but words. Just go ahead and say what is to be said.</p>
</li>
<li><p>It was found, determined, decided, felt, etc. – Are you being evasive? Why not put it frankly<br>and directly? (And how about that subjective “felt”?)</p>
</li>
<li><p>Less(er), few(er) – “Less” refers to quantity; “fewer” to number.</p>
</li>
<li><p>Majority, vast majority – See if most will do as well or better. Look up “vast.”</p>
</li>
<li><p>Myself – Not a substitute for me. “This paper has been reviewed by Dr. Smith and myself” and<br>“The report enclosed was prepared by Dr. Jones and myself” are incorrect as is “Don’t hesitate to<br>call Dr. Doe or myself”; me would have been correct in all instances. (Use of I also would have<br>been wrong in those examples.) Some correct uses of myself: I found the error myself. I myself<br>saw it happen. I am not myself today. I cannot convince myself. I locked myself out of the car.</p>
</li>
<li><p>Partially, partly – Compare the meanings (see also impartially). Partly is the better, simpler,<br>and more precise word when partly is meant.</p>
</li>
<li><p>Percent, percentage – Not the same; use percent only with a number. </p>
</li>
<li><p>Predominate, predominant – Predominate is a verb. Predominant is the adjective; as an adverb, predominantly (not “predominately”).</p>
</li>
<li><p>Prefixes – (mid, non, pre, pro, re, semi, un, etc.) – Usually not hyphened in U.S. usage except<br>before a proper name (pro-Iowa) or numerals (mid-60s) or when lack of a hyphen makes a word<br>ambiguous or awkward. Recover a fumble, but perhaps re-cover a sofa. Preengineered is better<br>hyphened as pre-engineered, one of the few exceptions so hyphened. Breaking pairs such as<br>predoctoral and postdoctoral into pre- and post-doctoral “forces” hyphening of both otherwise<br>unhyphened words.</p>
</li>
<li><p>Principle, principal – They’re different; make sure which you mean.<br>Prior to, previous to – Use before, preceding, or ahead of. There are prior and subsequent<br>events that occur before or after something else, but prior to is the same kind of atrocious use<br>that attempts to substitute “subsequent to” for “after.”</p>
</li>
<li><p>Proven – Although a proven adjective, stick to proved for the past participle.<br>Provided, providing – Provided (usually followed by “that”) is the conjunction; providing is the<br>participle.</p>
</li>
<li><p>Reason why – Omit why if reason is used as a noun. The reason is…; or, the reason is that… (i.e.,<br>the reason is the why).</p>
</li>
<li><p>Similar…as – No! If things are similar, they are similar to one another</p>
</li>
<li><p>Since – has a time connotation; use “because” or “inasmuch as” when either is the intended<br>meaning.</p>
</li>
<li><p>That and which – Two words that can help, when needed, to make intended meanings and<br>relationships unmistakable, which is important in reporting scientific information. If the clause<br>can be omitted without leaving the modified noun incomplete, use which and enclose the clause<br>within commas or parentheses; otherwise, use that.</p>
</li>
<li><p>To be – Frequently unnecessary. “The differences were [found] [to be] significant.”<br>Varying – Be careful to distinguish from various or differing. In saying that you used varying<br>amounts or varying conditions, you are implying individually changing amounts or conditions<br>rather than a selection of various or different ones. </p>
</li>
<li><p>Under way – two words except as adjective (e.g., “Further work on development is under way,<br>but the problem of underway repair has not be solved.”).</p>
</li>
<li><p>Where – Use when you mean where, but not for “in which,” “for which,” etc.<br>Which is, that were, who are, etc. – Often not needed. For example, “the data that were related<br>to age were analyzed first” means that the data related to age were analyzed first. Similarly, for<br>“the site, which is located near Ames,” try “the site, located near Ames” or “the site, near Ames.”<br>Rather than “all persons who were present voted,” just say that “all persons present voted.”<br>Rephrasing sometimes can help. Instead of “a survey, which was conducted in 1974” or “a<br>survey conducted in 1974,” try “a 1974 survey.”</p>
</li>
<li><p>While – Preferably not if, while writing, you mean and, but, although, or whereas.<br>Remember that a research report should communicate and record information as accurately and<br>concisely as possible. The purpose is to report, not to impress with elegance. Excess wordage,<br>tortuous construction, unnecessary detail, duplication, repetition, third-person passive pseudoobjectivism, etc., obstruct rather than facilitate communication. It’s the message that is important,<br>not sheer numbers of words. Use precise words and expressions of unmistakable meaning; avoid<br>the clouded, ambiguous, vague, and needlessly complex.<br>BEWARE OF MISPLACED or DANGLING MODIFIERS and PRONOUNANTECEDENT PROBLEMS! The difficulty here is that you, as the author, know exactly to<br>which each has reference even through not explicitly stated. Your reader, however, doesn’t have<br>this advantage, and the result may be confusing, misleading, or funny.</p>
</li>
</ol>
<p><strong>EXAMPLES:</strong><br>“Using multiple-regression techniques, the animals in Experiment I were…..”<br>“Based only on this doubtful inference, we find the conclusions not supported.”<br>“The determinations were made on samples using gas chromatography.”<br>“In assessing the damage, the plants exhibited numerous lesions.”<br>“The spiders were inadvertently discovered while repairing a faulty growth chamber.”<br>“Settling in the collected effluent, we observed what was determined to be….”<br>“The flavor was evaluated by an experienced taste panel, and it was deemed obnoxious.”<br>“All samples in Lot II were discarded when the authors found that they were contaminated with<br>alcohol, rendering them unstable.” [and unable to think clearly?]<br>“The guidelines were submitted to the deans, but they subsequently were ignored.”<br>“The contents were placed in 50-ml flasks, which after evaporating….” [let the contents run all<br>over?]</p>
<hr>
<h1 id="Painting"><a href="#Painting" class="headerlink" title="Painting"></a>Painting</h1><p><a href="https://smart.servier.com/smart_image/">https://smart.servier.com/smart_image/</a></p>
]]></content>
      <categories>
        <category>Records</category>
      </categories>
      <tags>
        <tag>Tips</tag>
      </tags>
  </entry>
  <entry>
    <title>Phrase for Response Letter</title>
    <url>/2021/04/12/Phrase-for-Response-Letter/</url>
    <content><![CDATA[<ol>
<li><p>According to the associate editor and reviewers’ comments, we have made extensive modifications to our manuscript and supplemented extra data to make our results convincing.</p>
</li>
<li><p>In this revised version, changes to our manuscript were all highlighted within the document by using red colored text.</p>
</li>
<li><p>Thank you for your nice comments on our article. According to your suggestions, we have supplemented several data here and corrected several mistakes in our previous draft. Based on your comments, we also attached a point-by-point letter to you and the other two reviewers. We have made extensive revisions to our previous draft. The detailed point-by-point responses are listed below.</p>
</li>
<li><p>Thanks for your help. We feel really sorry for our carelessness.</p>
</li>
<li><p>Thank you for your reminding. You and the other two reviewers’ comments are all of great importance to our article. All of these comments have contributed a lot to improve the quality of our article. After this revision, we have written a point-by-point response letter to you as you can see above. Meanwhile, we also wrote a point-by-point response letter to the other two nice reviewers to acknowledge their helps and denote where we made revisions.</p>
</li>
<li><p>We feel great thanks for your professional review work on our article. As you are concerned, there are several problems that need to be addressed. According to your nice suggestions, we have made extensive corrections to our previous draft. We have added necessary data to supplement our results and edited our article extensively. The detailed corrections are listed below.</p>
</li>
<li><p>We feel sorry that we did not provide enough information about XXXX.</p>
</li>
<li><p>it is really a giant mistake to the whole quality of our article. We feel sorry for our carelessness. We have corrected it and we also feel great thanks for your point out.</p>
</li>
<li><p>thanks for your suggestions. We feel sorry for our poor writings, however, we do invite a friend of us who is a native English speaker from USA help polish our article. Due to our friend’s help, the article was edited extensively. And we hope the revised manuscript could be acceptable for you.</p>
</li>
<li><p>thanks for your careful checks. We are sorry for our carelessness. Based on your comments, we have made the corrections to make the unit harmonized within the whole manuscript.</p>
</li>
<li><p>your suggestion really means a lot to us. Yes, it would be more understandable if we XXX.</p>
</li>
<li><p>According to your suggestion, we have corrected the “XXX” into “XXX”.</p>
</li>
<li><p>thanks for your correction. It was indeed a serious grammatical error. And we have corrected it according to your suggestion.</p>
</li>
<li><p>thanks for your suggestions. We feel sorry for the improper wording. We have used “XXXX” as you suggested.</p>
</li>
<li><p>According to the reviewer’s comments, we have revised the manuscript extensively. If there are any other modifications we could make, we would like very much to modify them and we really appreciate your help. “xxxx” is a journal of great popularity and prestige. We hope that our manuscript could be considered for publication in your journal. Thank you very much for your help.</p>
</li>
<li><p>The manuscript is revised submission (XXXXXXX) with new line and page numbers in the text, some grammar and spelling errors had also been corrected. Furthermore, the relevant regulations had been made in the original manuscript according to the comments of reviewers, and the major revised portions were marked in red bold. We also responded point by point to each reviewer comments as listed below, along with a clear indication of the location of the revision. Hope these will make it more acceptable for pub lication.</p>
</li>
<li><p>Thank you for your kind comments on our manuscript entitled“XX文章名”. We have carefully revised the manuscript according to the reviewer’s comments. Based on the suggestions, we have made an extensive modification on the revised manuscript. Detailed revision was shown as follows. The changes to our manuscript within the document were aslo highlighted by using red colored text.</p>
</li>
<li><p>We are very sorry for our negligence of…..<br>We are very sorry for our incorrect writing ……..<br>It is really true as Reviewer suggested tha…..<br>We have made correction according to the Reviewer’s comments.<br>We have re-written this part according to the Reviewer’s suggestion.<br>As Reviewer suggested that…..<br>Considering the Reviewer’s suggestion, we have …. .</p>
</li>
<li><p>Line 60-61, the statements ……. were corrected as ………<br>Line 107, …… was added<br>Line 129, …..was deleted</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Records</category>
      </categories>
      <tags>
        <tag>Tips</tag>
      </tags>
  </entry>
  <entry>
    <title>RNA-seq: GSEA &amp; ssGSEA</title>
    <url>/2021/03/08/RNA-seq-GSEA-ssGSEA/</url>
    <content><![CDATA[<h1 id="GSEA（Gene-Set-Enrichment-Analysis）"><a href="#GSEA（Gene-Set-Enrichment-Analysis）" class="headerlink" title="GSEA（Gene Set Enrichment Analysis）"></a><strong>GSEA（Gene Set Enrichment Analysis）</strong></h1><p>该方法发表于2005年的<a href="https://www.pnas.org/content/pnas/102/43/15545.full.pdf">Gene set enrichment analysis: a knowledge-based approach forinterpreting genome-wide expression profiles</a>，是一种基于基因集的富集分析方法。</p>
<p>在对基因表达数据分析时，首先确定分析的目的，即选择MSigDB中的一个或多个功能基因集进行分析，然后基于基因表达数据与表型的关联度（也可以理解为表达量的变化）的大小进行排序。然后判断每个基因集内的基因是否富集于表型相关度排序后基因列表的上部或下部，从而判断此基因集内基因的协同变化对表型变化的影响。</p>
<p><img src="/img/article/RNA-seq/GSEA.png" alt="GSEA"></p>
<p>GSEA的输入是一个基因表达量矩阵，其中的样本分成了A和B两组，找到两组之间差异表达的基因，然后根据foldchange进行排序，用来表示基因在两组间表达量的变化趋势。排序之后的基因列表其顶部可以看做是上调的差异基因，其底部是下调的差异基因。GSEA分析的是一个基因集下的所有基因是否在这个排序列表的顶部或者底部富集，如果在顶部富集，我们可以说，从总体上看，该基因集是上调趋势，反之，如果在底部富集，则是下调趋势。</p>
<h1 id="ssGSEA-single-sample-Gene-Set-Enrichment-Analysis）"><a href="#ssGSEA-single-sample-Gene-Set-Enrichment-Analysis）" class="headerlink" title="ssGSEA(single sample Gene Set Enrichment Analysis）"></a><strong>ssGSEA(single sample Gene Set Enrichment Analysis）</strong></h1><ul>
<li><p>定义：</p>
</li>
<li><p>原理：</p>
</li>
<li><p>实现：</p>
</li>
<li><p>输入文件：</p>
</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>RNA-seq</category>
      </categories>
      <tags>
        <tag>RNA-seq</tag>
      </tags>
  </entry>
  <entry>
    <title>RNA-seq: Spike-in/Housekeeping gene normalization</title>
    <url>/2021/03/04/RNA-seq-Spike-in-Housekeeping-gene-normalization/</url>
    <content><![CDATA[<p><strong>RNA-seq基本假设：</strong>  </p>
<ul>
<li> 绝大多数基因不发生表达量的变化  </li>
<li> 特别高表达的基因不发生表达量的变化</li>
</ul>
<p><strong>若不满足以上基本假设（癌旁组织等）：</strong>  </p>
<ol>
<li>使用ERCC RNA spike-ins，绝对定量，假设样本间ERCC的量相同  </li>
<li>假设housekeeping基因表达量变化量不大  </li>
</ol>
<hr>
<p><strong>ERCC(External RNA Controls Consortium, 外源RNA-SEQ标准库)</strong><br>建库时掺入外源rna，因为知道它的绝对量，可以计算<br>很贵<br>两种比例：Mix1，Mix2<br>分析思路：  </p>
<ul>
<li>与普通的RNA-Seq数据分析流程基本一致  </li>
<li>在构建Reference的时候需要把ERCC spike-in的序列一起添加到参考基因组，一起构建比对软件如HISAT2, STAR等的index文件;  </li>
<li>下游使用软件分析，认为sample之间spike-in的量是恒定相等的  </li>
<li>官网上下载后整理成fasta，贴到染色体后面，在构建index时把ERCC构建进去  </li>
</ul>
<hr>
<p><strong>Housekeeping gene</strong><br>RUVSeq package (Bioconductor)<br>在不同组织、器官、不同刺激下都表达，3000-4000个<br>2013-Trend in Genetics-Human housekeeping genes revisited 可以下载list of housekeeping gene  </p>
<ul>
<li>假设：sample之间housekeeping之间的表达量基本不发生变化——&gt;校正（不需要再用Quantile,RLE,TMM等做校正） </li>
<li>本质: 是对RNA-Seq数据进行矫正(Normalization),矫正过后的count数据，可以正常进行差异表达分析，如使用edgeR或者DESeq2等  </li>
<li>输入：原始表达矩阵+认为不变的gene id list   </li>
<li>输出：经过校正的表达矩阵（count/FPKM/TPM/CPM…)      </li>
</ul>
<hr>
<h1 id="spike-in-or-housekeeping-gene-normalization"><a href="#spike-in-or-housekeeping-gene-normalization" class="headerlink" title="spike-in or housekeeping gene normalization"></a>spike-in or housekeeping gene normalization</h1><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rm(<span class="built_in">list</span>=ls())</span><br><span class="line"></span><br><span class="line"><span class="comment"># BiocManager::install(&quot;RUVSeq&quot;)</span></span><br><span class="line">library(Biobase)</span><br><span class="line">library(BiocGenerics)</span><br><span class="line">library(parallel)</span><br><span class="line">library(EDASeq)</span><br><span class="line">library(ShortRead)</span><br><span class="line">library(BiocParallel)</span><br><span class="line">library(Biostrings)</span><br><span class="line">library(S4Vectors)</span><br><span class="line">library(stats4)</span><br><span class="line">library(IRanges)</span><br><span class="line">library(XVector)</span><br><span class="line">library(Rsamtools)</span><br><span class="line">library(GenomeInfoDb)</span><br><span class="line">library(GenomicAlignments)</span><br><span class="line">library(SummarizedExperiment)</span><br><span class="line">library(MatrixGenerics)</span><br><span class="line">library(matrixStats)</span><br><span class="line">library(edgeR)</span><br><span class="line">library(limma)</span><br><span class="line">library(RUVSeq)</span><br></pre></td></tr></table></figure>


<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">setwd(<span class="string">&quot;C:/Users/Surface/Desktop/Meng&#x27;s Lesson/RNA-seq/20200926-第5次直播-相关代码_数据_结果/20200926-第5次直播-相关代码_数据_结果/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># load raw count table </span></span><br><span class="line">count_df &lt;- read.table(file = <span class="string">&quot;./293T-RNASeq-Ctrl_vs_KD.STAR.hg38.featureCounts.FixColName.tsv&quot;</span>,header = <span class="built_in">T</span>,sep = <span class="string">&quot;\t&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># load housekeeping gene list</span></span><br><span class="line">hsk_gene_df &lt;- read.table(file = <span class="string">&quot;./human_housekeeping_gene_list.txt&quot;</span>,header = <span class="built_in">T</span>,sep = <span class="string">&quot;\t&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># check in list gene number</span></span><br><span class="line"><span class="comment"># 95 genes not in the new version of housekeeping gene</span></span><br><span class="line">table(hsk_gene_df$gene_id %in% rownames(count_df))</span><br><span class="line"></span><br><span class="line"><span class="comment"># select Housekeeping gene list</span></span><br><span class="line">hsk_gene_id.count &lt;- count_df[rownames(count_df) %in% hsk_gene_df$gene_id,]</span><br><span class="line">hsk_gene_id.list &lt;- rownames(count_df)[rownames(count_df) %in% hsk_gene_df$gene_id]</span><br><span class="line"></span><br><span class="line"><span class="comment"># select upper 100~200</span></span><br><span class="line">mean.value &lt;- apply(hsk_gene_id.count, <span class="number">1</span>, mean)</span><br><span class="line"></span><br><span class="line">hsk_gene_id.list.select &lt;- hsk_gene_id.list[order(mean.value,decreasing = <span class="built_in">T</span>)][<span class="number">800</span>:<span class="number">1000</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># make sample info table</span></span><br><span class="line">sample_df &lt;- data.frame(</span><br><span class="line">  condition = as.factor(<span class="built_in">c</span>(<span class="built_in">rep</span>(<span class="string">&quot;ctrl&quot;</span>,<span class="number">2</span>), <span class="built_in">rep</span>(<span class="string">&quot;KD&quot;</span>,<span class="number">2</span>))),</span><br><span class="line">  row.names = colnames(count_df)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># make obj</span></span><br><span class="line">set.obj &lt;- newSeqExpressionSet(counts = as.matrix(count_df), phenoData = sample_df)</span><br><span class="line">set.obj</span><br><span class="line"></span><br><span class="line">plotPCA(set.obj)</span><br><span class="line">plotRLE(set.obj,ylim=<span class="built_in">c</span>(-<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># normalize by housekeeping gene</span></span><br><span class="line">set.norm.obj &lt;- RUVg(set.obj, hsk_gene_id.list.select, k=<span class="number">2</span>)</span><br><span class="line">plotPCA(set.norm.obj)</span><br><span class="line">plotRLE(set.norm.obj,ylim=<span class="built_in">c</span>(-<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># check normal count</span></span><br><span class="line">count_df.norm_hsk &lt;- normCounts(set.norm.obj)</span><br><span class="line">head(count_df.norm_hsk)</span><br><span class="line"></span><br><span class="line"><span class="comment"># check normalize colSums count</span></span><br><span class="line">colSums(count_df)</span><br><span class="line">colSums(count_df.norm_hsk)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="find-DEGs-with-edgeR"><a href="#find-DEGs-with-edgeR" class="headerlink" title="find DEGs with edgeR"></a>find DEGs with edgeR</h1><p>差异表达分析步骤：  </p>
<ol>
<li>normalization  </li>
<li>estimate dispersion  </li>
<li>fit and find DEGs  </li>
</ol>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># condition table</span></span><br><span class="line">group_info = <span class="built_in">c</span>(<span class="built_in">rep</span>(<span class="string">&quot;ctrl&quot;</span>,<span class="number">2</span>), <span class="built_in">rep</span>(<span class="string">&quot;KD&quot;</span>,<span class="number">2</span>))</span><br><span class="line">design.mat &lt;- model.matrix(~group_info)</span><br><span class="line"></span><br><span class="line"><span class="comment"># build obj</span></span><br><span class="line">dge.list.obj &lt;- DGEList(counts = normCounts(set.norm.obj), group = group_info)</span><br><span class="line">dge.list.obj</span><br><span class="line"></span><br><span class="line">dge.list.obj &lt;- calcNormFactors(dge.list.obj,method = <span class="string">&quot;upperquartile&quot;</span>)</span><br><span class="line">dge.list.obj$samples</span><br><span class="line"></span><br><span class="line"><span class="comment"># Norm -&gt; estimate dispersion -&gt; find DEGs</span></span><br><span class="line">dge.list.obj &lt;- estimateDisp(dge.list.obj,design.mat)</span><br><span class="line">dge.list.obj$common.dispersion</span><br><span class="line">head(dge.list.obj$tagwise.dispersion)</span><br><span class="line"></span><br><span class="line"><span class="comment"># find DEGs</span></span><br><span class="line">fit &lt;- glmFit(dge.list.obj, design.mat)</span><br><span class="line">lrt &lt;- glmLRT(fit, coef=<span class="number">2</span>)</span><br><span class="line">DEGs.res.lrt &lt;- as.data.frame(topTags(lrt,n=nrow(count_df.norm_hsk),sort.by = <span class="string">&quot;logFC&quot;</span>))</span><br><span class="line">head(DEGs.res.lrt)</span><br></pre></td></tr></table></figure>
<p>可以发现，FDR基本上都等于1<br>原因：用的管家基因太多了<br>解决：找变化最小的100，200个来做  </p>
]]></content>
      <categories>
        <category>RNA-seq</category>
      </categories>
      <tags>
        <tag>RNA-seq</tag>
      </tags>
  </entry>
  <entry>
    <title>Stat-01-MDS</title>
    <url>/2021/02/22/Stat-01-MDS/</url>
    <content><![CDATA[<p><strong>MDS(Multi-dimetional Scaling, 多维标度法)</strong></p>
<ul>
<li><p>核心目的:<br>对于距离矩阵D,在低维空间中寻找一个矩阵Z，使得Z构成的欧式距离矩阵B尽可能和原来矩阵D保持一致。此种多维标度法也被称为主坐标分析。（把所有的距离矩阵，找一个低维的欧氏距离去接近）</p>
</li>
<li><p>具体推导详见goodnote笔记</p>
</li>
<li><p>R语言通过MDS对GTEx数据进行降维</p>
</li>
<li><p>当dist矩阵本身为欧氏距离时，MDS == PCA<br>MDS更强调对不同种类的dist转换<br>PCA强调用线性组合表示variable</p>
</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#########################</span></span><br><span class="line"><span class="comment"># Data 2021-02-22</span></span><br><span class="line"><span class="comment"># Author zhangyl</span></span><br><span class="line"><span class="comment"># MDS</span></span><br><span class="line"><span class="comment">#########################</span></span><br><span class="line"></span><br><span class="line">rm(<span class="built_in">list</span> = ls())</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="comment"># MDS</span></span><br><span class="line"><span class="comment"># -----------------------------------&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line">load(<span class="string">&quot;./data/GTEx.RData&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tissue的注释文件</span></span><br><span class="line">accession.df = read.csv(file=<span class="string">&quot;./data/GTEx_accession_table.csv&quot;</span>)</span><br><span class="line">annotation.df = read.csv(file=<span class="string">&quot;./data/GTEx_v7_Annotations_SampleAttributesDS.txt&quot;</span>,header = <span class="built_in">T</span>,sep = <span class="string">&quot;\t&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># make matrix </span></span><br><span class="line">GTEx.TPM.gene.mat.only_TPM = log2(GTEx.TPM.gene.mat[,<span class="built_in">c</span>(-<span class="number">1</span>,-<span class="number">2</span>)]+<span class="number">1</span>)</span><br><span class="line">rownames(GTEx.TPM.gene.mat.only_TPM) = <span class="built_in">as.character</span>(GTEx.TPM.gene.mat$Name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get tissue info </span></span><br><span class="line">tissue_info = <span class="built_in">as.character</span>(annotation.df$SMTS[match(accession_id_vec,annotation.df$SAMPID)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># run MDS</span></span><br><span class="line">dist.mat = dist(t(GTEx.TPM.gene.mat.only_TPM), method = <span class="string">&quot;minkowski&quot;</span>, p=<span class="number">5</span>)</span><br><span class="line">dist.mat = <span class="built_in">sqrt</span>(<span class="number">2</span>*(<span class="number">1</span> - <span class="built_in">abs</span>(cor(GTEx.TPM.gene.mat.only_TPM,method = <span class="string">&quot;kendall&quot;</span>))))</span><br><span class="line"></span><br><span class="line">MDS_res = cmdscale(dist.mat,eig=<span class="literal">TRUE</span>, k=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">MDS_xy.df = data.frame(MDS_1 = MDS_res$points[,<span class="number">1</span>],</span><br><span class="line">                       MDS_2 = MDS_res$points[,<span class="number">2</span>],</span><br><span class="line">                       tissue = factor(tissue_info))</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot with ggplot2</span></span><br><span class="line">library(ggplot2)</span><br><span class="line"></span><br><span class="line">ggplot(data = MDS_xy.df, aes(MDS_1,MDS_2,color=tissue)) + </span><br><span class="line">  geom_point()  + </span><br><span class="line">  geom_text(aes(label=tissue)) + </span><br><span class="line">  theme_bw()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>STAT</category>
      </categories>
      <tags>
        <tag>Stat</tag>
      </tags>
  </entry>
  <entry>
    <title>Stat-02-tSNE</title>
    <url>/2021/02/23/Stat-02-tSNE/</url>
    <content><![CDATA[<h1 id="线性降维与非线性降维"><a href="#线性降维与非线性降维" class="headerlink" title="线性降维与非线性降维"></a><strong>线性降维与非线性降维</strong></h1><ul>
<li>线性降维(Linear dimensionality reduction)<ul>
<li>主成分分析(PCA)</li>
<li>多维坐标变换(MDS)</li>
<li>聚类分析(Clustering)</li>
</ul>
</li>
<li>非线性降维(Nonlinear dimensionality reduction)<ul>
<li>lsomap (等度量映射)</li>
<li>LLE (局部线性嵌入)</li>
<li>t-SNE (t分布-随机近邻嵌入)</li>
</ul>
</li>
</ul>
<p>非线性降维属于流形学习的一部分（流形是局部具有欧几里得空间性质的空间，流形学习是指把高位空间整到低维去，使得欧氏距离重新生效，MDS是保留原有距离特征）</p>
<hr>
<h1 id="t-SNE的直观理解"><a href="#t-SNE的直观理解" class="headerlink" title="t-SNE的直观理解"></a>t-SNE的直观理解</h1><p><a href="https://www.seas.harvard.edu/courses/cs281/papers/tsne.pdf">Visualizing data using t-SNE, Laurens van der Maaten and Geoffrey Hintton, Journel of machine learning research, 2008.</a></p>
<ol>
<li>随机选择起始点;</li>
<li>计算高维空间这些样本点的概率分布F1;</li>
<li>计算低维空间这些样本点的概率分布F2;</li>
<li>迭代:如果能够使F1与F2概率分布尽可能的接近则降维成功</li>
</ol>
<hr>
<h1 id="信息熵与KL散度"><a href="#信息熵与KL散度" class="headerlink" title="信息熵与KL散度"></a>信息熵与KL散度</h1><h2 id="信息熵"><a href="#信息熵" class="headerlink" title="信息熵"></a>信息熵</h2><p>衡量不确定性的大小，信息熵越大，携带的不确定性越多</p>
<h2 id="KL散度-Kullback-Leibler-Divergence"><a href="#KL散度-Kullback-Leibler-Divergence" class="headerlink" title="KL散度(Kullback-Leibler Divergence)"></a>KL散度(Kullback-Leibler Divergence)</h2><p>也叫相对熵，利用KL散度来衡量两个分布是否相似</p>
<p>e.g. 正常样本与癌症样本 D(KL)计算dist——&gt; MDS可视化 D(KL)&gt;0.5发生变化</p>
<hr>
<h1 id="SNE的数学过程"><a href="#SNE的数学过程" class="headerlink" title="SNE的数学过程"></a>SNE的数学过程</h1><ol>
<li>先通过欧氏距离表示点的概率分布，分低维和高维情况；</li>
<li>目标是希望高维和低维之间的分布尽可能相同；</li>
<li>初始化时需要设置参数<strong>困惑度</strong>(perplrxity),SNE会通过二分搜索的方法计算最佳的初始化方差，一般困惑度选择5~50；</li>
<li>对目标函数进行迭代优化，可以增加扰动，防止局部最优；</li>
</ol>
<hr>
<h1 id="t-SNE相对于SNE的提升"><a href="#t-SNE相对于SNE的提升" class="headerlink" title="t-SNE相对于SNE的提升"></a>t-SNE相对于SNE的提升</h1><ol>
<li>t-SNE解决了概率不对成的问题，高位情况下Pij为对称；</li>
<li>t-SNE使用t分布作为降维后的概率分布（SNE用的是正态分布）</li>
</ol>
<hr>
<h1 id="t-SNE的优缺点"><a href="#t-SNE的优缺点" class="headerlink" title="t-SNE的优缺点"></a>t-SNE的优缺点</h1><ul>
<li>优点:<ul>
<li>非常优秀的降维可视化方法，对各种数据集的表现都非常好!</li>
</ul>
</li>
<li>缺点:<ul>
<li>基本只用于可视化;</li>
<li>t-SNE倾向保留局部特征，有的时候会“只见树木不见森林”（可以先做pca）;</li>
<li>t-SNE结果中的距离没有太大意义，因为都是计算的概率;</li>
<li>t-SNE训练速度比较慢</li>
</ul>
</li>
<li>特点:<ul>
<li>受初值影响（调试时需要set.seed）</li>
</ul>
</li>
</ul>
<hr>
<h1 id="R语言计算t-SNE"><a href="#R语言计算t-SNE" class="headerlink" title="R语言计算t-SNE"></a>R语言计算t-SNE</h1><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#########################</span></span><br><span class="line"><span class="comment"># Data 2021-02-27</span></span><br><span class="line"><span class="comment"># Author zhangyl</span></span><br><span class="line"><span class="comment"># t-SNE</span></span><br><span class="line"><span class="comment">#########################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># load package </span></span><br><span class="line">library(Rtsne)</span><br><span class="line"></span><br><span class="line">SD.vector &lt;- apply(GTEx.TPM.gene.mat[,<span class="built_in">c</span>(-<span class="number">1</span>,-<span class="number">2</span>)],<span class="number">1</span>,FUN=<span class="keyword">function</span>(x)&#123;sd(x)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># select top3000</span></span><br><span class="line">GTEx.TPM.gene.mat.log2 &lt;- log2(GTEx.TPM.gene.mat[,<span class="built_in">c</span>(-<span class="number">1</span>,-<span class="number">2</span>)]+<span class="number">1</span>)</span><br><span class="line">GTEx.TPM.gene.mat.log2.top3000 &lt;- GTEx.TPM.gene.mat.log2[order(SD.vector,decreasing = <span class="built_in">F</span>),]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rtsne()</span></span><br><span class="line"><span class="comment"># matrix 行是基因，列是variables</span></span><br><span class="line"><span class="comment"># perplexity 5~50</span></span><br><span class="line"></span><br><span class="line">set.seed(<span class="number">20210227</span>)</span><br><span class="line">tSNE_res &lt;- Rtsne(t(GTEx.TPM.gene.mat.log2.top3000),dims = <span class="number">3</span>,perplexity = <span class="number">10</span>,pca = <span class="built_in">T</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot region </span></span><br><span class="line">tSNE_res.df &lt;- as.data.frame(tSNE_res$Y)</span><br><span class="line">colnames(tSNE_res.df) &lt;- <span class="built_in">c</span>(<span class="string">&quot;tSNE1&quot;</span>,<span class="string">&quot;tSNE2&quot;</span>,<span class="string">&quot;tSNE3&quot;</span>)</span><br><span class="line">tSNE_res.df$tissue &lt;- tissue_info</span><br><span class="line"></span><br><span class="line">ggplot(data = tSNE_res.df, aes(tSNE1,tSNE2,color=tissue)) + </span><br><span class="line">  geom_point()  + </span><br><span class="line">  geom_text(aes(label=tissue)) + </span><br><span class="line">  theme_bw()</span><br><span class="line"></span><br><span class="line">ggplot(data = tSNE_res.df, aes(tSNE1,tSNE3,color=tissue)) + </span><br><span class="line">  geom_point()  + </span><br><span class="line">  geom_text(aes(label=tissue)) + </span><br><span class="line">  theme_bw()</span><br><span class="line"></span><br><span class="line">ggplot(data = tSNE_res.df, aes(tSNE2,tSNE3,color=tissue)) + </span><br><span class="line">  geom_point()  + </span><br><span class="line">  geom_text(aes(label=tissue)) + </span><br><span class="line">  theme_bw()</span><br><span class="line"></span><br><span class="line"><span class="comment"># use plotly (3D)</span></span><br><span class="line">library(plotly)</span><br><span class="line"></span><br><span class="line">p &lt;- plot_ly(tSNE_res.df, x = ~tSNE1, y = ~tSNE2, z = ~tSNE3, color = ~tissue) %&gt;%</span><br><span class="line">  add_markers() %&gt;%</span><br><span class="line">  layout(scene = <span class="built_in">list</span>(xaxis = <span class="built_in">list</span>(title = <span class="string">&#x27;tSNE1&#x27;</span>),</span><br><span class="line">                      yaxis = <span class="built_in">list</span>(title = <span class="string">&#x27;tSNE2&#x27;</span>),</span><br><span class="line">                      zaxis = <span class="built_in">list</span>(title = <span class="string">&#x27;tSNE3&#x27;</span>)))</span><br><span class="line">p</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>STAT</category>
      </categories>
      <tags>
        <tag>Stat</tag>
      </tags>
  </entry>
  <entry>
    <title>Stat-03-Non-Negative Matrix Factorization</title>
    <url>/2021/04/13/Stat-03-Non-Negative-Matrix-Factorization/</url>
    <content><![CDATA[<p><strong>Non-negative matrix factorization</strong><br>非负矩阵分解(Non-negative matrix factorization, NMF)是在矩阵中所有元素均为非负数约束条件下的矩阵分解方法。</p>
<ul>
<li>基本思想：给定一个非负矩阵V，NMF能找到一个非负矩阵W和一个非负矩阵H，使得矩阵W和H的乘积近似等于矩阵V中的值</li>
</ul>
<center><img src="/img/Stat/NMF.png" alt="NMF" style="zoom:90%;" /></center>

<ul>
<li>W矩阵：基础图象矩阵（基矩阵，特征矩阵），相当于从原矩阵V中抽取出来的特征</li>
<li>H矩阵：系数矩阵</li>
<li>≈：目前暂时无法做到完全相等</li>
<li>因为是约等于，存在损失函数E（V = WH+E，最优化E = min|V-WH|)</li>
</ul>
<p>实质是一个优化问题，通过一定的优化方法来求解特征矩阵W和系数矩阵H<br><strong>加权和</strong><br>原理上等效为线性方程组</p>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="特征学习"><a href="#特征学习" class="headerlink" title="特征学习"></a>特征学习</h2><h2 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h2><p>比K-means算法更优之处为：NMF是一种软聚类（一个元素可被分为多种类型）</p>
]]></content>
      <categories>
        <category>STAT</category>
      </categories>
      <tags>
        <tag>Stat</tag>
      </tags>
  </entry>
  <entry>
    <title>TOEFL-Wordlist</title>
    <url>/2021/02/20/TOEFL-Wordlist/</url>
    <content><![CDATA[<p>210220</p>
<ol>
<li><p><strong>sentence</strong> n./vt. 判决，宣判<br>serve a sentence 服刑</p>
<ul>
<li>Tom will be sentenced to death/life imprisonment/three years in prison.</li>
</ul>
</li>
<li><p><strong>impact</strong> vi./vt.  影响(on, upon); 对。。。有影响；（天文）撞击</p>
</li>
<li><p><strong>complex</strong> == system n. 复合体；综合设施<br>a sports complex/building complex建筑群/to suffer from a guilt complex 内疚感</p>
<ul>
<li>This is just one of a whole complex of issue.</li>
</ul>
</li>
<li><p><strong>amount</strong> v. 总计，合计；等于，相当于；发展成，变成</p>
<ul>
<li>The bill amounts to $10.</li>
<li>They gave me some help in the beginning but it did not amount to much(== they did not give me much help)</li>
</ul>
</li>
<li><p><strong>outgassing</strong>  n.除气；脱气  adj. 除气的；释气的</p>
<ul>
<li>The origin of our present atmosphere is therefore a combination of terrestrial outgassing and interplanetary assault (further changed by later biological events). (20190810真题)</li>
<li>Little by little, the planet generated a new, secondary atmosphere by volcanic outgassing of volatile（挥发性的，不稳定的） materials from its interior. (2015年真题Earth’s Atmosphere)</li>
</ul>
</li>
<li><p>易混词</p>
<ul>
<li><p><strong>vary</strong></p>
<ul>
<li>variety: a variety ofbeedback mechanisms vs. a myriad of 大量的，无数的</li>
<li>various/varied</li>
<li>variable n.变量/invariable n.常量</li>
<li>invariable：不变地，一定地(== always/constantly/customarily/regularly)</li>
</ul>
</li>
<li><p><strong>effect</strong></p>
<ul>
<li>effect:  n.结果 v.造成  the oppposite effect</li>
<li>effective:  adj,有效性  vs. efficient有效率的/ineffective无效的</li>
<li>effectiveness:  n. 效力</li>
<li>affect:  vt.影响  affect my decision</li>
<li>affection:  n. 喜爱(for sb./sth.)</li>
</ul>
</li>
<li><p><strong>object</strong></p>
<ul>
<li>object:  n. 目标；物体；客体；宾语  v. 反对  Many local people object to the building of the new airport</li>
<li>objective:  n. 目的，目标  adj.客观的  an objective analysis</li>
<li>objection:  n. 异议  I have no objection to him coming to stay.</li>
<li>subject:  n. 主题；起因；科目；国民；主旋律  adj.易遭受…的  v.(使)臣服 </li>
<li>subjective:  adj. 主观的；个人的</li>
</ul>
</li>
<li><p><strong>economy</strong></p>
<ul>
<li>economy:  n.经济  The economy is in recession</li>
<li>economic:  adj.经济上的；合算的</li>
<li>economical:  adj.节俭的  an economical car to run/ He was economical in all areas of his life</li>
<li>economically:  adv.节俭的</li>
<li>econimics:  n.经济学</li>
</ul>
</li>
<li><p><strong>technique</strong></p>
<ul>
<li>technique:  n.技巧，技法  (==method/approach/means/craft)</li>
<li>technical:  adj.技术上的  offer technical support</li>
<li>technology(-ies):  n.技术；工艺  high technology/information technology</li>
<li>technological:  adj.技术的；工艺的  technological innovation  (== industrial/mechanical) </li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<p>210221</p>
]]></content>
      <categories>
        <category>TOEFL</category>
      </categories>
      <tags>
        <tag>TOEFL</tag>
      </tags>
  </entry>
  <entry>
    <title>TOEFL-writing-00</title>
    <url>/2021/02/19/TOEFL-writing-00/</url>
    <content><![CDATA[<h1 id="题型"><a href="#题型" class="headerlink" title="题型"></a>题型</h1><ol>
<li>综合写作 20 min 150-225字</li>
</ol>
<ul>
<li>阅读：3分钟 300词<br>话题关于什么，分论点是什么</li>
<li>听力：2分钟 330词<br>针对阅读短文进行他的论点阐述，理由最重要的点<br>记笔记很重要!!!!</li>
</ul>
<ol start="2">
<li>独立写作 30 min 400字左右</li>
</ol>
<ul>
<li><p>题型分类</p>
<ul>
<li><p>维度1：内容<br> <strong>利弊题：好不好</strong><br> People <strong>should</strong> relax with hobbies or physical activities that are different from what they do in Work.</p>
<p> 逻辑起点(A or B or C)——&gt;逻辑终点</p>
<p> <strong>现象题：现象存在还是不存在，古今对比题</strong><br> Agree or disagree? Students nowadays do not respect their teachers as much as they did in the past.</p>
</li>
<li><p>维度2：选项<br> <strong>二选一</strong><br> It is better to relax by watching a movie or reading a book than relax by doing physical exercise</p>
<p> <strong>三选一</strong><br> In times of an econimic crisis, in which area should governments reduce its spending? 1)Arts. 2)Scientific research. 3)Parks and public gardens </p>
<p> <strong>一个选项</strong><br> It is a waste of money for government to fund space travel. </p>
<p> The best way for the government to improve health care is cleaning the enivironment.</p>
</li>
</ul>
</li>
<li><p>练习</p>
<blockquote>
<p>例1：People should relax with hobbies or physical activities that are different from what they do in work</p>
</blockquote>
<p>  利弊题+二选一：<br>  different hobbies and physical activities ——&gt; good</p>
<blockquote>
<p>例2：Which one is the most important for teacher of high school:   1) The ability to help students plan for their future;    2) The ability to find the students who need help most and help them;    3) Teach students how to learn outside the classroom.</p>
</blockquote>
<p>  利弊题+三选一：<br>  learn outside classrooms  ——&gt; good</p>
<blockquote>
<p>例3：Agree or disagree? Students nowadays do not respect their teachers as much as they did in the past.</p>
</blockquote>
<p>  现象题：now respect teachers</p>
</li>
</ul>
<hr>
<h1 id="破题方法"><a href="#破题方法" class="headerlink" title="破题方法"></a>破题方法</h1><h2 id="利弊题"><a href="#利弊题" class="headerlink" title="利弊题"></a>利弊题</h2><p>论证<strong>逻辑起点</strong>对于<strong>逻辑终点</strong>的好处</p>
<blockquote>
<p>例1：Compared with people who live in <strong>cities</strong>, people who live in rural areas can <strong>take better care of families</strong>.<br>逻辑起点：住在城市<br>逻辑终点：住在城市能更好的照顾家人</p>
</blockquote>
<p>理由说两大论点：</p>
<ol>
<li>cities ——&gt; more money：<br>education,<br>medical care</li>
<li>cities ——&gt; infrastructure:<br>supermarkert,<br>transportation </li>
</ol>
<blockquote>
<p>例2：If your teacher says something incorrect in a class, what will you do? 1) Interrupt your teacher right away; 2) keep silent;  3) correct your teacher after class.</p>
</blockquote>
<p>after class ——&gt; good<br>理由说两大论点：</p>
<ol>
<li>after class ——&gt; relationship:<br>respect<br>communicate;</li>
<li>after class ——&gt; academic performance:<br>errors<br>knowledge</li>
</ol>
<blockquote>
<p>例3：The best way for the government to improve health care is cleaning the environmment.</p>
</blockquote>
<p>法一：<br>clean environ. ——&gt; health care<br>方面说把health care 下切:</p>
<ol>
<li>clean environ. ——&gt; physical health: 理由说<br>air quality<br>food quality</li>
<li>clean environ. ——&gt; mental health: 理由说<br>less pressure<br>happiness</li>
</ol>
<p>法二:<br>需要重点与clean envirn.对比，扣题</p>
<ol>
<li>health education ——&gt; health care：(方面说)<br>knowledge<br>exercise</li>
<li>medical care ——&gt; health care: (方面说)<br>hopistals<br>experts</li>
</ol>
<h2 id="现象题"><a href="#现象题" class="headerlink" title="现象题"></a>现象题</h2><p>写法1：现象产生的原因——why<br>写法2：现象的具体体现——切点</p>
<blockquote>
<p>例1：Nowadays, younger people spend more time on improving the world than in the past.</p>
</blockquote>
<p>法一：<br>现象产生的两大原因（理由说）：</p>
<ol>
<li>busy ——&gt; now less time improve world: 忙于什么方面(方面说)<br>study<br>work</li>
<li>incapable ——&gt; now less time improve world：没有能力的具体体现(方面说)<br>money<br>knowledge</li>
</ol>
<p>法二：<br>有更多的时间改善环境，投身于科技(方面说)</p>
<ol>
<li>now less time improve world ——&gt; environment：改善环境的具体体现（方面说）<br>air quality<br>water quality</li>
<li>now less time improve world ——&gt; technology：投身科技的集体体现（方面说）<br>majors<br>suggestion</li>
</ol>
<h2 id="天使题"><a href="#天使题" class="headerlink" title="天使题"></a>天使题</h2><p>题目本身包含了两个点<br>作为两个总论点或某一段的两个分论点</p>
<blockquote>
<p>例1：The <strong>personal and work-related challenges</strong> we face now are different from those our parents and grandparents faced when they were young.</p>
</blockquote>
<blockquote>
<p>例2：Children should <strong>play and study</strong> rather than learn how to do household chores.</p>
</blockquote>
<blockquote>
<p>例3：People should relax with <strong>hobbies or physical activities</strong> that are different from what they do in work.</p>
</blockquote>
<blockquote>
<p>例4：The opinions of celebrities, such as <strong>entertainers and athletes</strong>, are more impor tant to the younger people than they are to the older people.</p>
</blockquote>
<p>celebrities ——&gt; young people<br>把young people分为stu和young adults</p>
<ol>
<li>celebrities ——&gt; students<br>entertainer: fashion<br>athlete: persistence</li>
<li>celebrities ——&gt; young adults<br>entertainer: friendship<br>athlete: value exercise</li>
</ol>
<h2 id="魔鬼题"><a href="#魔鬼题" class="headerlink" title="魔鬼题"></a>魔鬼题</h2><p>题目包含从句，破题时所有思路都落在逻辑终点上</p>
<blockquote>
<p>例1：Do you agree or disagree with the following statement? To <strong>truly enjoy a vacation (holiday)</strong>, people should leave their mobile phones at home.</p>
</blockquote>
<blockquote>
<p>例2：<strong>In order to attract good students</strong>, many universities spend a lot of money in society activities.</p>
</blockquote>
<blockquote>
<p>例3：To <strong>improve health</strong>, which aspect will you change in life? 1) kinds of food to eat 2 ) the amount of exercise 3 ) the amount of stress (15.12.20) </p>
</blockquote>
<p>more exercise ——&gt; health（全部指向health,方面说）</p>
<ol>
<li>more exercise ——&gt; physical health:<br>muscle<br>eyestrain</li>
<li>more exercise ——&gt; mental health<br>less worries<br>happiness</li>
</ol>
<hr>
<h1 id="题型写法"><a href="#题型写法" class="headerlink" title="题型写法"></a>题型写法</h1><p>核心原则：让题目的key words均匀分散在文章中，特别是自己的观点，要不断出现</p>
<h2 id="key-word选取-反面对比"><a href="#key-word选取-反面对比" class="headerlink" title="key word选取+反面对比"></a>key word选取+反面对比</h2><p>删除法：删除后对句子影响很大</p>
<ol>
<li><p>A or B<br>Compared with people who live in <strong>cities</strong>, people who live in <strong>rural areas</strong> can <strong>take better care of families.</strong><br>认为A重要，对比B</p>
</li>
<li><p>A orB or C<br>If your teacher says something <strong>incorrect</strong> in a class, what will you do?  1.) <strong>Interrupt</strong> your teacher <strong>right away</strong>;  2.) keep <strong>silent</strong>;  3.) correct your <strong>teacher after class</strong>.<br>相反，interrupt/silent…</p>
</li>
<li><p>A<br>The best way for the <strong>government</strong> to improve <strong>health care</strong> is <strong>cleaning the environment.</strong><br>如果不改善环境…</p>
</li>
</ol>
<h2 id="现象题-1"><a href="#现象题-1" class="headerlink" title="现象题"></a>现象题</h2><ol>
<li>自己观点</li>
</ol>
<p><strong>Contrary to these people’s opinions is my perspective that …. due to ..</strong> (e.g. due to the contributions to果/ due to因/ including小)</p>
<ul>
<li><p>现象产生的原因:<br>  <strong>Contrary to these people’s opinions is my perspective that …</strong>, due to因<br>  eg. due to less time and capability</p>
</li>
<li><p>现象的具体体现:<br>  <strong>Contrary to these people’s opinions is my perspective that …</strong>, including小<br>  eg. including the field of environment and technology</p>
</li>
</ul>
<ol start="2">
<li>观点总结<br> <strong>To conclude, only by considering those mentioned above can we draw the conclusio that…</strong></li>
</ol>
]]></content>
      <categories>
        <category>TOEFL-Writing</category>
      </categories>
      <tags>
        <tag>TOEFL</tag>
      </tags>
  </entry>
  <entry>
    <title>TOEFL-writing-01</title>
    <url>/2021/02/18/TOEFL-writing-01/</url>
    <content><![CDATA[<h1 id="全文结构"><a href="#全文结构" class="headerlink" title="全文结构"></a>全文结构</h1><p> 开头段&lt;60&gt;<br>     总论点1&lt;160&gt;（分论点1+分论点2）<br>     总论点2&lt;160&gt;（分论点1+分论点2）<br> 结尾段&lt;60&gt;</p>
<blockquote>
<p>例1：Some students enjoy taking distance learning courses on the computer or television. Other students would rather take all of their courses with a teacher in classroom. Which is these options do you think is better?</p>
</blockquote>
<p>破题：</p>
<ol>
<li>why：理由说（在线教育为什么好）</li>
<li>切逻辑终点(good)：方面说（好在什么方面）</li>
<li>切逻辑起点(distance learning)：方面说（有哪些种在线教育）</li>
</ol>
<p>观点：在线教育好</p>
<ul>
<li>对学生学习好<ul>
<li>能获得很多的知识</li>
<li>能激发学生学习兴趣</li>
</ul>
</li>
<li>对学生个人发展好<ul>
<li>培养人际交往能力</li>
<li>培养坚持不懈</li>
</ul>
</li>
</ul>
<hr>
<h1 id="开头段"><a href="#开头段" class="headerlink" title="开头段"></a>开头段</h1><h2 id="现象引入"><a href="#现象引入" class="headerlink" title="现象引入"></a>现象引入</h2><p>N，同位语，has been valued and even triggers a heated discussion over…题目改写：</p>
<ul>
<li><p>N：</p>
<ul>
<li>话题词汇（在线教育）</li>
<li>从题目中选择的中性词汇（教育、上课方式等）</li>
</ul>
</li>
<li><p>同位语</p>
<ul>
<li>N为中性词：the fundation of a quality life</li>
<li>N为褒义词：the objective everyone strives for</li>
</ul>
</li>
<li><p>over(whether/what引导的)名词性从句</p>
</li>
</ul>
<blockquote>
<p>Education, the foundation of a quality life, <strong>has been valued and even triggers a heated discussion over</strong> whether students should take courses online or in classrooms. (现象引入)</p>
</blockquote>
<h2 id="对方观点"><a href="#对方观点" class="headerlink" title="对方观点"></a>对方观点</h2><p>主语， in some people’s view,…<br>仅需阐明现象，不用加理由</p>
<blockquote>
<p>Learning in traditional classrooms, <strong>in some people’s views</strong>, continues to be an effective way.</p>
</blockquote>
<h2 id="自己观点"><a href="#自己观点" class="headerlink" title="自己观点"></a>自己观点</h2><p>Contrary to these people’s opinions is my perspective that …, due to … (e.g. due to the contributions to果/ due to因/ including小)</p>
<blockquote>
<p><strong>Contrary to these people’s opinions is my perspective that</strong> online learning, which requires students to attend classes on computers or televisions, is superior, <strong>due to the contributions to</strong> their academic performance <strong>and</strong> personal development. (自己观点)</p>
</blockquote>
<hr>
<h1 id="中间段"><a href="#中间段" class="headerlink" title="中间段"></a>中间段</h1><h2 id="总论点1"><a href="#总论点1" class="headerlink" title="总论点1"></a>总论点1</h2><p>看图说话：在线教育对学生学习好<br>加对比和分论点</p>
<blockquote>
<p><strong>What must be prioritized is that</strong> taking distance-learning courses, instead of having courses in traditional classrooms, is beneficial to students’ academic learning, by offering them more knowledge and triggering their enthusiasm in learning. (总论点)</p>
</blockquote>
<h3 id="分论点1"><a href="#分论点1" class="headerlink" title="分论点1"></a>分论点1</h3><p>短句</p>
<blockquote>
<p>**To begin with,**it is online education that provides students with the access to a large quantity of expertises. </p>
</blockquote>
<h3 id="解释1"><a href="#解释1" class="headerlink" title="解释1"></a>解释1</h3><p>长句<br>diatance learning ——&gt; knowledge<br>理由说：有search engine<br>方面说：学生能获得什么知识</p>
<p>针对正面的论证写反面</p>
<blockquote>
<p><strong>To begin with,</strong> it is online education that provides students with the access to a large quantity of expertise. (分论点1) <strong>In detail,</strong> on the Internet, students can acquire a wide range of knowledge in history, art and science, enlarging their knowledge base; <strong>in contrast,</strong> such a large amount of knowledge cannot be obtained when they are instructed by only one teacher in concrete classrooms. (解释1+反面对比)</p>
</blockquote>
<h3 id="分论点2"><a href="#分论点2" class="headerlink" title="分论点2"></a>分论点2</h3><p>短句</p>
<blockquote>
<p><strong>Moreover,</strong> never can we ignore the significance of distance ducation to students’ interest in learning. (分论点2 ) </p>
</blockquote>
<h3 id="解释2"><a href="#解释2" class="headerlink" title="解释2"></a>解释2</h3><p>长句<br>diatance learning ——&gt; interests<br>对于学习哪些方面有兴趣</p>
<blockquote>
<p><strong>To explain it further,</strong> by receiving education on the Internet, students will find it more interesting to deal with mathematical problems, do research, and write proposals; <strong>on the other hand,</strong> will they be passionate about these tasks when teachers always lecture in brick-and-mortar classrooms? ( 解释2 )</p>
</blockquote>
<h2 id="总论点2"><a href="#总论点2" class="headerlink" title="总论点2"></a>总论点2</h2><p>personal deve.</p>
<blockquote>
<p><strong>What should be equally worth discussing is that</strong> receiving distance education, rather than having traditional face-to-face courses, can promote students’ personal development, by honing their interpersonal skills and cultivating their persistence. ( 总论点)</p>
</blockquote>
<h3 id="分论点1-1"><a href="#分论点1-1" class="headerlink" title="分论点1"></a>分论点1</h3><blockquote>
<p><strong>To begin with,</strong> it is well-acknowledged taht educated on the Internet, students can practice their communication skills.</p>
</blockquote>
<h3 id="解释1-1"><a href="#解释1-1" class="headerlink" title="解释1"></a>解释1</h3><p>distance ——&gt; interpersonal<br>为什么能够培养社交能力</p>
<blockquote>
<p><strong>Specifically,</strong> only in online learning environments will students come across peop;e from diverse backgrounds, such as classmates, instructors and school administrators, with whom they can practice their tactics of socializing; <strong>on the contrary</strong>, under no circumstances will they interact with such a variety of people if they are educated in traditional classroom settings.</p>
</blockquote>
<h3 id="分论点2-1"><a href="#分论点2-1" class="headerlink" title="分论点2"></a>分论点2</h3><p>distance learning ——&gt; persistence<br>理由说：为什么会变的persistence</p>
<blockquote>
<p><strong>Additionally</strong>, when having a distance education program,students will become more determined. ( 分论点2 ) </p>
</blockquote>
<h3 id="解释2-1"><a href="#解释2-1" class="headerlink" title="解释2"></a>解释2</h3><p><strong>To be more specific</strong>, the more distance-learning courses they take on the Internet, the more distractions they will be exposed to, stimulating them to resist temptations and foster their persistence; however, it is impossible for them to encounter these lures in traditional classrooms.</p>
<h1 id="结尾段"><a href="#结尾段" class="headerlink" title="结尾段"></a>结尾段</h1><blockquote>
<p>Academic performance, <strong>the foundation of students’ future development</strong>, will be boosted when they receive online education. (总结总论点1) Personal development, <strong>essential contributors to students’ future success</strong>, will be<br>facilitated, if they are educated on the Internet. (总结总论<br>点2) <strong>To conclude, only by</strong> having distance education,<br><strong>instead of</strong> being taught in classrooms, <strong>can</strong> students reap numerous benefits. (总结全文)</p>
</blockquote>
<h1 id="模板总结"><a href="#模板总结" class="headerlink" title="模板总结"></a>模板总结</h1><h2 id="开头段-1"><a href="#开头段-1" class="headerlink" title="开头段"></a>开头段</h2><ol>
<li>…, 同位语, has been valued and even triggers a heated discussion over …</li>
<li>…, in some/many people’s view,…</li>
<li>Contrary to these people’s opinions is my perspective that …, due to the contributions to … and …<h2 id="中间段-1"><a href="#中间段-1" class="headerlink" title="中间段"></a>中间段</h2></li>
<li>What must be prioritized is that … /What is equally worth discussion is that…</li>
<li>Initially/ Firstly /To begin with,</li>
<li>To be more specific, /Specifically, / In detail, /To explain it further… + however, /in contrast, /on the contrary,/on the other hand,<h2 id="结尾段-1"><a href="#结尾段-1" class="headerlink" title="结尾段"></a>结尾段</h2></li>
<li>第一个理由，同位语，will…</li>
<li>第二个理由，同位语，will…</li>
<li>In conclusion, only + 状语 + 半倒装</li>
</ol>
]]></content>
      <categories>
        <category>TOEFL-Writing</category>
      </categories>
      <tags>
        <tag>TOEFL</tag>
      </tags>
  </entry>
  <entry>
    <title>TOEFL-writing-02</title>
    <url>/2021/02/20/TOEFL-writing-02/</url>
    <content><![CDATA[<h1 id="笔记概述"><a href="#笔记概述" class="headerlink" title="笔记概述"></a>笔记概述</h1><ol>
<li>专有名词<br> 固定说法，很难找到同义词的名词（eg. 电脑、台灯…）</li>
<li>意思（逻辑）<br>转折逻辑: however, but, although<br>并列逻辑: and, also, moreover, in addition<br>总分逻辑: such as, for example, one of which<br>因果逻辑: because, so, thus, therefore<br>顺序逻辑: first, and then, when, after</li>
</ol>
<hr>
<h1 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h1><p>topic sentence关键词：支持topic sentence的专有名词</p>
<h2 id="开头段："><a href="#开头段：" class="headerlink" title="开头段："></a>开头段：</h2><p>主题词，（3个）xxx（reason,goal…）</p>
<h2 id="中间段："><a href="#中间段：" class="headerlink" title="中间段："></a>中间段：</h2><p>如果有小标题，小标题就是TS<br>细节只记录支持TS的名词</p>
<hr>
<h1 id="听力笔记"><a href="#听力笔记" class="headerlink" title="听力笔记"></a>听力笔记</h1><p><strong>脑记意思</strong><br>（主）对比专名<br>（次）逻辑符号<br>竖着写，每行一个词</p>
<h2 id="开头段"><a href="#开头段" class="headerlink" title="开头段"></a>开头段</h2><p>记录男女<br>关注主旨句</p>
<h2 id="中间段"><a href="#中间段" class="headerlink" title="中间段"></a>中间段</h2><p>听，脑记意思，听听力是如何<strong>反驳阅读内容</strong><br>笔,仅记录<strong>反驳阅读的专有名词</strong>，即对比专名，和<strong>明显简单的逻辑</strong>，一定要筛选信息<br>适当<strong>缩写</strong>，不要试图把单词都能拼写完整</p>
<hr>
<h1 id="补笔记"><a href="#补笔记" class="headerlink" title="补笔记"></a>补笔记</h1><p>按照第三段、第一段、第二段的顺序串意思、单词记全</p>
]]></content>
      <categories>
        <category>TOEFL-Writing</category>
      </categories>
      <tags>
        <tag>TOEFL</tag>
      </tags>
  </entry>
  <entry>
    <title>TOEFL-writing-03</title>
    <url>/2021/02/20/TOEFL-writing-03/</url>
    <content><![CDATA[<h1 id="并列连词"><a href="#并列连词" class="headerlink" title="并列连词"></a>并列连词</h1><p>前后语法一致</p>
<ul>
<li>and, but, or, So</li>
<li>not…but…<br> not only…but also…<br> both…and…<br> neither…nor…<br> either…or…<br> …rather than…<br> as well as</li>
</ul>
<h1 id="副词和介词短语（状语）"><a href="#副词和介词短语（状语）" class="headerlink" title="副词和介词短语（状语）"></a>副词和介词短语（状语）</h1><p>不能并列两个相同的短语</p>
<ul>
<li>因为: because of / due to / owing to / thanks to / on account of / as a result of / as a consequence of</li>
<li>所以: <strong>thus, therefore, as a consequence, as a result</strong></li>
<li>转折: however, nevertheless, conversely, in contrast, on the contrary, on the other hand</li>
<li>让步: admittedly, despite / in spite of</li>
<li>递进: <strong>even</strong></li>
<li>无论: regardless of /disregarding</li>
<li>目的是: to/ in order to/ so as to/ for the sake of/ for the purpose of</li>
<li>通过做: via / by / through</li>
<li>没有做: without</li>
</ul>
<h1 id="特殊的平行结构：比较结构"><a href="#特殊的平行结构：比较结构" class="headerlink" title="特殊的平行结构：比较结构"></a>特殊的平行结构：比较结构</h1><p>A和B需要对等<br>A is more … than B<br>A, compared with B,…<br>A, unlike B, …<br>A, like B, …<br>A, in contrast to B,…</p>
<h1 id="插入语"><a href="#插入语" class="headerlink" title="插入语"></a>插入语</h1><h2 id="三大从句"><a href="#三大从句" class="headerlink" title="三大从句"></a>三大从句</h2><p>定语从句: She is a girl, <em>who is happy</em>.<br>状语从句: <em>When the sun rises</em>, she goes to school.<br>名词性从句：<br>    主语从句: <em>What I like</em> are apples.<br>    宾语从句: I think <em>that it is great</em>.<br>    表语从句: His suggestion is <em>that we should stay here</em>.<br>    同位语从句: I heard the news <em>that our team had won</em>.</p>
<h2 id="形式主语-形式宾语"><a href="#形式主语-形式宾语" class="headerlink" title="形式主语/形式宾语"></a>形式主语/形式宾语</h2><ul>
<li>形式主语：<br>  X + is + n/adj.<br>  -&gt; It is + n/adj + X.  <strong>e.g.</strong> That students are afraid of exams is well-acknowledged.<br>  -&gt; It is well-acknowledged that students are afraid of exams.</li>
</ul>
<ul>
<li><p>形式宾语<br>  make, find ,think,feel.consider,believe + Y + adj/n<br>  -&gt; make, find ,think, feel,consider, believe + it + adj/n+ Y</p>
<p>  <strong>e.g.</strong> I think that we do exercise necessary.<br>  -&gt; I think it necessary that we do exercise.</p>
</li>
</ul>
<h2 id="特殊用法：介宾结构"><a href="#特殊用法：介宾结构" class="headerlink" title="特殊用法：介宾结构"></a>特殊用法：介宾结构</h2><p>Employees need to find meaning <em>in what they do</em>.<br>Humorous friends can communicate with people <em>about how they reduce pressure</em>.</p>
<h1 id="变化主语"><a href="#变化主语" class="headerlink" title="变化主语"></a>变化主语</h1><ol>
<li><p>避免总是用people<br> 非“人”名词、doing、it形式主语</p>
<blockquote>
<p>Researchers will benifit from receiving new ideas.改写：<br>  <strong>The adoption of new ideas</strong> will benifit researchers.<br>  <strong>Adopting new ideas</strong> will benifits researchers.<br>  <strong>It</strong> is beneficial for researchers to receive new ideas.</p>
</blockquote>
</li>
<li><p>给主语戴帽子<br> 状语从句、非谓语、介词短语</p>
<blockquote>
<p>Researchers will benifit from receiving new ideas.改写：<br>  <strong>After adopting new ideas</strong>, researfchers will benifit.<br>  <strong>Adopting new ideas,</strong> researchers will benefit.<br>  <strong>By adopting new ideas,/With new ideas adopted.</strong> researchers will benifit.</p>
</blockquote>
<blockquote>
<p>Employees are encouraged by their supervisor’s open-mindedness and will work diligently.改写：<br>  <strong>The supervisor’s open-mindedness</strong> encourages employees to work diligently.<br>  <strong>Being open-minded</strong> makes it possible for the supervisor t0 encourage employees to work diligently.<br>  <strong>It</strong> is encouraging for employees to see their supervisor ‘s open-mindedness, who thus will work diligently.<br>  <strong>When encouraged by their supervisor’s open-mindedness,</strong> employees will work diligently.<br>  <strong>Encouraged by their supervisor’s open-mindedness,</strong> employees will work diligently.<br>  <strong>By being encouraged by their supervisor’s open-mindedness</strong>, employees will work diligently.</p>
</blockquote>
</li>
</ol>
<h1 id="特殊句式"><a href="#特殊句式" class="headerlink" title="特殊句式"></a>特殊句式</h1><p><strong>强（强调）倒（倒装）更多（The more），而且(Not only but also)反问（反问句）</strong><br>|位置        | 句式                                                                  |<br>|:———-:|:——————————————————————–:|<br>| 2个总论点   | What                                                                 |<br>| 4个分论点   | it is … that/never…/only by doing/the more/<strong>not only but also</strong> |<br>| 4个正面展开 | it is … that/never…/only by doing/the more                       |<br>| 4个反面对比 |  it is … that/never…/only by doing/the more/<strong>how…?</strong>          |</p>
<h2 id="强调句-It-is-…-that-…"><a href="#强调句-It-is-…-that-…" class="headerlink" title="强调句 It is … that …"></a>强调句 It is … that …</h2><p>It is new friends that can bring different thoughts and new perspectives.<br>It is different thoughts and new perspectives that new friends can bring.<br>It is in the family of native speakers that people can learn a language more effectively.</p>
<h2 id="倒装句"><a href="#倒装句" class="headerlink" title="倒装句"></a>倒装句</h2><p>助动词+主语+剩下的谓语</p>
<ol>
<li><p>否定词放在句首+半倒装<br>否定词: never, seldom, rarely, barely, scarcely, hardly, little, neither, nor, under no circumstances, on no occasions, in no cases</p>
<blockquote>
<p>People under no circumstances live away from junk food.改写：<br>  Under no circumstances do people live away from junk food.</p>
</blockquote>
<ul>
<li>特殊：Not only + 半倒装，but also…<br>Not only will they hone tehir skills, but they can cultivate their personalities.</li>
</ul>
</li>
<li><p>Only+状语+半倒装<br> 状语的形式包括</p>
<ul>
<li>介词短语：by, through, via</li>
<li>状语从句：when sb do, if sb do</li>
<li>副词：then<blockquote>
<p>Only by using the Internet can people explore a wide range of information.<br>Only when people surf the Internet can they explore a wide range of information.</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h2 id="更多更多"><a href="#更多更多" class="headerlink" title="更多更多"></a>更多更多</h2><p><strong>The more+完整&amp;正常的句子，the more+完整&amp;正常的句子.</strong></p>
<ul>
<li>逗号的前后是两个完整的句子，即有主语和谓语</li>
<li>正常语序的句子，仅提前the more的部分</li>
<li>也可以是the less (修饰un和verb )以及the fewer (修饰cns)</li>
<li>只能the more两次，如果还有结果，可以用非谓语… ,doing或非限定性定语从句… ,which </li>
</ul>
<blockquote>
<p>1、The government invests in education more. Students benefit more.<br> -&gt;The more the government invests in education. the more students benefit.<br>  2、She works harder. She is more likely to win.<br> -&gt; The harder she works, the more likely she is to win.<br>  3、He has fewer chances to hike. He is less healthy. It makes it hard for him to concentrate on work.<br> -&gt; The fewer chances he has to hike, the less healthy he is. making it hard for him to concentrate on work.<br> -&gt; The fewer chances he has to hike, the less healthy he is, which makes it hard for him to concentrate on work.</p>
</blockquote>
<h2 id="反问句"><a href="#反问句" class="headerlink" title="反问句"></a>反问句</h2><p>How…?<br>Could…?</p>
]]></content>
      <categories>
        <category>TOEFL-Writing</category>
      </categories>
      <tags>
        <tag>TOEFL</tag>
      </tags>
  </entry>
  <entry>
    <title>TOEFL-writing-04</title>
    <url>/2021/03/09/TOEFL-writing-04/</url>
    <content><![CDATA[<h1 id="对比总分结构"><a href="#对比总分结构" class="headerlink" title="对比总分结构"></a>对比总分结构</h1><p>总论点——阅读ts+听力ts——听力细节</p>
<p>[Total 260字+]开头段（3句）——第一个理由段（2句）——第二个理由段（2句）——第三个理由段（3句）——结尾段（1句）</p>
<h1 id="开头段"><a href="#开头段" class="headerlink" title="开头段"></a>开头段</h1><p><strong>主题(主语从句)</strong> is the focus of both the writer and the professor. In the writing, three <strong>三个TS的所属类别</strong>，including A, B and C, have been elaborated. The professor, however, claims that <strong>听力主旨</strong>.</p>
<h1 id="第一个理由段"><a href="#第一个理由段" class="headerlink" title="第一个理由段"></a>第一个理由段</h1><p>As opposed to the writer’s idea that <strong>阅读的TS1</strong>, the professor states that <strong>听力的TS1</strong>. He/She advances the theory by saying that <strong>听力的细节</strong>.</p>
<h1 id="第二个理由段"><a href="#第二个理由段" class="headerlink" title="第二个理由段"></a>第二个理由段</h1><p>The professor continues to discredit the writing’s assertion that <strong>阅读的TS2</strong>, by examining the fact that <strong>听力的TS2</strong>. In detail, he/she points out that <strong>听力的细节</strong>.</p>
<h1 id="结尾段"><a href="#结尾段" class="headerlink" title="结尾段"></a>结尾段</h1><p>An apparent divide exists between the writer and the professor on <strong>主题（名词）</strong>.</p>
<h1 id="行文原则"><a href="#行文原则" class="headerlink" title="行文原则"></a>行文原则</h1><h2 id="对比意识"><a href="#对比意识" class="headerlink" title="对比意识"></a>对比意识</h2><p><strong>仅写阅读和听力的对比</strong>内容</p>
<ul>
<li>阅读的某个细节是否需要写，取决于听力是否有针对这个点反驳</li>
<li>听力的某个细节是否需要写,取决于是否反驳阅读(应该是听力时已经筛选好了)</li>
</ul>
<h2 id="读者意识"><a href="#读者意识" class="headerlink" title="读者意识"></a>读者意识</h2><p>让一个没有读过阅读没有听过听力的人,看文章就能看懂</p>
<ul>
<li>对于文章的主题词进行解释</li>
<li>尽可能描述直接、清楚，哪怕字数多些</li>
</ul>
<h2 id="时态"><a href="#时态" class="headerlink" title="时态"></a>时态</h2><p>时态由动作本身来决定</p>
]]></content>
      <categories>
        <category>TOEFL-Writing</category>
      </categories>
      <tags>
        <tag>TOEFL</tag>
      </tags>
  </entry>
  <entry>
    <title>TOEFL-writing-05</title>
    <url>/2021/04/06/TOEFL-writing-05/</url>
    <content><![CDATA[<style>
  p{
    font-size:18px;
    line-height:1.7em;

  }
</style>
<p><strong>九大话题</strong></p>
<h1 id="教育类"><a href="#教育类" class="headerlink" title="教育类"></a>教育类</h1><h2 id="学生层面"><a href="#学生层面" class="headerlink" title="学生层面"></a>学生层面</h2><ol>
<li>教室内：<ul>
<li>academic learning(more knowledge, trigger interest)</li>
</ul>
</li>
<li>教室外:<ul>
<li>skils(interpersonal skills, time management skills);</li>
<li>qualities(independent, persistent)</li>
<li>professional development(locate careers, promote)</li>
</ul>
</li>
</ol>
<p><strong>例题</strong>：Schools should require young children (aged 5-11) to <strong>work together in a small group</strong> instead of working alone during the process of learning many actvitles.</p>
<p>小组合作：</p>
<ol>
<li>academic learning<br>more knowledge, trigger interest</li>
<li>personal development<br>interpersonal skills, time management skills</li>
</ol>
<hr>
<p><strong>核心表达</strong>：</p>
<ol>
<li><p>对学生学习好</p>
<ul>
<li><p>获得更多知识</p>
<ul>
<li>knowledge/expertise/proficiency</li>
<li>academic learning</li>
<li>boost/improve/inhance + academic/school performance</li>
<li>finish/complete/accomplish + homework/assignments/tasks/projects</li>
<li>apply knowledge into practice</li>
<li>sb. can acquire/gain/obtain/attain + academic expertise/knowledge</li>
<li>sb. can broden/extand/improve/increase + knowledge</li>
<li>sth. can provide students with the access to a wide range of/considerable/comprehensive + knowledge</li>
<li>sth. can enrich their knowledge///enlarge their knowledge base</li>
</ul>
</li>
<li><p>学习兴趣高</p>
<ul>
<li>excite/generate/stimulate/trigger/motivate + students’ interest/passion/enthusiasm</li>
<li>explore the unknown world </li>
<li>participate in/engage themselves in/involve themselves in/be engaged in/be involved in</li>
<li>allocate/distribute time to sth./doing</li>
</ul>
</li>
</ul>
</li>
<li><p>对学生技能好</p>
<ul>
<li><p>人际交往能力</p>
<ul>
<li>extracurricular/after-school activities</li>
<li>hone/practice/develop + skills</li>
<li>cultivate/foster/nurture/shape + one’s personalities/characteristics</li>
<li>interpersonal/communicative/social + skills/tactics/strategies</li>
<li>converse/interact/socialize with sb.</li>
<li>people from assorted/diverse/various/a variety of backgrounds and cultures</li>
</ul>
</li>
<li><p>时间管理技能</p>
<ul>
<li>label and arrange them in the order of urgency</li>
<li>prioritize tasks in demand for/demanding/requiring + instant/immediate attention</li>
</ul>
</li>
</ul>
</li>
<li><p>对学生的品质好</p>
<ul>
<li>独立性<ul>
<li>themselevs/individually/by themselves/on their own</li>
<li>indenpendence and autonomy/self-reliance/self-determination</li>
<li>be independent and autonomous</li>
</ul>
</li>
<li>坚持不懈<ul>
<li>confront/be confronted with/in the confrontation of</li>
<li>hardships/obstacles/adversities/enigmas/frustration/desperation</li>
<li>persistence/perseverance/grit</li>
<li>achieve success regardless of/disregarding + any setbacks</li>
</ul>
</li>
</ul>
</li>
<li><p>对学生就业好</p>
<ul>
<li>找工作<ul>
<li>be competitive in</li>
<li>win/gain/attain/obtain + competitiveness/competitive edges in </li>
<li>locate/pursue/hunt for/search for career</li>
</ul>
</li>
<li>工作晋升<ul>
<li>get promotion/advancement</li>
<li>promote/advance</li>
<li>move up one’s career ladder</li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="教师层面"><a href="#教师层面" class="headerlink" title="教师层面"></a>教师层面</h2><ol>
<li>benefit students</li>
<li>benifit teachers<br>teaching methods<br>achievement/satisfaction/motivation</li>
</ol>
<p><strong>例题</strong>：Agree or disagree? All school teachers should be required to <strong>take courses every 5 years</strong> to update their knowledge. (13.12.01)</p>
<hr>
<p><strong>核心表达</strong></p>
<ul>
<li><p>教学方法多样</p>
<ul>
<li>diverse/assorted/a variety/numerous/excessive/substantial</li>
<li>teaching/pedagogical/instructional + tactics/approaches/strategies/techniques 教学方法</li>
<li>adopt/employ/follow +教学方法 </li>
<li>involve/engage students in discussions</li>
<li>increase/boost/enhance + students’ engagement/involvement</li>
</ul>
</li>
<li><p>积极性、动力</p>
<ul>
<li>a sense of acievement/motivation/attainment/accomplishment</li>
<li>motivate/stimulate/urge/spur/inspire sb. to do 督促某人做某事</li>
</ul>
</li>
</ul>
<hr>
<h2 id="学校层面"><a href="#学校层面" class="headerlink" title="学校层面"></a>学校层面</h2><ol>
<li>benifit students （根据题目从对学生好中选两个小点）</li>
<li>benifit school<br>enrollment/reputation<br>danation(from alumni;company)</li>
</ol>
<p><strong>例题</strong><br>Agree or disagree? Would you rather your school spend money on social events and facilities or on improving the cafeteria menus? (13.08. 17)</p>
<p>投入社会活动</p>
<ol>
<li>benefit student<br>interpersonal skills<br>time management skills</li>
<li>benifit schools<br>enrollment/reputation<br>donation</li>
</ol>
<hr>
<p><strong>核心表达</strong></p>
<ol>
<li>对学校好<ul>
<li>招生好<ul>
<li>prestigious/renowned/well-known</li>
<li>lead to/contribute to /result in + enrollment growth</li>
<li>increase/enhance/boost + enrollment rate</li>
<li>(applicants)regard/consider…as the most + essential/vital/decisive/dominant/prominent + element/ingredient/factor/component in their college search process</li>
</ul>
</li>
<li>投资多<ul>
<li>a quality/a well-round /decent/ first-class + education</li>
<li>build/establish + alumni links</li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<h1 id="公司类"><a href="#公司类" class="headerlink" title="公司类"></a>公司类</h1><h2 id="员工层面"><a href="#员工层面" class="headerlink" title="员工层面"></a>员工层面</h2><ol>
<li>benefits of high salaries<br>improve one’s professional life<br>improve one’s personal life(oneself+family members)</li>
<li>benifit of 另一点<br>说该工作缺点的两个好处，最好和职业相关</li>
</ol>
<p><strong>例题1</strong><br>Which would you choose: a higher pay job with long hours or an average pay job with normal work hours? Explain your choice, using specific reasons and details. (16.07.09)</p>
<p>选择高薪长时间的工作</p>
<ol>
<li>high salaries<br>improve one’s prefessional life: take courses, equipment<br>improve one’s personal life: relax</li>
<li>long hour<br>more knowledge<br>a better relationship with colleagues</li>
</ol>
<p><strong>例题2</strong><br>Whether to finish a project <strong>at one time</strong> or to work at several projects at the same time. (15.03.28 )</p>
<p>一次只做一件事</p>
<ol>
<li>efficient<br>reduce time<br>reduce errors</li>
<li>relationship<br>with colleagues<br>with employers</li>
</ol>
<hr>
<p>核心表达：</p>
<ol>
<li>工作相关<ul>
<li>jobs: positions, careers,professions, vocations, occupations</li>
<li>at work/in the workplace/ in the work field</li>
<li>pursue/hunt for/search for + a career</li>
<li>从事工作：embark on + a career</li>
</ul>
</li>
<li>工作效率<ul>
<li>increase/improve/boost/enhance + productivity/efficienty</li>
<li>lower/undermine/impair/hamper + productivity</li>
<li>eliminate personal + distractions/distractors/distracters/interruptions</li>
<li>commit mistakes</li>
<li>rectify/correct/revise + errors</li>
<li>decrease the risks/chances/possibilities/likelihoods + of errors</li>
</ul>
</li>
<li>人际关系<ul>
<li>employees/subordinates下属/co-workers/colleagues/fellow workers</li>
<li>render assistance to sb.</li>
<li>promote/advance</li>
<li>move up a career ladder</li>
<li>sth + ensure/guarantee/secure + promotion/advancement</li>
<li>sb + promotion/advancement</li>
</ul>
</li>
</ol>
<hr>
<h2 id="老板层面"><a href="#老板层面" class="headerlink" title="老板层面"></a>老板层面</h2><p>老板应该有什么样的品质</p>
<ol>
<li>efficient<br>reduce time<br>reduce errors</li>
<li>relationship<br>with subordinates<br>with clients: reputation, image, satisfaction</li>
</ol>
<p><strong>例题</strong><br>Agree or disagree? An effective leader should try to <strong>make others feel that they are part of the decision making process</strong>. (13.01.12)<br>应该让参与</p>
<hr>
<p>老板相关：</p>
<ul>
<li>superiors/employers/leaders/executives/supervisors/monitors</li>
<li>clients and customers</li>
</ul>
<hr>
<h2 id="公司层面"><a href="#公司层面" class="headerlink" title="公司层面"></a>公司层面</h2><ol>
<li>inner operation<br>efficiency<br>relationship</li>
<li>external development<br>reputation: attract employees<br>investment from others</li>
</ol>
<p><strong>例题</strong><br>Some methods for already successful companies to develop</p>
<ol>
<li>produce new version of products</li>
<li>introduce new line of producls </li>
<li><strong>have a partner with other company</strong>. (15.05. l6A)</li>
</ol>
<hr>
<p>公司相关</p>
<ul>
<li>firms/enterprises/corporations/organnizations/agencies/businesses</li>
<li>the success/achievement/prosperity of a corporation</li>
<li>generate/create/boost + profits/revenues</li>
</ul>
<hr>
<h1 id="品质类"><a href="#品质类" class="headerlink" title="品质类"></a>品质类</h1><h2 id="品质成功"><a href="#品质成功" class="headerlink" title="品质成功"></a>品质成功</h2><ul>
<li>efficiency<br> reduce time<br> reduce errors(concentrate/misunderstanding)</li>
<li>assistance<br> from parents<br> from strangers</li>
</ul>
<p><strong>例题</strong><br>Agree or disagree? It is important to make sure that others know about your strengths and accomplishments: if you are not so, you will be never successful life. (13.01.13)</p>
<p>让别人知道我们的成就更好<br>提高效率，更多的支持，给予资源</p>
<hr>
<ul>
<li>contribute to + 好/lead to + 中性/result in + 中性</li>
<li>triumph/satisfaction/prosperity/success/achievement</li>
<li>accomplish/achieve/attain/fulfill/meet/reach + an objective/target/aim</li>
<li>commit/dedicate/devote + oneself to</li>
<li>pursue their dreams/ in the pursuit of their dream</li>
<li>strive for /struggle for + a dream</li>
<li>realize one’s dream/reach a dream</li>
</ul>
<hr>
<h2 id="以貌取人"><a href="#以貌取人" class="headerlink" title="以貌取人"></a>以貌取人</h2><ol>
<li>vary constantly VS personalities : not change<br>mood<br>seasons/fashion/ages/living places</li>
<li>uniform<br>at the workplace<br>at school</li>
</ol>
<p><strong>例题</strong><br>Agree or disagree? The way a person <strong>dresses</strong> in is a good indication of his/her personality and character. (13.06. 15)(14. 12.14)(17.02.25)</p>
<p>衣着不能反映人的品质<br>工作中的dress code，企业形象，但不能说都有一样的品质</p>
<hr>
<ul>
<li>various/assorted/different/distinct/diverse/diversified</li>
<li>according to / in agreement with / in consonance with / in line with</li>
<li>change/alter/shift/vary</li>
<li>leave a favorable/good/positive + impression on 产生好的印象</li>
</ul>
<hr>
<h1 id="生活类"><a href="#生活类" class="headerlink" title="生活类"></a>生活类</h1><p>食物、住、行、动、买</p>
<ol>
<li>health<br>physical health<br>mental health</li>
<li>relationship<br>new friends &amp; old friends<br>communicate<br>assistance</li>
</ol>
<p><strong>例题</strong><br>It is better to spend money on <strong>travelling</strong> than saving money. (15.06. 13)<br>花钱旅游好</p>
<h2 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h2><hr>
<ol>
<li>身体健康</li>
</ol>
<ul>
<li>ecxercise/work out/do physical activities/ be physically avtive</li>
<li>keep a sedentary lifestyle/lead a sedentary lifestyle</li>
<li>distract/prevent/exclude + sb. from a sedentary lifestyle</li>
</ul>
<ol start="2">
<li>精神健康</li>
</ol>
<ul>
<li>pressure/tension/stress</li>
<li>undergo/experience/endue/suffer from</li>
<li>cope with/deal with/handle/adress/tackle/combat + pressure/stress/tension</li>
<li>adopt…as a + stress-relif/stress-shrinking/stress-reducing/stress-eliminating + strategy///adopt… as a stress reducer</li>
<li>alter one’s stress level</li>
<li>raise/lower one’s stress level</li>
<li>distract sb/serve as a distrscter/provide a distraction + from</li>
<li>daily/routine + worries/concerns/trivia</li>
<li>happiness/delight/elation/enjoyment/joy/echilaration/well-being/bliss/contentment</li>
</ul>
<hr>
<h2 id="relationship"><a href="#relationship" class="headerlink" title="relationship"></a>relationship</h2><hr>
<ol>
<li>new friends<ul>
<li>build/establish + relationship/connection/cond</li>
<li>a close/strong/inimate/harmonious + bond</li>
<li>encounter/come across/get acquainted with</li>
<li>expand/extend + one’s current social circle/network</li>
<li>a wider/larger friend circle</li>
</ul>
</li>
<li>old friend<ul>
<li>maintain/strengthen + relationship/connection/bond</li>
<li>老朋友 acquainted friends/acquaintances/companions</li>
</ul>
</li>
</ol>
<h2 id="买"><a href="#买" class="headerlink" title="买"></a>买</h2><ol>
<li><p>students<br>computers<br>sport equipment</p>
</li>
<li><p>adults<br>mobile phones<br>automobile</p>
</li>
<li><p>professional life<br>computer<br>automobiles</p>
</li>
<li><p>personal life<br>mobile phones<br>sport eqiupment</p>
</li>
</ol>
<p><strong>例题</strong><br>Agree or disagree? People often buy products not because they <strong>really need them</strong> but because other people have them. </p>
<h1 id="政府类"><a href="#政府类" class="headerlink" title="政府类"></a>政府类</h1>]]></content>
      <categories>
        <category>TOEFL-Writing</category>
      </categories>
      <tags>
        <tag>TOEFL</tag>
      </tags>
  </entry>
  <entry>
    <title>Troubleshooting</title>
    <url>/2021/02/04/Troubleshooting/</url>
    <content><![CDATA[<h2 id="【R】"><a href="#【R】" class="headerlink" title="【R】"></a>【R】</h2><ol>
<li><p>20200312<br>outlierKD(final_ns$CS.lymph.nodes..2004..,lymph)</p>
<blockquote>
<p>报错：$ operator is invalid for atomic vectors<br>解决：赋值给对象后在放入函数<br>lymph &lt;- final_ns$CS.lymph.nodes..2004..<br>outlierKD(final_ns,lymph)</p>
</blockquote>
</li>
<li><p>20200504<br>最无语最神经病的报错！！<br>kk &lt;- paste(“Surv(final_dat$Survival.months, final_dat$status)”,insertVar,sep=”~”);<br>fit_insertVar &lt;- survfit(as.formula(kk),data = final_dat)</p>
<blockquote>
<p>报错：找不到对象kk<br>解决：两个&lt;&lt;表示将kk设在全局<br>kk &lt;&lt;- paste(“Surv(final_dat$Survival.months, final_dat$status)”,insertVar,sep=”~”);</p>
</blockquote>
</li>
<li><p>201128<br>BiocManager::install(“hgu133a2.db”)</p>
<blockquote>
<p>Warning：installation of package ‘hgu133a2.db’ had non-zero exit status<br>解决：一般是依赖包的问题，先加载完所有的dependency就可以library了</p>
</blockquote>
</li>
<li><p>201224<br>BiocManager::install(“DOSE”)</p>
<blockquote>
<p>Warning message:<br>In file.copy(savedcopy, lib, recursive = TRUE) :<br>拷贝C:\Users\Surface\Documents\R\win-library\4.0\00LOCK\vctrs\libs\x64\vctrs.dll到C:\Users\Surface\Documents\R\win-library\4.0\vctrs\libs\x64\vctrs.dll时出了问题：Permission denied<br>解决：依赖的包现在正在环境下使用，需要把它先<code>detach()</code>，再安装</p>
</blockquote>
</li>
<li><p>210103<br>有的时候RStudio会突然卡住，只有右上角的最小化、关闭、窗口大小可以点，这个时候点一下那个窗口大小，再全屏一下就可以了，超级神奇</p>
</li>
<li><p>210201<br>BiocManager::install()</p>
<blockquote>
<p>Installation path not writeable, unable to update packages: boot, class,<br>codetools, foreign, KernSmooth, Matrix, nlme, nnet, spatial<br>解决：installed.packages()[, c(“Package”, “LibPath”)] 来查看所有的R包位置。<br>Sys.chmod(“file”,’777’) 设置装在哪里，其中file是你R包安装的位置</p>
</blockquote>
</li>
<li><p>210421</p>
<blockquote>
<p>library(org.Hs.eg.db)<br>Error: package or namespace load failed for ‘org.Hs.eg.db’:<br>.onLoad failed in loadNamespace() for ‘org.Hs.eg.db’, details:<br>call: l$contains<br>error: $ operator is invalid for atomic vectors</p>
</blockquote>
</li>
</ol>
<p>在Bioconductor上已经有人提了问题，并且有了回答（地址：<a href="https://support.bioconductor.org/p/9136329/%EF%BC%89">https://support.bioconductor.org/p/9136329/）</a><br>简单的说，就是Rstduio出来背锅，最新的RSQLite(v2.2.6)和Rstudio存在冲突，以后要么是RSQLite迁就RStduio，要么就是Rstudio迁就RQLite。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法1 手动设置环境变量</span></span><br><span class="line">options(connectionObserver = <span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2: 装个旧版本RSQLite，2.2.5之前即可</span></span><br><span class="line">install.packages(<span class="string">&quot;remotes&quot;</span>)</span><br><span class="line">remotes::install_version(<span class="string">&quot;RSQLite&quot;</span>, <span class="string">&quot;2.2.5&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="【Python】"><a href="#【Python】" class="headerlink" title="【Python】"></a>【Python】</h2><ol>
<li>201128<blockquote>
<p>报错：python SyntaxError: EOL while scanning string literal<br>错误原因：字符串以 \ 结尾 或者字符串缺少引号。</p>
</blockquote>
</li>
</ol>
<h2 id="【Perl】"><a href="#【Perl】" class="headerlink" title="【Perl】"></a>【Perl】</h2><p>—To Be Continue—</p>
]]></content>
      <categories>
        <category>Records</category>
      </categories>
      <tags>
        <tag>Debug</tag>
      </tags>
  </entry>
  <entry>
    <title>all about UMI-tools</title>
    <url>/2021/04/19/all-about-UMI-tools/</url>
    <content><![CDATA[<h1 id="UMI-tools"><a href="#UMI-tools" class="headerlink" title="UMI-tools"></a>UMI-tools</h1><p><a href="https://www.jianshu.com/p/c6eac2e1f02a">https://www.jianshu.com/p/c6eac2e1f02a</a><br><a href="https://umi-tools.readthedocs.io/en/latest/">https://umi-tools.readthedocs.io/en/latest/</a><br><a href="https://github.com/CGATOxford/UMI-tools/blob/master/doc/QUICK_START.md">https://github.com/CGATOxford/UMI-tools/blob/master/doc/QUICK_START.md</a></p>
<p>For example, in a standard iCLIP experiment, the barcode is made of 3 random bases, followed by a 4 base library barcode, followed by 2 more random bases. Thus the <code>--bc-pattern</code> would be “NNNXXXXNN”.</p>
<center><img src="/img/scATAC/UMI.png" alt="UMI" style="zoom:70%;" /></center>
The processed reads could then be passed to a demultiplexing tool to deal with the library part of the barcode.

<ul>
<li><p>Example UMI extraction:<br>UMI is bases 3-7, bases 1-2 and 7-8 are the sample barcode and need to be removed(取3-7是因为前几个base测序质量不好)</p>
<p>@HISEQ:87:00000000 read1<br>AAGGTTGCTGATTGGATGGGCTAG</p>
</li>
</ul>
<p> +<br> DA1AEBFGGCG01DFH00B1FF0B</p>
<p> will become:</p>
<p> @HISEQ:87:00000000_GGTT read1<br> TGATTGGATGGGCTAG</p>
<ul>
<li>1AFGGCG01DFH00B1</li>
</ul>
<p>UMItools的标记与eclipdemux不同，不可交叉混用</p>
<ul>
<li>UMItools是把UMI加在: @HISEQ:87:00000000_GGTT read1</li>
<li>eclipdemux加在：@GGTT;HISEQ:87:00000000 read1</li>
</ul>
<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#第一种</span></span><br><span class="line">conda/mamba install -c bioconda -c conda-forge umi_tools</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二种</span></span><br><span class="line">pip install umi_tools</span><br><span class="line"></span><br><span class="line"><span class="comment">#第三种</span></span><br><span class="line">unzip 1.0.0.zip</span><br><span class="line"><span class="built_in">cd</span> UMI-tools-1.0.0</span><br><span class="line">python setup.py install --user</span><br></pre></td></tr></table></figure>
<h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p>extract UMI from raw reads -&gt; map reads -&gt; deduplicate reads based on UMIs</p>
<h2 id="Extract-the-UMIs"><a href="#Extract-the-UMIs" class="headerlink" title="Extract the UMIs"></a>Extract the UMIs</h2><p>Currently there are 6 commands. The <code>extract</code> and <code>whitelist</code> commands are used to prepare a fastq containg UMIs +/- cell barcodes for alignment.</p>
<h3 id="whitelist–提取cell-barcode白名单"><a href="#whitelist–提取cell-barcode白名单" class="headerlink" title="whitelist–提取cell barcode白名单"></a>whitelist–提取cell barcode白名单</h3><p>whitelist 命令会从原始数据种提取去可能的cell barcode。<br>通常情况下，10X的barcode长度为16nt，umi长度为12nt；Drop-seq的barcode长度为12nt，umi长度为8nt。<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#10X</span></span><br><span class="line">umi_tools whitelist --stdin hgmm_100_R1.fastq.gz \  </span><br><span class="line">                    --bc-pattern=CCCCCCCCCCCCCCCCNNNNNNNNNNNN \ </span><br><span class="line">                    --set-cell-number=100 \    </span><br><span class="line">                    --log2stderr &gt; whitelist.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#BD</span></span><br><span class="line">umi_tools whitelist --stdin <span class="variable">$&#123;fastq&#125;</span> \</span><br><span class="line">        --extract-method=regex \</span><br><span class="line">        --bc-pattern=<span class="string">&quot;(?P&lt;cell_1&gt;.&#123;9&#125;)(?P&lt;discard_1&gt;.&#123;12&#125;)(?P&lt;cell_2&gt;.&#123;9&#125;)(?P&lt;discard_2&gt;.&#123;13&#125;)(?P&lt;cell_3&gt;.&#123;9&#125;)(?P&lt;umi_1&gt;.&#123;8&#125;)(?&lt;plotT&gt;TTTTTTTT)&#123;s&lt;=2&#125;.*&quot;</span> \</span><br><span class="line">        --expect-cells=10000  --plot-prefix=true2 --log2stderr --subset-reads=100000000 \</span><br><span class="line">        --knee-method=density --allow-threshold-error &gt; whitelist.txt</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>常用参数解释</strong><br>–stdin：指定输入文件或者标准输入。<br>–plot-prefix：指定QC统计图的前缀，可用于判断细胞数阈值设置是否合理。<br>–bc-pattern：指定cell barcode和umi的位置，默认情况下，他们位于序列的5’端，否则可用–3prime参数改变。cell barcode用同等数量的字符”C”表示；umi用同等数量的字符”N”表示。<br>–set-cell-number：设置检测到的cell barcode数量，若事先知道数量可设定，否则省略软件会自动判断(结合QC图判读阈值是否合理，若不合理可人为设定阈值重新分析)。<br>–expect-cells=200：设置检测到的cell barcode数据上限，该值是根据捕获效率预估得到(一般10X捕获效率不低于10%)，结合QC图判断阈值是否合理，若不合理可人为设定阈值重新分析。<br>–stdout/-S：指定输出barcode结果到文件，log信息到还是标准输出。<br>–stdlog/-L：指定log信息到文件，barcode结果还是到标准输出。<br>–log2stderr：指定log信息到标准错误输出，barcode结果还是到标准输出。<br>-v 0：关闭log信息的输出。</p>
</blockquote>
<blockquote>
<p><strong>结果文件解释</strong><br>whitelist生成的结果文件包含四列：<br>1、可接受的cell barcode；<br>2、与可接受的barcode距离相差1的barcode；<br>3、第一列barcode的umi数；<br>4、第2列barcode的umi数</p>
</blockquote>
<h3 id="extract–提取barcode和过滤reads"><a href="#extract–提取barcode和过滤reads" class="headerlink" title="extract–提取barcode和过滤reads"></a>extract–提取barcode和过滤reads</h3><p>extract命令会从fastq文件中提取包含可接受barcode的reads，默认情况下extract命令会忽略umi的reads质量情况而不做处理。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">umi_tools extract --bc-pattern=CCCCCCCCCCCCCCCCNNNNNNNNNN \</span><br><span class="line">                  --stdin hgmm_100_R1.fastq.gz \</span><br><span class="line">                  --stdout hgmm_100_R1_extracted.fastq.gz \</span><br><span class="line">                  --read2-in hgmm_100_R2.fastq.gz \</span><br><span class="line">                  --read2-out=hgmm_100_R2_extracted.fastq.gz \</span><br><span class="line">                  --filter-cell-barcode \</span><br><span class="line">                  --whitelist=whitelist.txt</span><br></pre></td></tr></table></figure>
<blockquote>
<p>常用参数解释：<br>–bc-pattern：指定cell barcode和umi的位置，同whilelist。<br>–stdin：指定输入文件或者标准输入，同whilelist。<br>–stdout：指定read1的输出文件。<br>–read2-in：指定read2的输入文件，即基因表达的原始reads文件。<br>–read2-out：指定read2的输出文件。<br>–read2-stdout：设置read2的输出到标准输出，同时不会生成提取后read1文件。<br>–filter-cell-barcode：指定只提取包含可接受barcoded的reads。<br>–error-correct-cell：指定提取包含与可接受barcode汉明距离相差1的barcode的reads。<br>–whitelist：barcode白名单文件。<br>–quality-filter-threshold=[FILTER]：设定通过阈值来过滤umi的read，低于阈值的umi会被丢弃。<br>–quality-filter-mask=[FILTER]：设置一个阈值来把umi reads中低于阈值的碱基替换为”N”。</p>
</blockquote>
<h2 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h2><p>使用STAR/bowtie来将reads比对到参考基因组。然后转成BAM，排序+index</p>
<h2 id="Deduplication"><a href="#Deduplication" class="headerlink" title="Deduplication"></a>Deduplication</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">umi_tools dedup -I example.bam --output-stats=deduplicated -S deduplicated.bam</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输出deduplicated_edit_distance.tsv：<br> <center><img src="/img/scATAC/dedup.png" alt="UMI" style="zoom:70%;" /></center><br> 前两列:单碱基平均编辑距离的分布</p>
</blockquote>
<h1 id="UMI-tools-in-single-cell"><a href="#UMI-tools-in-single-cell" class="headerlink" title="UMI-tools in single cell"></a>UMI-tools in single cell</h1><p><strong>Important update:</strong> We now recommend the use of <code>alevin</code> for droplet-based scRNA-Seq (e.g 10X, inDrop etc). <code>alevin</code> extends the directional method used in <code>UMI-tools</code> to correct UMI errors with droplet scRNA-Seq within a framework that also enables quantification using multi-mapped reads. <code>alevin</code> is an accurate, fast and convenient end-to-end tool to go from fastq -&gt; count matrix. </p>
<h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><p>查看CB和UMI</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zcat hgmm_100_R1.fastq.gz | head -n2</span><br><span class="line"></span><br><span class="line"><span class="comment"># @ST-K00126:308:HFLYFBBXX:1:1101:25834:1173 1:N:0:NACCACCA</span></span><br><span class="line"><span class="comment"># NGGGTCAGTCTAGTGTGGCGATTCAC</span></span><br><span class="line"><span class="comment"># +</span></span><br><span class="line"><span class="comment"># #AAFFJJJJJJJJJJJJJJJJJJJJJ</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------CB-------|---UMI---</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ToolsLearning</category>
      </categories>
      <tags>
        <tag>WES</tag>
      </tags>
  </entry>
  <entry>
    <title>conda/mamba Installation</title>
    <url>/2021/04/04/conda-mamba-Installation/</url>
    <content><![CDATA[<p>Conda 是⼀个开源的软件包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。Conda 主要是为 Python 程序创建的，适⽤于 Linux，OSX和 Windows，也可以打包和分发其他软件，如 R 和 Scala。</p>
<h1 id="conda-配置镜像"><a href="#conda-配置镜像" class="headerlink" title="conda 配置镜像"></a>conda 配置镜像</h1><p>Conda 的默认配置属于开箱即用的类型，但如果我们想要更好⽤，还有⼀些设定需要注意。</p>
<p>Conda 默认的包channel是Anaconda公司的默认频道。另外还存在⼀个开源频道：conda-forge。condaforge 的包往往⽐官⽅更新更快，也更全，通常我们会直接把频道加⼊到 conda 的默认设置⾥。对于其他自己维护的频道，⽐如 pytorch，如果需要，我们也可以自行添加。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成condarc配置文件；</span></span><br><span class="line">conda config --add channels conda-forge</span><br><span class="line">conda config --append channels pytorch</span><br></pre></td></tr></table></figure>
<p>另外，如果Conda在国内更新很慢，可以搜索anaconda清华源添加清华大学的国内镜像进行包的更新。</p>
<p>显示目前设置的所有镜像源，在执行 conda config 命令的时候，会在当前用户目录下创建 .condarc 文件，可以查看更换源前后该文件内容的变化:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看channel</span></span><br><span class="line">conda config --show-sources</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除安装源</span></span><br><span class="line">conda config --remove channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 换回默认源</span></span><br><span class="line">conda config --remove-key channels</span><br></pre></td></tr></table></figure>
<h2 id="清华大学开源软件镜像站"><a href="#清华大学开源软件镜像站" class="headerlink" title="清华大学开源软件镜像站"></a>清华大学开源软件镜像站</h2><p><a href="https://mirrors.sjtug.sjtu.edu.cn/">https://mirrors.sjtug.sjtu.edu.cn/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: <span class="literal">true</span></span><br><span class="line">channel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda</span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure>
<h2 id="上海交通大学开源软件镜像站"><a href="#上海交通大学开源软件镜像站" class="headerlink" title="上海交通大学开源软件镜像站"></a>上海交通大学开源软件镜像站</h2><p><a href="https://mirrors.sjtug.sjtu.edu.cn/">https://mirrors.sjtug.sjtu.edu.cn/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: <span class="literal">true</span></span><br><span class="line">channel_alias: https://anaconda.mirrors.sjtug.sjtu.edu.cn/</span><br><span class="line">default_channels:</span><br><span class="line">  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/main</span><br><span class="line">  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/free</span><br><span class="line">  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/mro</span><br><span class="line">  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/msys2</span><br><span class="line">  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/pro</span><br><span class="line">  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/r</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://anaconda.mirrors.sjtug.sjtu.edu.cn/conda-forge</span><br><span class="line">  soumith: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/soumith</span><br><span class="line">  bioconda: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/bioconda</span><br><span class="line">  menpo: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/menpo</span><br><span class="line">  viscid-hub: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/viscid-hub</span><br><span class="line">  atztogo: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/atztogo</span><br></pre></td></tr></table></figure>
<h2 id="北京外国语大学开源软件镜像站"><a href="#北京外国语大学开源软件镜像站" class="headerlink" title="北京外国语大学开源软件镜像站"></a>北京外国语大学开源软件镜像站</h2><p><a href="https://mirrors.bfsu.edu.cn/">https://mirrors.bfsu.edu.cn/</a></p>
<ul>
<li>注：强烈推荐！！！2020-05-02 上线，清华大学开源软件镜像站的姐妹站，下载体验极佳，再也不用忍受清华源永远下不完的 pytorch 了。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: <span class="literal">true</span></span><br><span class="line">channel_alias: https://mirrors.bfsu.edu.cn/anaconda</span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/free</span><br><span class="line">  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/pro</span><br><span class="line">  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.bfsu.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.bfsu.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.bfsu.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.bfsu.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.bfsu.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.bfsu.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure>
<ul>
<li>我的配置：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - https://mirrors.sjtug.sjtu.edu.cn/anaconda/pkgs/main/</span><br><span class="line">  - https://mirrors.sjtug.sjtu.edu.cn/anaconda/pkgs/free/</span><br><span class="line">  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/pro</span><br><span class="line">  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">show_channel_urls: <span class="literal">true</span></span><br><span class="line">ssl_verify: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h1 id="pip-换源"><a href="#pip-换源" class="headerlink" title="pip 换源"></a>pip 换源</h1><blockquote>
<p>pip 国内的一些镜像:<br>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a><br>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a><br>豆瓣(douban) <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a><br>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a><br>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a></p>
</blockquote>
</li>
</ul>
<h1 id="mamba"><a href="#mamba" class="headerlink" title="mamba"></a>mamba</h1><p>mamba专为加速conda而生，其改写了conda下载资源的固有方式，以多线程的方式对网络资源进行并行下载，从而大幅提升Conda效率：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装mamba</span></span><br><span class="line">conda install mamba</span><br><span class="line">conda install mamba -c conda-forge</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定库当前环境下所有可用版本，以pandas为例</span></span><br><span class="line">mamba repoquery search pandas</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定库依赖哪些库，以bwa为例</span></span><br><span class="line">mamba repoquery depends bwa</span><br></pre></td></tr></table></figure>
<h1 id="环境重建"><a href="#环境重建" class="headerlink" title="环境重建"></a>环境重建</h1><h2 id="环境迁移"><a href="#环境迁移" class="headerlink" title="环境迁移"></a>环境迁移</h2><p>如果我们想要把⼀个 conda 环境和对应版本的包迁移到别的机器上，那就首先需要导出环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate py37 <span class="comment"># 激活要导出的环境</span></span><br><span class="line">conda env <span class="built_in">export</span> &gt; environment.yml <span class="comment"># 导出环境配置，此种方法只能导出相同系统，如 windows机器的配置只能导出给windows使用，不能给linux使用</span></span><br><span class="line">pip freeze &gt; requirement.txt <span class="comment"># 也可以用pip导出，此种方法不限制机器</span></span><br></pre></td></tr></table></figure>
<p>然后在新机器上重建环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda env create -f environment.yml <span class="comment"># 直接利用conda重建 # 或是先安装环境，再用pip重建</span></span><br><span class="line">conda create -n py37 python=3.7 -y</span><br><span class="line">pip install -r requirement.txt</span><br></pre></td></tr></table></figure>
<h2 id="离线环境重建"><a href="#离线环境重建" class="headerlink" title="离线环境重建"></a>离线环境重建</h2><p>如果出于某些原因需要在离线的环境⼯作，Python 的环境配置会是⼀个很头痛的问题。但 conda 其实可以很⽅便的帮我们维护⼀整个相互兼容的环境。这种情况下，⾸先，我们需要找到 conda 的配置⽂件.condarc，通常它会位于：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="attr">macOS:</span> <span class="regexp">/Users/</span>Username</span><br><span class="line"><span class="attr">Linux:</span> ~/.condarc</span><br><span class="line"><span class="attr">Windows:</span> <span class="attr">C:</span>\Users\Username</span><br><span class="line">如果没有看⻅.condarc 配置文件，就运行一次 conda config。</span><br></pre></td></tr></table></figure>
<p>然后，我们需要在.condarc 里修改 conda 缓存包的地址 pkgs_dirs，把这个地址变为我们想要存放下载的 python 包的地址，在离线的机器上我们也进⾏同样的操作来指定 conda 的缓存路径。把 conda 缓存下来的包导入到离线环境的缓存路径下，是建立⼀个完整的 python 环境的关键。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="attr">pkgs_dirs:</span></span><br><span class="line">- <span class="attr">C:</span>\conda-pkgs-cache</span><br></pre></td></tr></table></figure>
<p>在改好.condarc 配置文件后，我们就可以下载我们想要的包了，不过此时，需要带上⼀个关键的参数: –download-only</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过创建环境的方式下载所有想要的包</span></span><br><span class="line">conda create -n py36 anaconda pytorch tensorflow lightgbm catboost tqdm black pipreqs python=3.6 --download-only</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接下载并缓存对应的包</span></span><br><span class="line">conda install tensorflow-gpu=1.15 py-xgboost --download-only</span><br></pre></td></tr></table></figure>
<p>在下载后，将之前设定的 conda 缓存⽬录上传到离线环境中，并在离线环境中也设定.condarc 中 conda</p>
<p>缓存目录为对应的目录。此时运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用缓存创建环境</span></span><br><span class="line">conda create -n offline36 anaconda pytorch tensorflow lightgbm catboost tqdm black pipreqs python=3.6 --use-index-cache --offline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用缓存安装包</span></span><br><span class="line">conda install tensorflow-gpu=1.15 py-xgboost --use-index-cache --offline</span><br><span class="line">就可以只用 conda 缓存中的文件，⽆需联网，就能成功安装对应库到离线环境中了。</span><br></pre></td></tr></table></figure>
<h1 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h1><p>安装软件前，先设置一个虚拟环境，不要直接在自己账户的当前环境内安装软件；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个虚拟环境名为bwa</span></span><br><span class="line">conda create -n bwa</span><br><span class="line"><span class="comment"># 安装python 2版本</span></span><br><span class="line">conda install python=2</span><br><span class="line"><span class="comment"># 以上两句话可以等同于一句命令：conda create -n rna python=2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除环境</span></span><br><span class="line">conda remove -n rcnn --all</span><br></pre></td></tr></table></figure>
<p>conda 其实没有重命名指令，实现重命名是通过 clone 完成的，分两步：</p>
<ol>
<li>先 clone 一份 new name 的环境</li>
<li>删除 old name 的环境</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 比如，想把环境 rcnn 重命名成 tf</span></span><br><span class="line"><span class="comment"># 第1步</span></span><br><span class="line">conda create -n tf --<span class="built_in">clone</span> rcnn</span><br><span class="line"></span><br><span class="line"><span class="comment">#第2步</span></span><br><span class="line">conda remove -n rcnn --all</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda info -e</span><br><span class="line">conda info --envs</span><br><span class="line">conda env list    <span class="comment"># 都是来查看已经存在虚拟环境名的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入虚拟环境</span></span><br><span class="line"><span class="built_in">source</span> activate bwa  <span class="comment">#激活虚拟环境名为bwa的环境</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出环境</span></span><br><span class="line">conda deactivate  <span class="comment">#: linux下conda退出虚拟环境命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除虚拟环境</span></span><br><span class="line">conda env remove --name bio-env       <span class="comment">#：删除虚拟环境及里面的内容</span></span><br></pre></td></tr></table></figure>
<h1 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h1><h2 id="查找软件"><a href="#查找软件" class="headerlink" title="查找软件"></a>查找软件</h2><ol>
<li>从 conda 网页内查找：<a href="http://bioconda.github.io/conda-recipe_index.html">http://bioconda.github.io/conda-recipe_index.html</a></li>
<li>conda search PACKAGENAME：运行命令查找是否存在</li>
</ol>
<h2 id="安装软件-1"><a href="#安装软件-1" class="headerlink" title="安装软件"></a>安装软件</h2><ol>
<li>先从 bioconda 镜像查看软件名具体是什么？一个字母都不能错</li>
<li>conda/mamba install 软件名</li>
<li>成功调取软件帮助文档==确定安装成功<br>这里有点类似 R 包的安装，装后需要 library()一下，才能确认安装成功</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装方法：</span></span><br><span class="line">conda install -y sra-tools trim-galore</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定软件安装版本</span></span><br><span class="line"><span class="comment">## 即安装能模糊匹配到 numpy 版本为 1.11</span></span><br><span class="line">conda install numpy=1.11</span><br><span class="line"><span class="comment">## 即精确安装 numpy 为 1.11 的版本</span></span><br><span class="line">conda install numpy==1.11</span><br></pre></td></tr></table></figure>
<h2 id="更新软件"><a href="#更新软件" class="headerlink" title="更新软件"></a>更新软件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新 conda</span></span><br><span class="line">conda update conda</span><br><span class="line"><span class="comment"># 更新 bwa；前提是已经安装成功 bwa</span></span><br><span class="line">conda update bwa</span><br></pre></td></tr></table></figure>
<h2 id="查看已安装软件"><a href="#查看已安装软件" class="headerlink" title="查看已安装软件"></a>查看已安装软件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前小环境下，列举所有安装软件</span></span><br><span class="line">conda list</span><br></pre></td></tr></table></figure>
<h1 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h1><blockquote>
<p>CondaHTTPError: HTTP 000 CONNECTION FAILED for url <a href="https://conda.anaconda.org/bioconda/linux-64/homer-4.9.1-pl5.22.0_5.tar.bz2">https://conda.anaconda.org/bioconda/linux-64/homer-4.9.1-pl5.22.0_5.tar.bz2</a>Elapsed:<br>An HTTP error occurred when trying to retrieve this URL.<br>HTTP errors are often intermittent, and a simple retry will get you on your way.</p>
</blockquote>
<ol>
<li>检查网络是否已经链接,人为指定 channel 可以解决 bug<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install -y -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda homer</span><br></pre></td></tr></table></figure></li>
<li>conda 安装软件经常冲突<br>事实上不可能有十全十美的工具，conda 非常简易的管理了多个软件流程，那么必然也会有解决不了的事情，必然同一个流程的两个 python 软件基于不同版本的 python 包，就尴尬了。</li>
</ol>
<p>没什么好的办法，只能把冲突的工具安装到不同的子环境。</p>
<ol start="3">
<li>配置镜像出错<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda: <span class="built_in">command</span> not found</span><br><span class="line"><span class="comment"># 表明环境变量里找不到conda这个软件</span></span><br><span class="line"><span class="comment"># 出错原因：.bashrc里没有配置conda的PATH或者配置过但是没有source ~/.bashrc</span></span><br><span class="line"><span class="comment"># 检验方法：运行echo $PATH，查看是否含有conda安装路径</span></span><br><span class="line"></span><br><span class="line">Warning: <span class="string">&#x27;https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge&#x27;</span> already <span class="keyword">in</span> <span class="string">&#x27;channels&#x27;</span> list, moving to the top</span><br><span class="line"><span class="comment"># 表明之前已经运行过这句代码</span></span><br><span class="line"><span class="comment"># 复制镜像配置语句时复制错误，需要重新配置时，需要删除镜像配置文件</span></span><br><span class="line">rm ~/.condarc</span><br><span class="line"><span class="comment"># 然后重新配置</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>ToolsLearning</category>
      </categories>
      <tags>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>eCLIP Analysis</title>
    <url>/2021/03/31/eCLIP-Analysis/</url>
    <content><![CDATA[<ul>
<li>文献：<a href="https://www.nature.com/articles/nmeth.3810">https://www.nature.com/articles/nmeth.3810</a></li>
<li>方法：<a href="https://www.encodeproject.org/documents/739ca190-8d43-4a68-90ce-1a0ddfffc6fd/@@download/attachment/eCLIP_analysisSOP_v2.2.pdf">https://www.encodeproject.org/documents/739ca190-8d43-4a68-90ce-1a0ddfffc6fd/@@download/attachment/eCLIP_analysisSOP_v2.2.pdf</a></li>
<li> 建库原理：<img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210329085640993.png" alt="image-20210329085640993"></li>
<li>软件都在/publis/shaojf/Course/NGS/Tools/eCLIP.tools</li>
<li>X 表示cross-link的位置，在read2</li>
</ul>
<p>Read1包括barcode<br>Read 2 前几个碱基叫Random-mer（UMI），UMI碱基放在name里面<br>测序长度比读段长，要去接头</p>
<h1 id="分析路线"><a href="#分析路线" class="headerlink" title="分析路线"></a>分析路线</h1><ol>
<li>Fastqc查看质量及adapter</li>
<li>Demultiplex分离in-line barcode及UMI处理+cutadapt</li>
<li>STAR比对（adaptor一般出现在末端，STAR用local模式，有没有adaptor影响不大）</li>
<li>基于UMI删除PCR重复（Barcode一样的放到一个fastq，算作Tech rep）</li>
<li>合并技术重复（得到两个bio rep的文件）</li>
<li>提取read2</li>
<li>生成bigwig用于可视化</li>
<li>用clipper、MACS2和pureclip进行peakcalling（MACS2跑出的效果很差；clipper效果较好；pureclip特别占内存，效果一般）</li>
<li>基于input进行normalization（有些基因表达水平高，有些低，在外显子上读段多）</li>
</ol>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="fastqc"><a href="#fastqc" class="headerlink" title="fastqc"></a>fastqc</h2><p>可以指定查看哪一个adaptor，四个adaptor比例大概是20%，比较理想</p>
<h2 id="STAR"><a href="#STAR" class="headerlink" title="STAR"></a>STAR</h2><p>–alignEndsType   default: Local<br>Local—standard local alignment with soft-clipping allowed<br>EndToEnd—force end-to-end read alignment, do not soft-clip<br>Extend5pOfRead1—fully extend only the 5p of the read1, all other ends: local alignment<br>Extend5pOfReads12—fully extend only the 5p of the both read1 and read2, all other ends:local alignment</p>
<h2 id="Pureclip"><a href="#Pureclip" class="headerlink" title="Pureclip"></a>Pureclip</h2><p><a href="https://github.com/skrakau/PureCLIP">https://github.com/skrakau/PureCLIP</a><br><a href="https://pureclip.readthedocs.io/en/latest/GettingStarted/index.html">https://pureclip.readthedocs.io/en/latest/GettingStarted/index.html</a></p>
<p>会得到crosslink sites和Binding regions</p>
<h2 id="MACS2"><a href="#MACS2" class="headerlink" title="MACS2"></a>MACS2</h2><p>基于STAR比对的结果，-f BAMPE出来的fragment size=1982.3<br>为什么会这么大</p>
<h2 id="UMI-Tools"><a href="#UMI-Tools" class="headerlink" title="UMI_Tools"></a>UMI_Tools</h2><p>umi_tools dedup</p>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://www.encodeproject.org/pipelines/ENCPL357ADL/</span></span><br><span class="line"><span class="comment"># setup the environment</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cd /public/workspace/shaojf/NGS2021/shaolab2/tools/clipper</span></span><br><span class="line"><span class="comment"># conda env create -f environment3.yml</span></span><br><span class="line"><span class="comment"># conda activate clipper3</span></span><br><span class="line"><span class="comment"># pip install .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cd /public/workspace/shaojf/NGS2021/shaolab2/tools/merge_peaks-0.1.0</span></span><br><span class="line"><span class="comment"># conda create -n perl5</span></span><br><span class="line"><span class="comment"># conda activate perl5</span></span><br><span class="line"><span class="comment">###### conda install -c bioconda perl-statistics-basic perl-statistics-r perl-statistics-distributions</span></span><br><span class="line"><span class="comment"># conda install -c bioconda perl-statistics-basic=1.6611 perl-statistics-r=0.34 perl-statistics-distributions=1.02</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># conda create -n py2 python=2.7</span></span><br><span class="line"><span class="comment"># conda activate py2</span></span><br><span class="line"><span class="comment"># conda install cython scikit-learn future matplotlib bz2file</span></span><br><span class="line"><span class="comment"># conda install -c bioconda pysam</span></span><br><span class="line"><span class="comment"># cd /public/workspace/shaojf/NGS2021/shaolab2/tools/eclipdemux-master</span></span><br><span class="line"><span class="comment"># easy_install .</span></span><br><span class="line"><span class="comment"># cd ../gscripts/</span></span><br><span class="line"><span class="comment"># easy_install .</span></span><br><span class="line"><span class="comment"># cd ../makebigwigfiles-master/</span></span><br><span class="line"><span class="comment"># easy_install .</span></span><br><span class="line"><span class="comment">##### ln -s /public/workspace/shaojf/Course/NGS/Tools/eclip.tools/eclipdemux-master/eclipdemux_package/demux.py /public/workspace/shaojf/anaconda3/envs/py2/bin/eclipdemux</span></span><br><span class="line"><span class="comment"># cd /public/workspace/shaojf/anaconda3/envs/py2/bin</span></span><br><span class="line"><span class="comment"># ln -s demux_paired_end.py eclipdemux</span></span><br><span class="line"><span class="comment"># ln -s ../../clipper3/bin/clipper</span></span><br><span class="line"><span class="comment"># ln -s ../../perl5/bin/perl</span></span><br><span class="line"><span class="comment"># ln -s /public/workspace/shaojf/Course/NGS/Tools/eclip.tools/merge_peaks-0.1.0/bin/*.* .</span></span><br><span class="line"><span class="comment"># ln -s /public/workspace/shaojf/Course/NGS/Tools/eclip.tools/merge_peaks-0.1.0/bin/perl/*.* .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------&gt;</span></span><br><span class="line"><span class="comment"># 以上为环境配置过程</span></span><br><span class="line"><span class="comment"># -----------------&gt;</span></span><br><span class="line"></span><br><span class="line">conda activate py2</span><br><span class="line"><span class="comment"># py2的bin下有clipper3的软连接，可以直接用clipper3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##### ln -s /public/workspace/shaojf/anaconda3/envs/clipper3 /public/workspace/stu18230130/anaconda3/envs/clipper3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果自行安装过conda的，请执行以下操作，将shaojf用户的conda环境链接到自己的conda环境；</span></span><br><span class="line"><span class="comment"># 如果没有安装过conda，则无需执行</span></span><br><span class="line">ln -s /public/workspace/shaojf/anaconda3/envs/py2 /public/workspace/`whoami`/anaconda3/envs/py2</span><br><span class="line">wkdir=/public/workspace/shaojf/NGS2021/shaolab2</span><br><span class="line">genomefa=/public/workspace/shaojf/Course/NGS/Reference/UCSC/hg38/hg38.fa</span><br><span class="line">stardir=/public/workspace/shaojf/Course/NGS/Reference/UCSC/hg38/UCSC.hg38.STAR.v2.7.1a</span><br><span class="line">chromsize=/public/workspace/shaojf/Course/NGS/Reference/UCSC/hg38.chrom.sizes</span><br><span class="line">ncores=</span><br><span class="line">conda activate py2</span><br><span class="line"><span class="comment"># python3会报错！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############## 准备数据 ##############</span></span><br><span class="line"><span class="comment"># 用UCSC hg38.fa是因为clipper自带的注释文件是含有chr字符串的</span></span><br><span class="line"><span class="comment"># 一开会的参考序列不全，缺chr7-9</span></span><br><span class="line"><span class="comment"># STAR --runMode genomeGenerate --runThreadN 16 --genomeDir UCSC.hg38.STAR.v2.7.1a --genomeFastaFiles hg38.fa</span></span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/NGS2021/shaolab2/</span><br><span class="line"><span class="comment"># 将/public/workspace/shaojf/Course/NGS/DataSets/eCLIP下的相关数据ln -s到自己的工作路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############## fastqc查看adapter ##############</span></span><br><span class="line"><span class="comment"># yeolabbarcodes.txt</span></span><br><span class="line"><span class="comment"># 可以问做实验的人要</span></span><br><span class="line"><span class="comment"># --adapters 检测一下有没有以下的barcode</span></span><br><span class="line">mkdir <span class="variable">$wkdir</span>/1.fastqc</span><br><span class="line">time fastqc -o <span class="variable">$wkdir</span>/1.fastqc -t <span class="variable">$ncores</span> \</span><br><span class="line">  --adapters <span class="variable">$wkdir</span>/configFiles/yeolabbarcodes.txt <span class="variable">$wkdir</span>/data/RBFOX2-204-*</span><br><span class="line"><span class="comment"># 查看哪些barcode被测到</span></span><br><span class="line"><span class="comment"># grep -A &lt;显示行数&gt;: 除了显示符合范本样式的那一列之外，并显示该行之后的内容。</span></span><br><span class="line"><span class="comment"># barcode从第一个碱基开始，用-A 2输出第一行</span></span><br><span class="line">unzip <span class="variable">$wkdir</span>/1.fastqc/RBFOX2-204-CLIP_S1_R1_fastqc.zip</span><br><span class="line">grep -A 2 <span class="string">&quot;Adapter Content&quot;</span> <span class="variable">$wkdir</span>/1.fastqc/RBFOX2-204-CLIP_S1_R1_fastqc/fastqc_data.txt | \</span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;for(i=2;i&lt;=13;i++)&#123;ids[i]=&quot;A&quot;&#125;&#125;&#123;for(i=2;i&lt;=13;i++)&#123;if($i&gt;10 &amp;&amp; NR&gt;2)&#123;print ids[i]&quot;\t&quot;$i&#125;else&#123;ids[i]=$i&#125;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化ids数组，如果数值大于10且行数&gt;2，根据数组下标打印ids</span></span><br><span class="line"><span class="comment"># awk-出现的比例大于10%的，打印出来</span></span><br><span class="line"><span class="comment"># A01     17.773141608744858</span></span><br><span class="line"><span class="comment"># B06     14.295544471332855</span></span><br><span class="line"><span class="comment"># C01     15.382434142104247</span></span><br><span class="line"><span class="comment"># D8f     17.92395807937699</span></span><br><span class="line"><span class="comment"># firefox $wkdir/1.fastqc/RBFOX2-204-*.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############## adapter分离及切除 ##############</span></span><br><span class="line"><span class="comment"># 时间很长，可从课程目录建立软链接</span></span><br><span class="line">mkdir <span class="variable">$wkdir</span>/2.demultiplexed/</span><br><span class="line"><span class="comment"># prefix=RBFOX2-204-CLIP_S1</span></span><br><span class="line"><span class="comment"># cd $wkdir</span></span><br><span class="line"><span class="comment"># --dataset 不能用绝对路径。。。。因为程序只能调用相对路径（前面会自己加./）</span></span><br><span class="line">datapre=RBFOX2</span><br><span class="line"><span class="keyword">for</span> prefix <span class="keyword">in</span> RBFOX2-204-CLIP_S1 RBFOX2-204-INPUT_S2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  name=`<span class="built_in">echo</span> <span class="variable">$prefix</span> | cut -f 1 -d <span class="string">&quot;_&quot;</span> | cut -f 3 -d <span class="string">&quot;-&quot;</span>`</span><br><span class="line">  eclipdemux --newname <span class="variable">$name</span> --dataset 2.demultiplexed/<span class="variable">$datapre</span> \</span><br><span class="line">    --expectedbarcodeida A01 --expectedbarcodeidb B06 \</span><br><span class="line">    --fastq_1 <span class="variable">$wkdir</span>/data/<span class="variable">$&#123;prefix&#125;</span>_R1.fastq.gz \</span><br><span class="line">    --fastq_2 <span class="variable">$wkdir</span>/data/<span class="variable">$&#123;prefix&#125;</span>_R2.fastq.gz \</span><br><span class="line">    --barcodesfile <span class="variable">$wkdir</span>/configFiles/yeolabbarcodes_20170101.fasta \</span><br><span class="line">    --length 5 --metrics <span class="variable">$wkdir</span>/2.demultiplexed/<span class="variable">$prefix</span>.metrics.txt &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把UMI写到fastq名字行</span></span><br><span class="line">ll demultiplexed/*&#123;A01,B06,C01,D8f&#125;*</span><br><span class="line"><span class="comment"># samples:</span></span><br><span class="line"><span class="comment">#   -</span></span><br><span class="line"><span class="comment">#     - ip_read:</span></span><br><span class="line"><span class="comment">#       name: rep1_clip</span></span><br><span class="line"><span class="comment">#       barcodeids: [A01, B06]</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#     - input_read: （NIL开头的，检测不到任何barcode）</span></span><br><span class="line"><span class="comment">#       name: rep1_input</span></span><br><span class="line"><span class="comment">#       barcodeids: [NIL, NIL]</span></span><br><span class="line"><span class="comment">#   -</span></span><br><span class="line"><span class="comment">#     - ip_read:</span></span><br><span class="line"><span class="comment">#       name: rep2_clip</span></span><br><span class="line"><span class="comment">#       barcodeids: [C01, D8f]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     - input_read:</span></span><br><span class="line"><span class="comment">#       name: rep2_input</span></span><br><span class="line"><span class="comment">#       barcodeids: [NIL, NIL]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下省略，太慢了。所以在STAR步骤选local比对</span></span><br><span class="line"><span class="comment"># Cutadapt	round	1</span></span><br><span class="line"><span class="comment"># Takes output from demultiplexed files. Run to	trim off both 5’ and 3’	adapters on	both read</span></span><br><span class="line"><span class="comment"># mkdir clean</span></span><br><span class="line"><span class="comment"># for prefix in RBFOX2-204-CLIP_S1 RBFOX2-204-INPUT_S2</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment"># 	cutadapt -f fastq --match-read-wildcards --times 1 -e 0.1 -O 1 \</span></span><br><span class="line"><span class="comment"># 		--quality-cutoff 6 -m 18 -a NNNNNAGATCGGAAGAGCACACGTCTGAACTCCAGTCAC \</span></span><br><span class="line"><span class="comment"># 		-g CTTCCGATCTACAAGTT -g CTTCCGATCTTGGTCCT \</span></span><br><span class="line"><span class="comment"># 		-A AACTTGTAGATCGGA -A AGGACCAAGATCGGA -A ACTTGTAGATCGGAA \</span></span><br><span class="line"><span class="comment"># 		-A GGACCAAGATCGGAA -A CTTGTAGATCGGAAG -A GACCAAGATCGGAAG \</span></span><br><span class="line"><span class="comment"># 		-A TTGTAGATCGGAAGA -A ACCAAGATCGGAAGA -A TGTAGATCGGAAGAG \</span></span><br><span class="line"><span class="comment"># 		-A CCAAGATCGGAAGAG -A GTAGATCGGAAGAGC -A CAAGATCGGAAGAGC \</span></span><br><span class="line"><span class="comment"># 		-A TAGATCGGAAGAGCG -A AAGATCGGAAGAGCG -A AGATCGGAAGAGCGT \</span></span><br><span class="line"><span class="comment"># 		-A GATCGGAAGAGCGTC -A ATCGGAAGAGCGTCG -A TCGGAAGAGCGTCGT \</span></span><br><span class="line"><span class="comment"># 		-A CGGAAGAGCGTCGTG -A GGAAGAGCGTCGTGT \</span></span><br><span class="line"><span class="comment"># 		-o clean/$prefix.R1.adapterTrim.fastq.gz \</span></span><br><span class="line"><span class="comment"># 		-p clean/$prefix.R1.adapterTrim.fastq.gz \</span></span><br><span class="line"><span class="comment"># 		2.demultiplexed/$&#123;prefix&#125;_R1.fastq.gz 2.demultiplexed/$&#123;prefix&#125;_R2.fastq.gz \</span></span><br><span class="line"><span class="comment"># 		&gt; $prefix.adapterTrim.metrics &amp;</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############## STAR比对 ##############</span></span><br><span class="line"><span class="comment"># 时间较长，且占资源较多，可从课程目录建立软链接</span></span><br><span class="line"><span class="comment"># --alignEndsType Local</span></span><br><span class="line"></span><br><span class="line">mkdir -p <span class="variable">$wkdir</span>/3.starmapping</span><br><span class="line"><span class="keyword">for</span> fqpre <span class="keyword">in</span> RBFOX2.CLIP.&#123;A01,B06,C01,D8f&#125; RBFOX2.INPUT.NIL</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  lib=`<span class="built_in">echo</span> <span class="variable">$fqpre</span> | awk -F <span class="string">&quot;.&quot;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>`</span><br><span class="line">  STAR --runThreadN <span class="variable">$ncores</span> \</span><br><span class="line">    --runMode alignReads \</span><br><span class="line">    --genomeDir <span class="variable">$stardir</span> \</span><br><span class="line">    --readFilesIn <span class="variable">$wkdir</span>/2.demultiplexed/<span class="variable">$&#123;fqpre&#125;</span>.r1.fq.gz \</span><br><span class="line">      <span class="variable">$wkdir</span>/2.demultiplexed/<span class="variable">$&#123;fqpre&#125;</span>.r2.fq.gz \</span><br><span class="line">    --readFilesCommand zcat \</span><br><span class="line">    --outFileNamePrefix <span class="variable">$wkdir</span>/3.starmapping/<span class="variable">$&#123;fqpre&#125;</span>. \</span><br><span class="line">    --outSAMunmapped Within --outFilterMultimapNmax 1 \</span><br><span class="line">    --outFilterMultimapScoreRange 1 \</span><br><span class="line">    --outSAMtype BAM Unsorted \</span><br><span class="line">    --outSAMattributes All \</span><br><span class="line">    --outFilterScoreMin 10 \</span><br><span class="line">    --outSAMattrRGline ID:<span class="variable">$lib</span> --alignEndsType Local</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############## 根据UMI删除PCR重复 #############</span></span><br><span class="line">mkdir -p <span class="variable">$wkdir</span>/4.rmDupbam</span><br><span class="line"><span class="keyword">for</span> pre <span class="keyword">in</span> RBFOX2.CLIP.&#123;A01,B06,C01,D8f&#125; RBFOX2.INPUT.NIL</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  barcode_collapse_pe.py --bam <span class="variable">$wkdir</span>/3.starmapping/<span class="variable">$pre</span>.Aligned.out.bam \</span><br><span class="line">    --out_file <span class="variable">$wkdir</span>/4.rmDupbam/<span class="variable">$pre</span>.rmDup.bam \</span><br><span class="line">    --metrics_file <span class="variable">$wkdir</span>/4.rmDupbam/<span class="variable">$pre</span>.metrics &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># UMItools的标记与eclipdemux不同，不可交叉混用</span></span><br><span class="line"><span class="comment"># UMItools是把UMI加在: @HISEQ:87:00000000_GGTT read1</span></span><br><span class="line"><span class="comment"># eclipdemux加在：@GGTT;HISEQ:87:00000000 read1</span></span><br><span class="line"><span class="comment"># https://github.com/CGATOxford/UMI-tools/blob/master/doc/QUICK_START.md</span></span><br><span class="line"><span class="comment"># 取3-7是因为前几个base测序质量不好</span></span><br><span class="line"><span class="comment"># UMI is bases 3-7, bases 1-2 and 7-8 are the sample barcode and need to be removed</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @HISEQ:87:00000000 read1</span></span><br><span class="line"><span class="comment"># AAGGTTGCTGATTGGATGGGCTAG</span></span><br><span class="line"><span class="comment"># +</span></span><br><span class="line"><span class="comment"># DA1AEBFGGCG01DFH00B1FF0B</span></span><br><span class="line"><span class="comment"># will become:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  @HISEQ:87:00000000_GGTT read1</span></span><br><span class="line"><span class="comment">#  TGATTGGATGGGCTAG</span></span><br><span class="line"><span class="comment">#  + </span></span><br><span class="line"><span class="comment">#  1AFGGCG01DFH00B1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############## 合并并排序 #############</span></span><br><span class="line">       <span class="comment"># $&#123;parameter#word&#125;</span></span><br><span class="line">       <span class="comment"># $&#123;parameter##word&#125;</span></span><br><span class="line">       <span class="comment">#        Remove  matching  prefix  pattern.  The word is expanded to produce a pattern just as in pathname expansion.  If the pattern matches the beginning of the value of parameter, then the result of</span></span><br><span class="line">       <span class="comment">#        the expansion is the expanded value of parameter with the shortest matching pattern (the ``#&#x27;&#x27; case) or the longest matching pattern (the ``##&#x27;&#x27; case) deleted.  If parameter is  @  or  *,  the</span></span><br><span class="line">       <span class="comment">#        pattern  removal  operation  is  applied  to each positional parameter in turn, and the expansion is the resultant list.  If parameter is an array variable subscripted with @ or *, the pattern</span></span><br><span class="line">       <span class="comment">#        removal operation is applied to each member of the array in turn, and the expansion is the resultant list.</span></span><br><span class="line"></span><br><span class="line">       <span class="comment"># $&#123;parameter%word&#125;</span></span><br><span class="line">       <span class="comment"># $&#123;parameter%%word&#125;</span></span><br><span class="line">       <span class="comment">#        Remove matching suffix pattern.  The word is expanded to produce a pattern just as in pathname expansion.  If the pattern matches a trailing portion of the expanded value  of  parameter,  then</span></span><br><span class="line">       <span class="comment">#        the result of the expansion is the expanded value of parameter with the shortest matching pattern (the ``%&#x27;&#x27; case) or the longest matching pattern (the ``%%&#x27;&#x27; case) deleted.  If parameter is @</span></span><br><span class="line">       <span class="comment">#        or *, the pattern removal operation is applied to each positional parameter in turn, and the expansion is the resultant list.  If parameter is an array variable subscripted with @  or  *,  the</span></span><br><span class="line">       <span class="comment">#        pattern removal operation is applied to each member of the array in turn, and the expansion is the resultant list.</span></span><br><span class="line"><span class="comment"># echo $&#123;pair%%:*&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把A01到B06合并成rep1</span></span><br><span class="line">mkdir -p <span class="variable">$wkdir</span>/5.mergedbam</span><br><span class="line"><span class="keyword">for</span> pairs <span class="keyword">in</span> rep1:A01:B06 rep2:C01:D8f</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  pre=`<span class="built_in">echo</span> <span class="variable">$pairs</span> | cut -d <span class="string">&quot;:&quot;</span> -f 1`</span><br><span class="line">  barcode1=`<span class="built_in">echo</span> <span class="variable">$pairs</span> | cut -d <span class="string">&quot;:&quot;</span> -f 2`</span><br><span class="line">  barcode2=`<span class="built_in">echo</span> <span class="variable">$pairs</span> | cut -d <span class="string">&quot;:&quot;</span> -f 3`</span><br><span class="line">  samtools merge -n -@ <span class="variable">$ncores</span> <span class="variable">$wkdir</span>/5.mergedbam/RBFOX2.CLIP.<span class="variable">$pre</span>.bam \</span><br><span class="line">    <span class="variable">$wkdir</span>/4.rmDupbam/RBFOX2.CLIP.<span class="variable">$barcode1</span>.rmDup.bam \</span><br><span class="line">    <span class="variable">$wkdir</span>/4.rmDupbam/RBFOX2.CLIP.<span class="variable">$barcode2</span>.rmDup.bam &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############## 提取read2 #############</span></span><br><span class="line"><span class="comment"># samtools flags 128</span></span><br><span class="line"><span class="comment"># -f 128 把read2提取出来做peak calling</span></span><br><span class="line">mkdir -p <span class="variable">$wkdir</span>/6.read2bam</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$wkdir</span>/5.mergedbam/*.bam <span class="variable">$wkdir</span>/4.rmDupbam/RBFOX2.INPUT.NIL.rmDup.bam</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  filename=`basename <span class="variable">$i</span>`</span><br><span class="line">  samtools view -f 128 -@ <span class="variable">$ncores</span> \</span><br><span class="line">    -bo <span class="variable">$wkdir</span>/6.read2bam/<span class="variable">$filename</span> <span class="variable">$i</span> &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$wkdir</span>/6.read2bam/*.bam</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  filename=`basename <span class="variable">$file</span> | sed <span class="string">&#x27;s/.bam//&#x27;</span>`</span><br><span class="line">  samtools sort -@ <span class="variable">$ncores</span> -o <span class="variable">$wkdir</span>/6.read2bam/<span class="variable">$filename</span>.srt.bam <span class="variable">$file</span> &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$wkdir</span>/6.read2bam/*.srt.bam</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  samtools index <span class="variable">$file</span> &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############## 生成bigwig #############</span></span><br><span class="line"><span class="comment"># 与后续clipper没有先后关系，后台运行即可</span></span><br><span class="line"><span class="comment"># --direction r 需要标记链的方向（链特异性建库）</span></span><br><span class="line"><span class="comment"># samtools view -H $wkdir/5.mergedbam/RBFOX2.CLIP.rep1.bam | \</span></span><br><span class="line"><span class="comment"># 	awk &#x27;$1==&quot;@SQ&quot;&#123;print $2&quot;\t&quot;$3&#125;&#x27; | \</span></span><br><span class="line"><span class="comment"># 	sed &#x27;s?SN:??;s?LN:??&#x27; &gt; hg38.chrom.size</span></span><br><span class="line">mkdir -p <span class="variable">$wkdir</span>/7.bigwigfile</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$wkdir</span>/6.read2bam/*.srt.bam</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  filename=`basename <span class="variable">$file</span> | sed <span class="string">&#x27;s/.srt.bam//&#x27;</span>`</span><br><span class="line">  makebigwigfiles --bam <span class="variable">$file</span> --genome <span class="variable">$chromsize</span> \</span><br><span class="line">    --bw_pos <span class="variable">$wkdir</span>/7.bigwigfile/<span class="variable">$filename</span>.r2.norm.pos.bw \</span><br><span class="line">    --bw_neg <span class="variable">$wkdir</span>/7.bigwigfile/<span class="variable">$filename</span>.r2.norm.neg.bw \</span><br><span class="line">    --direction r &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以用deeptools的bamCoverage来生成bigwig</span></span><br><span class="line"><span class="comment"># for file in $wkdir/6.read2bam/*.bam</span></span><br><span class="line"><span class="comment"># do</span></span><br><span class="line"><span class="comment"># 	samtools index $file</span></span><br><span class="line"><span class="comment"># 	bamCoverage -b mergedbam/$prefix.r2.bam \</span></span><br><span class="line"><span class="comment"># 		-o bigwigfile/$prefix.r2.norm.pos.bw \</span></span><br><span class="line"><span class="comment"># 		-p 2 --binSize 10 --smoothLength 100 \</span></span><br><span class="line"><span class="comment"># 		--normalizeUsing CPM --filterRNAstrand forward &amp;</span></span><br><span class="line"><span class="comment"># 	bamCoverage -b mergedbam/$prefix.r2.bam \</span></span><br><span class="line"><span class="comment"># 		-o bigwigfile/$prefix.r2.norm.neg.bw \</span></span><br><span class="line"><span class="comment"># 		-p 2 --binSize 10 --smoothLength 100 \</span></span><br><span class="line"><span class="comment"># 		--normalizeUsing CPM --filterRNAstrand reverse &amp;</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line"><span class="comment"># 如果想把负链为负数，则可以用bigwigtowig结合awk运算，再转回bigwig</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############## clipper生成peak #############</span></span><br><span class="line"><span class="comment"># clipper依赖特定的scikit-learn，单独给它建立一个conda env，但可以用软链接链到py2环境</span></span><br><span class="line"><span class="comment"># 必须为sorted bam以及index过的</span></span><br><span class="line"><span class="comment"># hg38会报错，但GRCh38_v29则不会，无解</span></span><br><span class="line"><span class="comment"># clipper很慢，用nohup或screen防止中断</span></span><br><span class="line"><span class="comment"># -g ENSG00000166579 此处用一个基因作为示例，可以快速得到结果</span></span><br><span class="line">mkdir -p <span class="variable">$wkdir</span>/8.peakcalling/</span><br><span class="line"><span class="keyword">for</span> rep <span class="keyword">in</span> rep1 rep2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  clipper -b <span class="variable">$wkdir</span>/6.read2bam/RBFOX2.CLIP.<span class="variable">$rep</span>.srt.bam \</span><br><span class="line">    -s GRCh38_v29 \</span><br><span class="line">    -o <span class="variable">$wkdir</span>/8.peakcalling/RBFOX2.<span class="variable">$rep</span>.peaks.bed \</span><br><span class="line">    --processors <span class="variable">$ncores</span> -g ENSG00000166579</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># -s 支持的物种名称</span></span><br><span class="line"><span class="comment"># ll /public/workspace/shaojf/anaconda3/envs/clipper3/lib/python3.7/site-packages/clipper/data/</span></span><br><span class="line"><span class="comment"># ll /public/workspace/shaojf/anaconda3/envs/clipper3/lib/python3.7/site-packages/clipper/data/regions</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># alternative peak calling with MACS2</span></span><br><span class="line"><span class="comment"># -f BAMPE 不能加，为什么呢（思考一下？）</span></span><br><span class="line"><span class="comment"># 以r2.bam为输入会报错，无法读入read，只能用初始的比对结果</span></span><br><span class="line">mkdir -p <span class="variable">$wkdir</span>/8.peakcalling/MACS2</span><br><span class="line"><span class="keyword">for</span> rep <span class="keyword">in</span> rep1 rep2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  macs2 callpeak -g hs --keep-dup all \</span><br><span class="line">    -t <span class="variable">$wkdir</span>/5.mergedbam/RBFOX2.CLIP.<span class="variable">$rep</span>.bam \</span><br><span class="line">    -c <span class="variable">$wkdir</span>/4.rmDupbam/RBFOX2.INPUT.NIL.rmDup.bam \</span><br><span class="line">    -n <span class="variable">$wkdir</span>/8.peakcalling/MACS2/RBFOX2.<span class="variable">$rep</span>.macs2 &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############## pureclip生成peak #############</span></span><br><span class="line"><span class="comment"># pureclip [OPTIONS] &lt;-i BAM FILE&gt; &lt;-bai BAI FILE&gt; &lt;-g GENOME FILE&gt; &lt;-o OUTPUT BED FILE&gt;</span></span><br><span class="line"><span class="comment"># 超级占内存！！！</span></span><br><span class="line"><span class="comment"># 会死机！！！</span></span><br><span class="line"><span class="comment"># 运行之前top一下看看当前正在运行的命令</span></span><br><span class="line"><span class="comment"># 切勿在server上运行</span></span><br><span class="line"><span class="comment"># -iv, --inter STR</span></span><br><span class="line"><span class="comment">#           Genomic chromosomes to learn HMM parameters, e.g. &#x27;chr1;chr2;chr3&#x27;. Contigs have to be in the same order as</span></span><br><span class="line"><span class="comment">#           in BAM file. Useful to reduce runtime and memory consumption. Default: all contigs from reference file are</span></span><br><span class="line"><span class="comment">#           used (useful when applying to transcript-wise alignments or poor data).</span></span><br><span class="line">mkdir -p <span class="variable">$wkdir</span>/8.peakcalling/pureclip.peaks</span><br><span class="line"><span class="keyword">for</span> rep <span class="keyword">in</span> rep1 rep2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  pureclip -i <span class="variable">$wkdir</span>/6.read2bam/RBFOX2.CLIP.<span class="variable">$rep</span>.srt.bam \</span><br><span class="line">    -bai <span class="variable">$wkdir</span>/6.read2bam/RBFOX2.CLIP.<span class="variable">$rep</span>.srt.bam.bai \</span><br><span class="line">    -ibam <span class="variable">$wkdir</span>/6.read2bam/RBFOX2.INPUT.NIL.rmDup.srt.bam \</span><br><span class="line">    -ibai <span class="variable">$wkdir</span>/6.read2bam/RBFOX2.INPUT.NIL.rmDup.srt.bam.bai \</span><br><span class="line">    -g <span class="variable">$genomefa</span> \</span><br><span class="line">    -o <span class="variable">$wkdir</span>/8.peakcalling/pureclip.peaks/RBFOX2.CLIP.<span class="variable">$rep</span>.called_crosslinksites.bed \</span><br><span class="line">    -or <span class="variable">$wkdir</span>/8.peakcalling/pureclip.peaks/RBFOX2.CLIP.<span class="variable">$rep</span>.called_bindingregions.bed \</span><br><span class="line">    -nt <span class="variable">$ncores</span> -iv <span class="string">&#x27;chr1;chr10;chr20&#x27;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############## Input normalization #############</span></span><br><span class="line">mkdir -p <span class="variable">$wkdir</span>/9.normalization</span><br><span class="line"><span class="keyword">for</span> rep <span class="keyword">in</span> rep1 rep2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  samtools view -cF 4 <span class="variable">$wkdir</span>/6.read2bam/RBFOX2.CLIP.<span class="variable">$rep</span>.srt.bam \</span><br><span class="line">    &gt; <span class="variable">$wkdir</span>/9.normalization/RBFOX2.CLIP.<span class="variable">$rep</span>.mapped_readnum.txt &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">samtools view -cF 4 <span class="variable">$wkdir</span>/6.read2bam/RBFOX2.INPUT.NIL.rmDup.srt.bam \</span><br><span class="line">    &gt; <span class="variable">$wkdir</span>/9.normalization/RBFOX2.INPUT.NIL.mapped_readnum.txt &amp;</span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rep <span class="keyword">in</span> rep1 rep2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  overlap_peakfi_with_bam.pl \</span><br><span class="line">    <span class="variable">$wkdir</span>/6.read2bam/RBFOX2.CLIP.<span class="variable">$rep</span>.srt.bam \</span><br><span class="line">    <span class="variable">$wkdir</span>/6.read2bam/RBFOX2.INPUT.NIL.rmDup.srt.bam \</span><br><span class="line">    <span class="variable">$wkdir</span>/8.peakcalling/RBFOX2.<span class="variable">$rep</span>.peaks.bed \</span><br><span class="line">    <span class="variable">$wkdir</span>/9.normalization/RBFOX2.CLIP.<span class="variable">$rep</span>.mapped_readnum.txt \</span><br><span class="line">  <span class="variable">$wkdir</span>/9.normalization/RBFOX2.INPUT.NIL.mapped_readnum.txt \</span><br><span class="line">    <span class="variable">$wkdir</span>/9.normalization/RBFOX2.<span class="variable">$rep</span>.peaks.normed.bed &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MEME-chip不大适合RNA peak的分析，但也只有这种方法</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>eCLIP</category>
      </categories>
      <tags>
        <tag>eCLIP</tag>
      </tags>
  </entry>
  <entry>
    <title>scATAC-seq Analysis</title>
    <url>/2021/04/08/scATAC-seq-Analysis/</url>
    <content><![CDATA[<p>教程：<a href="http://xuzhougeng.top/tags/atac-seq">http://xuzhougeng.top/tags/atac-seq</a></p>
<h1 id="ArchR-install"><a href="#ArchR-install" class="headerlink" title="ArchR install"></a>ArchR install</h1><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">conda create -n ArchR</span><br><span class="line">source activate ArchR</span><br><span class="line">conda install -<span class="built_in">c</span> conda-forge r-base <span class="comment">###R version 4.0.3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!requireNamespace(<span class="string">&quot;devtools&quot;</span>, quietly = <span class="literal">TRUE</span>)) install.packages(<span class="string">&quot;devtools&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> (!requireNamespace(<span class="string">&quot;BiocManager&quot;</span>, quietly = <span class="literal">TRUE</span>)) install.packages(<span class="string">&quot;BiocManager&quot;</span>)</span><br><span class="line">devtools::install_github(<span class="string">&quot;GreenleafLab/ArchR&quot;</span>, ref=<span class="string">&quot;master&quot;</span>, repos = BiocManager::repositories())</span><br><span class="line"></span><br><span class="line">library(ArchR)</span><br><span class="line">ArchR::installExtraPackages()</span><br><span class="line">addArchRGenome(<span class="string">&quot;hg19&quot;</span>)</span><br></pre></td></tr></table></figure>
<center><img src="/img/scATAC/workflow.jpg" alt="workflow" style="zoom:100%;" /></center>

<h1 id="ArchR的输入文件类型"><a href="#ArchR的输入文件类型" class="headerlink" title="ArchR的输入文件类型"></a>ArchR的输入文件类型</h1><p>ArchR主要以scATAC-seq原始数据经上游处理后的两种常见输出文件(BAM,fragment)作为输入。  </p>
<ol>
<li>Fragment文件记录着scATAC-seq的fragment以及对应的细胞ID，每一行都是一条记录，该文件需要是tabix(见注1)排序并建立索引保证能被高效读取。以10XGenomics的CellRanger软件为例，它的输出文件是fragments;    </li>
<li>BAM文件则是二进制格式下的tabix排序文件，记录着scATAC-seq的fragment、原始数据、细胞条形码和其他信息。具体使用何种文件作为输入取决于你的上游处理流程。sci-ATAC-seq流程则输出BAM文件。  </li>
</ol>
<h2 id="创建Arrow文件"><a href="#创建Arrow文件" class="headerlink" title="创建Arrow文件"></a>创建Arrow文件</h2><p>对于每个样本，此步骤将：  </p>
<ol>
<li>从提供的输入文件中读取可访问的片段。  </li>
<li>计算每个细胞的质量控制信息（即TSS富集得分和核小体信息，ArchR默认会过滤TSS富集得分低于4或唯一比对数小于1000（也就是保留TSS富集得分大于4且唯一比对数大于1000的细胞））。  </li>
<li>根据质量控制参数过滤单元。  </li>
<li>使用500 bp的条带创建全基因组的TileMatrix。  </li>
<li>使用<code>geneAnnotation</code>调用时定义的自定义创建GeneScoreMatrix <code>addArchRGenome()</code>。  </li>
</ol>
<p>创建Arrow文件会在当前目录下生成一个”QualityControl”目录，这里面包括2个和样本相关的图。第一个图展示log10(unique nuclear fragments) vs TSS enrichment score, 虚线表示过滤阈值。第二图注释fragment大小分布图。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library(ArchR)</span><br><span class="line">addArchRGenome(<span class="string">&quot;hg19&quot;</span>) <span class="comment"># hg38, mm9, mm10</span></span><br><span class="line">addArchRThreads(threads = <span class="number">5</span>) <span class="comment">###You can modify this value;</span></span><br><span class="line"></span><br><span class="line">setwd(<span class="string">&quot;/home/data/vip8t02/MyCourse/NGS-02/scATACseq/&quot;</span>) <span class="comment">###Set up your own workspace;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###输入文件</span></span><br><span class="line">inputFiles &lt;- getInputFiles(paths = <span class="string">&quot;./Data/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">###生成arrowfiles</span></span><br><span class="line"><span class="comment"># filterFrags is no longer a valid input. Please use minFrags! 参数名已更改，但也可以运行</span></span><br><span class="line"></span><br><span class="line">ArrowFiles &lt;- createArrowFiles(</span><br><span class="line">  inputFiles = inputFiles,</span><br><span class="line">  sampleNames = <span class="built_in">names</span>(inputFiles),</span><br><span class="line">  filterTSS = <span class="number">4</span>, <span class="comment">#The minimum numeric transcription start site (TSS) enrichment score required for a cell to pass filtering for use in downstream analyses.</span></span><br><span class="line">  filterFrags = <span class="number">1000</span>, <span class="comment">#The minimum number of mapped ATAC-seq fragments required per cell to pass filtering for use in downstream analyses.</span></span><br><span class="line">  addTileMat = <span class="literal">TRUE</span>,</span><br><span class="line">  addGeneScoreMat = <span class="literal">TRUE</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认一下它确实是一个Arrow file路径的向量</span></span><br><span class="line">ArrowFiles</span><br></pre></td></tr></table></figure>
<ul>
<li>细胞质控<br>scATAC-seq数据的严格质量控制（QC）对于消除低质量细胞的作用至关重要。在ArchR中，我们考虑数据的三个特征：  </li>
</ul>
<ol>
<li>独特核片段的数量（即不映射到线粒体DNA）。  </li>
<li>信噪比。低的信噪比通常归因于死亡或垂死的细胞，这些细胞具有脱色的DNA，可以在全基因组范围内进行随机转座。  </li>
<li>片段大小分布。由于核小体的周期性，我们预计会看到碎片消失，这些碎片是包裹在核小体周围的DNA长度（大约147 bp）。  </li>
</ol>
<h1 id="使用ArchR推断Doublet"><a href="#使用ArchR推断Doublet" class="headerlink" title="使用ArchR推断Doublet"></a>使用ArchR推断Doublet</h1><p>单细胞数据分析中的一个重要问题就是”doublet”对分析的影响。”doublet”指的是单个液滴(droplet)捕获了一个条形码珠(barcode bead)和多个细胞核。这会导致原本来自于多个细胞的read结果被当成一个细胞，结果原来两个细胞被平均成一个细胞。  </p>
<p>我们使用ArchR的<code>addDoubleScores()</code>函数来移除doublet。对于教程中使用的数据，每个样本大约需要2到5分钟时间进行处理，最后每个细胞的doublet得分会添加到Arrow文件中。 。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">doubScores &lt;- addDoubletScores(</span><br><span class="line">  input = ArrowFiles,</span><br><span class="line">  k = <span class="number">10</span>, <span class="comment">#Refers to how many cells near a &quot;pseudo-doublet&quot; to count.The number of cells neighboring a simulated doublet to be considered as putative doublets.</span></span><br><span class="line">  knnMethod = <span class="string">&quot;UMAP&quot;</span>, <span class="comment">#Refers to the embedding to use for nearest neighbor search with doublet projection.The name of the dimensionality reduction method to be used for k-nearest neighbors calculation. Possible values are &quot;UMAP&quot; or &quot;LSI&quot;.</span></span><br><span class="line">  LSIMethod = <span class="number">1</span> <span class="comment">#The list of parameters to pass to the IterativeLSI() function. See IterativeLSI()</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>addDoubletScores在计算doublet得分的时候，还会在”QualityControl”中为每个样本生成三张图（一个样本一个PDF）  </p>
<ol>
<li>Doublet Enrichments: 假设doublet符合均匀分布，那么每个细胞附近的模拟doublet数目都差不多。如果一个细胞附近相对于其他细胞有更多的doublet, 就认为它富集了doublet  </li>
<li>Doublet Score: 基于均匀分布假设，计算doublet富集显著性，以-log10(binomial adjusted p-value)进行展示。我们更推荐根据doublet enrichment鉴定doublet。  </li>
<li>Doublet Density: 模拟的duoblet在二维空间的投影，我们可以直观的了解我们模拟的doublet的分布情况。</li>
</ol>
<h1 id="创建ArchRProject"><a href="#创建ArchRProject" class="headerlink" title="创建ArchRProject"></a>创建ArchRProject</h1><h2 id="创建一个ArchRProject"><a href="#创建一个ArchRProject" class="headerlink" title="创建一个ArchRProject"></a>创建一个ArchRProject</h2><p>ArchRProject对象允许我们将多个Arrow文件整理到单个项目之中。ArchRProject比较小能够直接存放在内存中。通过操作ArchRProject，我们能够快速读取Arrow文件里的数据，并将修改后的数据写回到Arrow文件里。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">projPBMC_1 &lt;- ArchRProject(</span><br><span class="line">  ArrowFiles = ArrowFiles,</span><br><span class="line">  outputDirectory = <span class="string">&quot;PBMC&quot;</span>,</span><br><span class="line">  copyArrows = <span class="literal">TRUE</span> <span class="comment">#This is recommened so that if you modify the Arrow files you have an original copy for later usage.</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">projPBMC_1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>outputDirectory: 输出目录<br>samples： 样本名<br>sampleColData: 记录每个样本的元信息<br>cellColData: 记录每个细胞的元信息，第二章计算的”DoubleEnrichment”,”DoubletScore”就存放在此处<br>numberOfCells: 项目总的合格细胞数，也就是不包括之前没有通过质控，或者被认为doublet的细胞<br>medianTSS/medianFrags: 所有细胞的TSS值和Fragments数的中位数  </p>
</blockquote>
<h2 id="操作ArchRProject对象"><a href="#操作ArchRProject对象" class="headerlink" title="操作ArchRProject对象"></a>操作ArchRProject对象</h2><h3 id="检查矩阵数据"><a href="#检查矩阵数据" class="headerlink" title="检查矩阵数据"></a>检查矩阵数据</h3><p>检查当前的ArchRProject中存放了哪些矩阵数据，这些数据可以在下游分析中使用。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">getAvailableMatrices(projPBMC_1)</span><br><span class="line"><span class="comment"># &quot;GeneScoreMatrix&quot; &quot;TileMatrix&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="绘制质控信息和TSS富集得分的对比图"><a href="#绘制质控信息和TSS富集得分的对比图" class="headerlink" title="绘制质控信息和TSS富集得分的对比图"></a>绘制质控信息和TSS富集得分的对比图</h3><p>该图的主要作用是找到高质量的细胞。你可能会注意到一些细胞已经在我们之前创建Arrow文件时被设置的阈值filterTSS, filterFargs过滤掉了。然而，如果我们觉得之前的质控过滤对于这个样本不太合适，我们可以根据该图调整阈值，有必要的话还可以重新产生Arrow文件。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 先用getCellColData提取我们需要的两列，其中nFrages需要进行log10运算</span></span><br><span class="line">df &lt;- getCellColData(projPBMC_1, select = <span class="built_in">c</span>(<span class="string">&quot;log10(nFrags)&quot;</span>, <span class="string">&quot;TSSEnrichment&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">## 基于TSS富集得分和唯一比对进行绘图，函数ggPoint是ArchR对ggplot2的点图相关函数的封装。</span></span><br><span class="line">pdf(<span class="string">&quot;TSS-vs-Frags.pdf&quot;</span>)</span><br><span class="line">p &lt;- ggPoint(</span><br><span class="line">  x = df[,<span class="number">1</span>],</span><br><span class="line">  y = df[,<span class="number">2</span>],</span><br><span class="line">  colorDensity = <span class="literal">TRUE</span>,</span><br><span class="line">  continuousSet = <span class="string">&quot;sambaNight&quot;</span>,</span><br><span class="line">  xlabel = <span class="string">&quot;Log10 Unique Fragments&quot;</span>,</span><br><span class="line">  ylabel = <span class="string">&quot;TSS Enrichment&quot;</span>,</span><br><span class="line">  xlim = <span class="built_in">c</span>(log10(<span class="number">500</span>), quantile(df[,<span class="number">1</span>], probs = <span class="number">0.99</span>)),</span><br><span class="line">  ylim = <span class="built_in">c</span>(<span class="number">0</span>, quantile(df[,<span class="number">2</span>], probs = <span class="number">0.99</span>))</span><br><span class="line">) + geom_hline(yintercept = <span class="number">4</span>, lty = <span class="string">&quot;dashed&quot;</span>) + geom_vline(xintercept = <span class="number">3</span>, lty = <span class="string">&quot;dashed&quot;</span>)</span><br><span class="line">p</span><br><span class="line"></span><br><span class="line">dev.off()</span><br></pre></td></tr></table></figure>
<h3 id="为ArchRProject中的样本统计绘图"><a href="#为ArchRProject中的样本统计绘图" class="headerlink" title="为ArchRProject中的样本统计绘图"></a>为ArchRProject中的样本统计绘图</h3><p>如果一个项目中有多个不同的样本，我们很自然地就会想比较这些样本。ArchR提供了两种小提琴图(violin plot)和山脊图(ridge plot)用来展示不同组之间的信息。这两种类型的图可以用一个函数plotGroups进行绘制。</p>
<p><strong>山脊图</strong><br>根据TSS富集得分为每个样本绘制</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">pdf(<span class="string">&quot;ridge plot.pdf&quot;</span>)</span><br><span class="line">p1 &lt;- plotGroups(</span><br><span class="line">  ArchRProj = projPBMC_1,</span><br><span class="line">  groupBy = <span class="string">&quot;Sample&quot;</span>,</span><br><span class="line">  colorBy = <span class="string">&quot;cellColData&quot;</span>,</span><br><span class="line">  name = <span class="string">&quot;TSSEnrichment&quot;</span>,</span><br><span class="line">  plotAs = <span class="string">&quot;ridges&quot;</span></span><br><span class="line">)</span><br><span class="line">p1</span><br><span class="line">dev.off()</span><br></pre></td></tr></table></figure>
<p><strong>小提琴图</strong><br>根据TSS富集得分为每个样本绘制<br>ArchR绘制的小提琴图额外叠加了一层箱线图(a box-and-whiskers plot in the style of Tukey)，中间水平的三条线表示数据中的1/4分位数，中位数和3/4分位数。最下方是最小值，最上方是最大值（或者是1.5倍的IQR, interquartile range, 1/4分位数与3/4分位数的距离）</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">pdf(<span class="string">&quot;violin plot.pdf&quot;</span>)</span><br><span class="line">p2 &lt;- plotGroups(</span><br><span class="line">  ArchRProj = projPBMC_1,</span><br><span class="line">  groupBy = <span class="string">&quot;Sample&quot;</span>,</span><br><span class="line">  colorBy = <span class="string">&quot;cellColData&quot;</span>,</span><br><span class="line">  name = <span class="string">&quot;TSSEnrichment&quot;</span>,</span><br><span class="line">  plotAs = <span class="string">&quot;violin&quot;</span>,</span><br><span class="line">  alpha = <span class="number">0.4</span>,</span><br><span class="line">  addBoxPlot = <span class="literal">TRUE</span></span><br><span class="line">)</span><br><span class="line">p2</span><br><span class="line">dev.off()</span><br></pre></td></tr></table></figure>

<h3 id="绘制样本的TSS富集谱和Fragment大小分布"><a href="#绘制样本的TSS富集谱和Fragment大小分布" class="headerlink" title="绘制样本的TSS富集谱和Fragment大小分布"></a>绘制样本的TSS富集谱和Fragment大小分布</h3><p>**Fragments大小分布: **<br>我们使用<code>plotFragmentSizes</code>函数为绘制所有样本的fragment大小分布。ATAC-seq数据中的fragment大小分布可能会因样本、细胞类型和批次不同，但这和数据质量并不是严格相关。比如说我们的数据在不同组之间就存在一些差别。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">pdf(<span class="string">&quot;Fragment size.pdf&quot;</span>)</span><br><span class="line">fs &lt;- plotFragmentSizes(ArchRProj = projPBMC_1)</span><br><span class="line">fs</span><br><span class="line">dev.off()</span><br></pre></td></tr></table></figure>
<p><strong>TSS富集谱:</strong><br>我们使用<code>plotTSSEnrichment</code>函数绘制TSS富集谱。TSS富集谱需要在中心位置有一个明显的峰，在峰的右边还会有一个核小体引起的小隆起（约147 bp）。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">pdf(<span class="string">&quot;TSS enrichment.pdf&quot;</span>)</span><br><span class="line">TSSenrichment &lt;- plotTSSEnrichment(ArchRProj = projPBMC_1)</span><br><span class="line">TSSenrichment</span><br><span class="line">dev.off()</span><br></pre></td></tr></table></figure>
<h2 id="过滤doublets"><a href="#过滤doublets" class="headerlink" title="过滤doublets"></a>过滤doublets</h2><p>这个函数里的一个关键参数是filterRatio,由于不同样本的制备过程中的细胞上样量不同，那么不同样本的doublet也就不同，为了保证不同样本的过滤后结果保持一致，所以引入了filterRatio。该值越高，被认为是doublet而被过滤的细胞也就越多。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">projPBMC_2 &lt;- filterDoublets(projPBMC_1)</span><br><span class="line"></span><br><span class="line">projPBMC_2</span><br></pre></td></tr></table></figure>
<h1 id="ArchR降维分析"><a href="#ArchR降维分析" class="headerlink" title="ArchR降维分析"></a>ArchR降维分析</h1><p>在scATAC-seq数据中，一个特定的位置存在三种状态，分为不开放，一条链开放，两条链都开放。但即便是在高质量的scATAC-seq数据中，大部分开放区域都没有被转座酶切割，因此大部分座位都是0。此外，如果我们发现一个细胞(A)的一处peak区域有三个Tn5 insertions，而另外一个细胞(B)对应区域只有一个Tn5 insertions，由于数据的稀疏性，我们也无法断定A就比B更开放。</p>
<p>如果直接在稀疏矩阵上使用标准的降维分析，例如主成分分析(Principal Component Analysis, PCA)，然后使用前两个主成分进行绘图，你可能无法得到你想要的结果，这是由于数据的稀疏性会导致细胞间在0的位置有更高的相似性。为了解决这个问题，我们采用了<strong>分层</strong>的降维策略。</p>
<h2 id="隐语义-Latent-Semantic-Indexing-迭代"><a href="#隐语义-Latent-Semantic-Indexing-迭代" class="headerlink" title="隐语义(Latent Semantic Indexing)迭代"></a>隐语义(Latent Semantic Indexing)迭代</h2><p>首先，我们会使用隐语义分析(Latent Semantic Indexing, LSI)进行降维。LSI方法最早用在自然语言分析中，根据字数来评估文档相似度。Cusanovich et al. (Science 2015)第一次在scATAC-sq数分析中引入了LSI。计算步骤如下:  </p>
<ol>
<li>对每个细胞计算根据深度标准化后的词频(Term frequency, TF)  </li>
<li>根据逆文档频率(IDF, inverse document frequency)进行标准化，便于后续特征选择  </li>
<li>最后对结果矩阵进行对数变换（也就是log(TF-IDF)）  </li>
</ol>
<p>后来提出了”迭代LSI法” (Satpathy, Granja et al. Nature Biotechnology 2019和 Granja, Klemm and McGinnis* et al. Nature Biotechnology 2019)。这个方法首先在最开放的分块中计算初始的LSI变换，识别未受到批次效应影响的低分辨率聚类。</p>
<center><img src="/img/scATAC/LSI.jpg" alt="HC" style="zoom:100%;" /></center>
我们可以在PBMC中鉴定出几个主要大群(T细胞、B细胞和单核细胞)。接着，ArchR计算这些聚类在每个特征中的平均开放度。ArchR识别这些聚类中变化最大的peak，用作后续LSI的特征。在第二次迭代中，变化最大的peak就类似于scRAN-seq中高变异基因。用户可以决定进行多次轮的LSI迭代。我们发现这个方法能够降低观察到的批次效应，并能使用更加合理的特征矩阵进行降维。


<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">projPBMC_2 &lt;- addIterativeLSI(</span><br><span class="line">  ArchRProj = projPBMC_2,</span><br><span class="line">  useMatrix = <span class="string">&quot;TileMatrix&quot;</span>, </span><br><span class="line">  name = <span class="string">&quot;IterativeLSI&quot;</span>, </span><br><span class="line">  iterations = <span class="number">2</span>, </span><br><span class="line">  clusterParams = <span class="built_in">list</span>( </span><br><span class="line">    resolution = <span class="built_in">c</span>(<span class="number">0.2</span>), </span><br><span class="line">    sampleCells = <span class="number">10000</span>, </span><br><span class="line">    n.start = <span class="number">10</span></span><br><span class="line">  ), </span><br><span class="line">  varFeatures = <span class="number">25000</span>, </span><br><span class="line">  dimsToUse = <span class="number">1</span>:<span class="number">30</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="Harmony矫正批次效应"><a href="#Harmony矫正批次效应" class="headerlink" title="Harmony矫正批次效应"></a>Harmony矫正批次效应</h2><p>在某些情况下，迭代的LSI方法并不能矫正严重的批次效应。ArchR使用了最初为了scRNA-seq开发的Harmony进行批次效应矫正。 ArchR提供了专门的封装函数<code>addHarmony()</code>将降维后的对象直接传递给<code>Harmony::HarmonyMatrix()</code>, 额外参数可以通过…进行传递。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">projPBMC_2 &lt;- addHarmony(</span><br><span class="line">  ArchRProj = projPBMC_2,</span><br><span class="line">  reducedDims = <span class="string">&quot;IterativeLSI&quot;</span>,</span><br><span class="line">  name = <span class="string">&quot;Harmony&quot;</span>,</span><br><span class="line">  groupBy = <span class="string">&quot;Sample&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这一步会在我们的projHeme2创建一个新的名为Harmony的reduceDims对象。</p>
<h1 id="使用ArchR聚类"><a href="#使用ArchR聚类" class="headerlink" title="使用ArchR聚类"></a>使用ArchR聚类</h1><h2 id="使用Seurat的FindClusters-函数进行聚类"><a href="#使用Seurat的FindClusters-函数进行聚类" class="headerlink" title="使用Seurat的FindClusters()函数进行聚类"></a>使用Seurat的FindClusters()函数进行聚类</h2><p>我们发现Seurat实现的图聚类方法表现最好，所以在ArchR中，addClusters()函数本质是上将额外的参数通过…传递给<code>Seurat::FindClusters()</code>函数，从而得到聚类结果。在分析中，我们发现<code>Seurat::FindClusters()</code>是一个确定性的聚类算法，也就是相同的输入总是能得到完全相同的输出。  </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">projPBMC_2 &lt;- addClusters(</span><br><span class="line">  input = projPBMC_2,</span><br><span class="line">  reducedDims = <span class="string">&quot;IterativeLSI&quot;</span>,</span><br><span class="line">  method = <span class="string">&quot;Seurat&quot;</span>,</span><br><span class="line">  name = <span class="string">&quot;Clusters&quot;</span>,</span><br><span class="line">  resolution = <span class="number">0.8</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 使用$符号来获取聚类信息，输出每个细胞对应的cluster</span></span><br><span class="line">head(projPBMC_2$Clusters)</span><br><span class="line"><span class="comment">###统计每个cluster的细胞数</span></span><br><span class="line">table(projPBMC_2$Clusters)</span><br></pre></td></tr></table></figure>
<p>为了更好了解样本在cluster的分布，我们可以使用<code>confusionMatrix()</code>函数通过每个样本创建一个聚类混合矩阵(cluster confusion matrix)</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">###统计每个样本在不同的cluster的分布情况</span></span><br><span class="line">cM &lt;- confusionMatrix(paste0(projPBMC_2$Clusters), paste0(projPBMC_2$Sample))</span><br><span class="line">cM</span><br></pre></td></tr></table></figure>
<p>利用热图进行展示</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library(pheatmap)</span><br><span class="line">cM &lt;- cM / Matrix::rowSums(cM)</span><br><span class="line">pdf(<span class="string">&quot;Cluster heatmap.pdf&quot;</span>)</span><br><span class="line">heatmap1 &lt;- pheatmap::pheatmap(</span><br><span class="line">  mat = as.matrix(cM), </span><br><span class="line">  color = paletteContinuous(<span class="string">&quot;whiteBlue&quot;</span>), </span><br><span class="line">  border_color = <span class="string">&quot;black&quot;</span></span><br><span class="line">)</span><br><span class="line">heatmap1</span><br><span class="line">dev.off()</span><br></pre></td></tr></table></figure>
<h2 id="使用UMAP聚类"><a href="#使用UMAP聚类" class="headerlink" title="使用UMAP聚类"></a>使用UMAP聚类</h2><p>UMAP和t-SNE的主要区别在于对细胞和聚类间的距离解释，t-SNE用于保留数据的局部结构，而UMAP则是保留局部结构的同时尽可能保留全局结构。从理论上来讲，UMAP中细胞聚类间的距离存在意义，而t-SNE则没有。也就是说，你不能说t-SNE中聚类A比聚类C更接近聚类B，而UMAP在设计的时候允许这种类型的比较。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">###Uniform Manifold Approximation and Projection (UMAP)</span></span><br><span class="line">projPBMC_2 &lt;- addUMAP(</span><br><span class="line">  ArchRProj = projPBMC_2, </span><br><span class="line">  reducedDims = <span class="string">&quot;IterativeLSI&quot;</span>, </span><br><span class="line">  name = <span class="string">&quot;UMAP&quot;</span>, </span><br><span class="line">  nNeighbors = <span class="number">30</span>, </span><br><span class="line">  minDist = <span class="number">0.5</span>, </span><br><span class="line">  metric = <span class="string">&quot;cosine&quot;</span> <span class="comment">###A number that determines how distance is computed in the reducedDims to compute a UMAP. This argument is passed to metric in uwot::umap().</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>使用@操作符可以从ArchRProject中列出有哪些可用的embedding，如<code>projPBMC_2@embeddings</code>  </p>
<p>我们使用<code>plotEmbedding</code>函数绘制UMAP图，设置embedding=”UMAP”。通过修改colorBy和name来告诉ArchR使用给定哪个元信息矩阵的列对细胞进行上色。  </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">###绘制UMAP图</span></span><br><span class="line"><span class="comment">###根据sample上色</span></span><br><span class="line">umap1 &lt;- plotEmbedding(ArchRProj = projPBMC_2, colorBy = <span class="string">&quot;cellColData&quot;</span>, name = <span class="string">&quot;Sample&quot;</span>, embedding = <span class="string">&quot;UMAP&quot;</span>)</span><br><span class="line">umap1</span><br><span class="line"></span><br><span class="line"><span class="comment">###根据Cluster上色</span></span><br><span class="line">umap2 &lt;- plotEmbedding(ArchRProj = projPBMC_2, colorBy = <span class="string">&quot;cellColData&quot;</span>, name = <span class="string">&quot;Clusters&quot;</span>, embedding = <span class="string">&quot;UMAP&quot;</span>)</span><br><span class="line">umap2</span><br><span class="line"></span><br><span class="line"><span class="comment">### 使用ggAlignPlots将这两个图共同展示，&quot;type=h&quot;表示两个图是水平排列</span></span><br><span class="line">ggAlignPlots(umap1, umap2, type = <span class="string">&quot;h&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="t-Stocastic-Neighbor-Embedding-t-SNE"><a href="#t-Stocastic-Neighbor-Embedding-t-SNE" class="headerlink" title="t-Stocastic Neighbor Embedding (t-SNE)"></a>t-Stocastic Neighbor Embedding (t-SNE)</h2><p>t-SNE图可以用<code>addTSNE()</code>函数运行得到</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">projPBMC_2 &lt;- addTSNE(</span><br><span class="line">    ArchRProj = projPBMC_2, </span><br><span class="line">    reducedDims = <span class="string">&quot;IterativeLSI&quot;</span>, </span><br><span class="line">    name = <span class="string">&quot;TSNE&quot;</span>, </span><br><span class="line">    perplexity = <span class="number">30</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>和之前UMAP一样，我们同样使用<code>plotEmbedding()</code>绘制t-SNE图。这里不需要考虑嵌入的类型，可以继续使用之前的colorBy和name参数</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">tsne1 &lt;- plotEmbedding(ArchRProj = projPBMC_2, </span><br><span class="line">                       colorBy = <span class="string">&quot;cellColData&quot;</span>, </span><br><span class="line">                       name = <span class="string">&quot;Sample&quot;</span>, </span><br><span class="line">                       embedding = <span class="string">&quot;TSNE&quot;</span>)</span><br><span class="line"></span><br><span class="line">tsne2 &lt;- plotEmbedding(ArchRProj = projPBMC_2, </span><br><span class="line">                       colorBy = <span class="string">&quot;cellColData&quot;</span>, </span><br><span class="line">                       name = <span class="string">&quot;Clusters&quot;</span>, </span><br><span class="line">                       embedding = <span class="string">&quot;TSNE&quot;</span>)</span><br><span class="line">ggAlignPlots(tsne1, tsne2, type = <span class="string">&quot;h&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Harmony后降维"><a href="#Harmony后降维" class="headerlink" title="Harmony后降维"></a>Harmony后降维</h2><p>之前我们通过<code>addHarmony</code>调用Harmony对数据进行批次校正，创建了一个名为”Harmony”的reducedDims对象。我们通过UMAP或t-SNE对结果进行嵌入可视化，对迭代LSI结果和Harmony校正结果进行比较，评估Harmony的作用。  </p>
<p>保持和之前UMAP嵌入一样的参数，只修改<code>reducedDims=&quot;Harmony&quot;</code></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">projPBMC_2 &lt;- addUMAP(</span><br><span class="line">  ArchRProj = projPBMC_2, </span><br><span class="line">  reducedDims = <span class="string">&quot;Harmony&quot;</span>, </span><br><span class="line">  name = <span class="string">&quot;UMAPHarmony&quot;</span>, </span><br><span class="line">  nNeighbors = <span class="number">30</span>, </span><br><span class="line">  minDist = <span class="number">0.5</span>, </span><br><span class="line">  metric = <span class="string">&quot;cosine&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">pdf(<span class="string">&quot;UMAP Harmony.pdf&quot;</span>)</span><br><span class="line">ha3 &lt;- plotEmbedding(ArchRProj = projPBMC_2, colorBy = <span class="string">&quot;cellColData&quot;</span>, name = <span class="string">&quot;Sample&quot;</span>, embedding = <span class="string">&quot;UMAPHarmony&quot;</span>)</span><br><span class="line">ha4 &lt;- plotEmbedding(ArchRProj = projPBMC_2, colorBy = <span class="string">&quot;cellColData&quot;</span>, name = <span class="string">&quot;Clusters&quot;</span>, embedding = <span class="string">&quot;UMAPHarmony&quot;</span>)</span><br><span class="line">ggAlignPlots(ha3, ha4, type = <span class="string">&quot;h&quot;</span>)</span><br><span class="line">dev.off()</span><br></pre></td></tr></table></figure>
<h1 id="ArchR的基因得分和标记基因"><a href="#ArchR的基因得分和标记基因" class="headerlink" title="ArchR的基因得分和标记基因"></a>ArchR的基因得分和标记基因</h1><p>为了实现细胞类型注释，我们会用到已知的细胞类型特异的标记基因。在scATAC-seq数据中，这些基因的表达量其实是根据染色质开放数据估计的基因得分(gene score)。所谓的基因得分，本质上就是用基因附近的调控元件去预测基因的表达量。ArchR的亮点在于，它允许用户提供复杂的自定义的距离加权开放性模型去计算这些基因得分。  </p>
<h2 id="鉴定标记基因"><a href="#鉴定标记基因" class="headerlink" title="鉴定标记基因"></a>鉴定标记基因</h2><p>为了根据基因得分来鉴定标记基因，我们需要在调用<code>getMarkerFeatures()</code>时设置<code>useMatrix = &quot;GeneScoreMatrix&quot;</code>。此外，我们设置了<code>groupBy=&quot;Clusters&quot;</code>告诉ArchR使用cellColData的”Clusters”列对细胞分组，从而得到每个聚类特异的标记基因。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">devtools::install_github(<span class="string">&quot;immunogenomics/presto&quot;</span>)</span><br><span class="line"></span><br><span class="line">markersGS &lt;- getMarkerFeatures(</span><br><span class="line">  ArchRProj = projPBMC_2, </span><br><span class="line">  useMatrix = <span class="string">&quot;GeneScoreMatrix&quot;</span>, </span><br><span class="line">  groupBy = <span class="string">&quot;Clusters&quot;</span>,</span><br><span class="line">  bias = <span class="built_in">c</span>(<span class="string">&quot;TSSEnrichment&quot;</span>, <span class="string">&quot;log10(nFrags)&quot;</span>),</span><br><span class="line">  testMethod = <span class="string">&quot;wilcoxon&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>该函数返回一个<code>SummarizedExperiment</code>对象，里面记录着每个标记特征的相关信息。这是ArchR的一个常见输出，是下游数据分析的关键输出格式。<code>SummarizedExperiment</code>对象和矩阵类似，行是感兴趣的特征（例如基因），列表示样本。一个SummarizedExperiment能够记录一个或多个assay矩阵。</p>
<p>我们能够使用<code>getMarkers()</code>函数从<code>SummarizedExperiment</code>对象中提取出一个包含多个DataFrame对象的列表，每个DataFrame对象都对应着一个聚类，记录着该聚类里相关的标记特征。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">markerList &lt;- getMarkers(markersGS, cutOff = <span class="string">&quot;FDR &lt;= 0.01 &amp; Log2FC &gt;= 1.25&quot;</span>) <span class="comment">###cutoff值，可根据需要修改；</span></span><br><span class="line">markerList$C2</span><br></pre></td></tr></table></figure>
<p>我们使用<code>markerHeatmap()</code>创建含有所有标记特征的可视化热图。通过<code>labelMarkers()</code>在热图中标记部分感兴趣的基因。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">markerGenes  &lt;- <span class="built_in">c</span>(</span><br><span class="line">    <span class="string">&quot;CD34&quot;</span>, <span class="comment">#Early Progenitor</span></span><br><span class="line">    <span class="string">&quot;GATA1&quot;</span>, <span class="comment">#Erythroid</span></span><br><span class="line">    <span class="string">&quot;PAX5&quot;</span>, <span class="string">&quot;MS4A1&quot;</span>, <span class="string">&quot;EBF1&quot;</span>, <span class="string">&quot;MME&quot;</span>, <span class="comment">#B-Cell Trajectory</span></span><br><span class="line">    <span class="string">&quot;CD14&quot;</span>, <span class="string">&quot;CEBPB&quot;</span>, <span class="string">&quot;MPO&quot;</span>, <span class="comment">#Monocytes</span></span><br><span class="line">    <span class="string">&quot;IRF8&quot;</span>, </span><br><span class="line">    <span class="string">&quot;CD3D&quot;</span>, <span class="string">&quot;CD8A&quot;</span>, <span class="string">&quot;TBX21&quot;</span>, <span class="string">&quot;IL7R&quot;</span> <span class="comment">#TCells</span></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">heatmapGS &lt;- markerHeatmap(</span><br><span class="line">  seMarker = markersGS, </span><br><span class="line">  cutOff = <span class="string">&quot;FDR &lt;= 0.01 &amp; Log2FC &gt;= 1.25&quot;</span>, </span><br><span class="line">  labelMarkers = markerGenes,</span><br><span class="line">  transpose = <span class="literal">TRUE</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>我们需要用<code>ComplexHeatmap::draw()</code>才能绘制该热图，这是因为heatmapGS实际上是一个热图列表。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">ComplexHeatmap::draw(heatmapGS, heatmap_legend_side = <span class="string">&quot;bot&quot;</span>, annotation_legend_side = <span class="string">&quot;bot&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="可视化标记基因"><a href="#可视化标记基因" class="headerlink" title="可视化标记基因"></a>可视化标记基因</h2><p>在之前章节中提到，我们可以在UMAP展示每个细胞的基因得分。这可以通过修改<code>plotEmbedding()</code>函数里的colorBy和name参数实现</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">markerGenes  &lt;- <span class="built_in">c</span>(</span><br><span class="line">  <span class="string">&quot;CD34&quot;</span>,  </span><br><span class="line">  <span class="string">&quot;GATA1&quot;</span>, </span><br><span class="line">  <span class="string">&quot;PAX5&quot;</span>, <span class="string">&quot;MS4A1&quot;</span>, <span class="string">&quot;MME&quot;</span>, </span><br><span class="line">  <span class="string">&quot;CD14&quot;</span>, <span class="string">&quot;MPO&quot;</span>, </span><br><span class="line">  <span class="string">&quot;CD3D&quot;</span>, <span class="string">&quot;CD8A&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">p &lt;- plotEmbedding(</span><br><span class="line">  ArchRProj = projPBMC_2, </span><br><span class="line">  colorBy = <span class="string">&quot;GeneScoreMatrix&quot;</span>, </span><br><span class="line">  name = markerGenes, </span><br><span class="line">  embedding = <span class="string">&quot;UMAP&quot;</span>,</span><br><span class="line">  quantCut = <span class="built_in">c</span>(<span class="number">0.01</span>, <span class="number">0.95</span>),</span><br><span class="line">  imputeWeights = <span class="literal">NULL</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 可替换，markerGenes中任意基因均可</span></span><br><span class="line">p$CD14</span><br><span class="line"></span><br><span class="line"><span class="comment">## 绘制全部基因</span></span><br><span class="line">allgenes &lt;- lapply(p, <span class="keyword">function</span>(x)&#123;</span><br><span class="line">  x + guides(color = <span class="literal">FALSE</span>, fill = <span class="literal">FALSE</span>) + </span><br><span class="line">    theme_ArchR(baseSize = <span class="number">6.5</span>) +</span><br><span class="line">    theme(plot.margin = unit(<span class="built_in">c</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="string">&quot;cm&quot;</span>)) +</span><br><span class="line">    theme(</span><br><span class="line">      axis.text.x=element_blank(), </span><br><span class="line">      axis.ticks.x=element_blank(), </span><br><span class="line">      axis.text.y=element_blank(), </span><br><span class="line">      axis.ticks.y=element_blank()</span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br><span class="line">pdf(<span class="string">&quot;all genes.pdf&quot;</span>)</span><br><span class="line">do.call(cowplot::plot_grid, <span class="built_in">c</span>(<span class="built_in">list</span>(ncol = <span class="number">3</span>),allgenes))</span><br><span class="line">dev.off()</span><br></pre></td></tr></table></figure>
<h2 id="使用MAGIC填充标记基因"><a href="#使用MAGIC填充标记基因" class="headerlink" title="使用MAGIC填充标记基因"></a>使用MAGIC填充标记基因</h2><p>使用MAGIC根据邻近细胞填充基因得分对信号进行平滑化处理。我们发现者能够极大程度地提高基因得分的可视化解读性。要执行此操作，我们需要先在我们的ArchRProject中加入填充权重。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">projPBMC_2 &lt;- addImputeWeights(projPBMC_2)</span><br><span class="line"><span class="comment">## 这些填充权重会在之后绘制UMAP嵌入图里的基因得分时传入到plotEmbedding()</span></span><br><span class="line"></span><br><span class="line">markerGenes  &lt;- <span class="built_in">c</span>(</span><br><span class="line">    <span class="string">&quot;CD34&quot;</span>,  <span class="comment">#Early Progenitor</span></span><br><span class="line">    <span class="string">&quot;GATA1&quot;</span>, <span class="comment">#Erythroid</span></span><br><span class="line">    <span class="string">&quot;PAX5&quot;</span>, <span class="string">&quot;MS4A1&quot;</span>, <span class="string">&quot;MME&quot;</span>, <span class="comment">#B-Cell Trajectory</span></span><br><span class="line">    <span class="string">&quot;CD14&quot;</span>, <span class="string">&quot;MPO&quot;</span>, <span class="comment">#Monocytes</span></span><br><span class="line">    <span class="string">&quot;CD3D&quot;</span>, <span class="string">&quot;CD8A&quot;</span><span class="comment">#TCells</span></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">wplot &lt;- plotEmbedding(</span><br><span class="line">    ArchRProj = projPBMC_2, </span><br><span class="line">    colorBy = <span class="string">&quot;GeneScoreMatrix&quot;</span>, </span><br><span class="line">    name = markerGenes, </span><br><span class="line">    embedding = <span class="string">&quot;UMAP&quot;</span>,</span><br><span class="line">    imputeWeights = getImputeWeights(projPBMC_2)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">wplot$CD34</span><br><span class="line"></span><br><span class="line"><span class="comment">## Rearrange for grid plotting</span></span><br><span class="line">wplotall &lt;- lapply(wplot, <span class="keyword">function</span>(x)&#123;</span><br><span class="line">    x + guides(color = <span class="literal">FALSE</span>, fill = <span class="literal">FALSE</span>) + </span><br><span class="line">    theme_ArchR(baseSize = <span class="number">6.5</span>) +</span><br><span class="line">    theme(plot.margin = unit(<span class="built_in">c</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="string">&quot;cm&quot;</span>)) +</span><br><span class="line">    theme(</span><br><span class="line">        axis.text.x=element_blank(), </span><br><span class="line">        axis.ticks.x=element_blank(), </span><br><span class="line">        axis.text.y=element_blank(), </span><br><span class="line">        axis.ticks.y=element_blank()</span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br><span class="line">do.call(cowplot::plot_grid, <span class="built_in">c</span>(<span class="built_in">list</span>(ncol = <span class="number">3</span>),wplotall))</span><br></pre></td></tr></table></figure>
<h2 id="使用ArchRBrowser绘制Track"><a href="#使用ArchRBrowser绘制Track" class="headerlink" title="使用ArchRBrowser绘制Track"></a>使用ArchRBrowser绘制Track</h2><p>除了在UMAP上绘制每个细胞的基因得分外，我们还可以在基因组浏览器上浏览这些标记基因的局部染色体开放状态。为了执行该操作，我们使用<code>plotBrowserTrack()</code>函数，它会构建一系列绘图对象，每个对象对应一个标记基因。函数会根据groupBy输入的组别信息在不同track上绘制每组的开放状态。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">markerGenes  &lt;- <span class="built_in">c</span>(</span><br><span class="line">  <span class="string">&quot;CD34&quot;</span>, </span><br><span class="line">  <span class="string">&quot;GATA1&quot;</span>, </span><br><span class="line">  <span class="string">&quot;PAX5&quot;</span>, <span class="string">&quot;MS4A1&quot;</span>, </span><br><span class="line">  <span class="string">&quot;CD14&quot;</span>, </span><br><span class="line">  <span class="string">&quot;CD3D&quot;</span>, <span class="string">&quot;CD8A&quot;</span>, <span class="string">&quot;TBX21&quot;</span>, <span class="string">&quot;IL7R&quot;</span> </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">genetrack &lt;- plotBrowserTrack(</span><br><span class="line">  ArchRProj = projPBMC_2, </span><br><span class="line">  groupBy = <span class="string">&quot;Clusters&quot;</span>, </span><br><span class="line">  geneSymbol = markerGenes, </span><br><span class="line">  upstream = <span class="number">50000</span>,</span><br><span class="line">  downstream = <span class="number">50000</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">grid::grid.newpage()</span><br><span class="line">pdf(<span class="string">&quot;CD14 track.pdf&quot;</span>)</span><br><span class="line">grid::grid.draw(genetrack$CD14)</span><br><span class="line">dev.off()</span><br><span class="line"></span><br><span class="line">pdf(<span class="string">&quot;all gene tracks.pdf&quot;</span>)</span><br><span class="line">genetrack</span><br><span class="line">dev.off()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Single Cell</category>
      </categories>
      <tags>
        <tag>scATAC-seq</tag>
      </tags>
  </entry>
  <entry>
    <title>WES Project</title>
    <url>/2021/03/30/WES-Project/</url>
    <content><![CDATA[<style>
  p{
    font-size:18px;
    line-height:1.7em;

  }
</style>

<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="GATK"><a href="#GATK" class="headerlink" title="GATK"></a>GATK</h2><p>本次作业使用的GATK版本为4.2.0.0<br>数据库文件来源：<code>/public/workspace/lincs/wes_cancer/data</code></p>
<p><a href="https://github.com/broadinstitute/gatk/releases">github-GATK</a><br><a href="https://gatk.broadinstitute.org/hc/en-us">官网</a></p>
<p>由于GATK的更新，ftp链接于2020年6月1日关闭，所有数据库文件都迁移至谷歌云存储：<a href="https://console.cloud.google.com/storage/browser/genomics-public-data/resources/broad/hg38/v0;tab=objects?pageState=(%22StorageObjectListTable%22:(%22f%22:%22%255B%255D%22))&prefix=&forceOnObjectsSortingFiltering=false">Google Cloud-genomics public data</a><br>文件下载需要先conda/mamba安装gsutil</p>
<center><img src="/img/Figures/googlecloud.png" alt="googlecloud" style="zoom:100%;" /></center>

<blockquote>
<p>阿里云和Broad Institute合作提供了GATK软件分析流程。由Broad Institute提供的GATK流程最佳实践用工作流定义语言（WDL）编写，通过批量计算集成的Cromwell工作流引擎解析执行。用户将为作业运行时实际消耗的计算和存储资源付费，不需要支付资源之外的附加费用。需要先开通阿里云的OSS并创建好Bucket，输入、输出文件都需要保存在OSS。<br>  <a href="https://help.aliyun.com/document_detail/60414.html?spm=a2c4g.11186623.6.607.63f83e36wO8PHK">阿里云-GATK支持</a><br>  <center><img src="/img/Figures/alibaba.png" alt="alibaba-GATK" style="zoom:100%;" /></center></p>
</blockquote>
<center><img src="/img/Figures/gatk-pipeline.png" alt="gatk-pipeline" style="zoom:65%;" /></center>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><center><img src="/img/Figures/recal-warning.png" alt="recal-warning" style="zoom:100%;" /></center>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># reference</span></span><br><span class="line">ascp  -i ~/.aspera/connect/etc/asperaweb_id_dsa.openssh \</span><br><span class="line">-l 100M -k 1 -Q -T \</span><br><span class="line">anonftp@ftp.ncbi.nlm.nih.gov:/snp/archive/b153/VCF/GCF_000001405.38.gz \</span><br><span class="line">./Reference/GATK/</span><br><span class="line"><span class="comment"># index</span></span><br><span class="line">ascp  -i ~/.aspera/connect/etc/asperaweb_id_dsa.openssh \</span><br><span class="line">-l 100M -k 1 -Q -T \</span><br><span class="line">anonftp@ftp.ncbi.nlm.nih.gov:/snp/archive/b153/VCF/GCF_000001405.38.gz.tbi \</span><br><span class="line">./Reference/dbsnp_153.hg38/</span><br></pre></td></tr></table></figure>
<h1 id="数据下载"><a href="#数据下载" class="headerlink" title="数据下载"></a>数据下载</h1><h2 id="NCBI-prefetch"><a href="#NCBI-prefetch" class="headerlink" title="NCBI+prefetch"></a>NCBI+prefetch</h2><p>在NCBI页面查找数据后点击Run Selector，选择需要的数据，下载Metadata和Accession List两个文件</p>
 <center><img src="/img/Figures/SRA-run.png" alt="SRA-run" style="zoom:45%;" /></center>

<p>依次读取SRR_Acc_List.txt的每一行，利用prefetch下载。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat 0.sra/sra.infor/SRR_Acc_List.txt | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  prefetch <span class="variable">$&#123;id&#125;</span> -O  ./0.sra</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="ENA-Aspera"><a href="#ENA-Aspera" class="headerlink" title="ENA+Aspera"></a>ENA+Aspera</h2><p><a href="https://www.ebi.ac.uk/ena">ENA数据库: European Nucleotide</a><br>隶属于EBI，功能上应该是与SRA类似的，但是其搜索界面更加亲民，并且对于下载fastq文件以及检查下载数据完整性更加友好。  </p>
<p><strong>1.</strong> 首先，在数据库页面右上角搜索栏输入目标SRA检索号，确认后稍等片刻可得结果页面；   </p>
<p><img src="/img/Figures/ena.png" alt="ena"></p>
<p><strong>2.</strong> 其次，点击选取 Read File 即可查看该实验下所有的测序序列数据的信息，选择需要查看的信息，这里的五列分别为：run_accession，library_name，fastq_ftp，sra_md5，sra_aspera；  </p>
<img src="/img/Figures/ena_page2.png" style="zoom:80%;" />

<p><strong>3.</strong> 点击TSV，下载对应文件；  </p>
<p><img src="/img/Figures/download.png" alt="download"><br><strong>4.</strong> 利用shell处理，保留所需信息。观察文件发现，case1包含case1…和case1…ampliseq… ，只保留case1…；  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提取包含case1且不包含ampliseq的行</span></span><br><span class="line">grep case1 filereport_read_run_PRJNA310728_tsv.txt | grep -v ampliseq &gt; matched_file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取SRR号，样本名，sra.ftp地址</span></span><br><span class="line">awk <span class="string">&#x27;&#123;print $2,$1,$6&#125;&#x27;</span> matched_file.txt | sed <span class="string">&#x27;s/_WES//&#x27;</span> &gt; config.sra</span><br></pre></td></tr></table></figure>
<p><img src="/img/Figures/awk-result.png" alt="awk-result"><br><strong>5.</strong> 利用Aspera批量下载,6.8G的文件下载了1个小时，速度大约为16M/s;</p>
<blockquote>
<p>Aspera:<br>-v verbose mode 唠叨模式，能让你实时知道程序在干啥<br>-T 取消加密，否则有时候数据下载不了<br>-i 提供私钥文件的地址，我也不知道干嘛的，反正不能少，地址一般是~/.aspera/connect/etc/asperaweb_id_dsa.openssh<br>-l 设置最大传输速度，一般200m到500m，如果不设置，反而速度会比较低，可能有个较低的默认值<br>-k 断点续传，一般设置为值1<br>-Q 不懂，一般加上它<br>-P 提供SSH port，一般是33001</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat 0.sra/sra.infor/config.sra | <span class="keyword">while</span> <span class="built_in">read</span> id; \</span><br><span class="line"><span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$id</span></span><br><span class="line">arr=(<span class="variable">$id</span>)</span><br><span class="line">link=<span class="variable">$&#123;arr[2]&#125;</span></span><br><span class="line">srr=<span class="variable">$&#123;arr[1]&#125;</span></span><br><span class="line">ascp -i ~/.aspera/connect/etc/asperaweb_id_dsa.openssh \</span><br><span class="line">    -l 300M -k 1 -Q -T -P 33001 \</span><br><span class="line">    era-fasp@<span class="variable">$&#123;link&#125;</span> \</span><br><span class="line">    ./0.sra/ &gt; <span class="built_in">log</span>/ascp.log/<span class="variable">$&#123;srr&#125;</span>.<span class="built_in">log</span> 2&gt;&amp;1 &amp; </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/ascp_loop.png" alt="acsp_loop" style="zoom:80%;" /></center>


<center><img src="/img/Figures/ascp_speed.png" alt="ascp-speed" style="zoom:80%;" /></center>

<p><strong>6.</strong> 最后利用MD5码确认数据的完整性。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提取样本列和MD5列</span></span><br><span class="line">awk <span class="string">&#x27;&#123;print $2,$4&#125;&#x27;</span> matched_file.txt | sed <span class="string">&#x27;s/_WES//&#x27;</span> &gt; sra.md5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用md5sum命令生成下载数据的md5码</span></span><br><span class="line"><span class="comment"># md5sum</span></span><br><span class="line"><span class="comment"># -b：二进制模式读取文件；</span></span><br><span class="line"><span class="comment"># -t或--text：把输入的文件作为文本文件看待；</span></span><br><span class="line"><span class="comment"># -c：从指定文件中读取MD5校验和，并进行校验；</span></span><br><span class="line"><span class="comment"># --status：验证成功时不输出任何信息；</span></span><br><span class="line"><span class="comment"># -w：当校验不正确时给出警告信息。</span></span><br><span class="line"></span><br><span class="line">md5sum ./0.sra/*.sra &gt; ./0.sra/sra.infor/aft.md5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比ENA提供的md5码和下载后的数据生成的md5码</span></span><br><span class="line">diff ./0.sra/sra.infor/aft.md5 ./0.sra/sra.infor/sra.md5</span><br><span class="line"></span><br><span class="line"><span class="comment"># ENA提供的md5文件和当前sra在同一目录时</span></span><br><span class="line"><span class="comment"># md5sum -c ENA提供的md5文件</span></span><br><span class="line"><span class="comment"># 返回0/1</span></span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/md5Check.png" alt="MD5" style="zoom:80%;" /></center>

<p>MD5码确认一致，下载的数据是完整无误的。</p>
<h2 id="ENA-Arial2-奶牛快传"><a href="#ENA-Arial2-奶牛快传" class="headerlink" title="ENA+Arial2+奶牛快传"></a>ENA+Arial2+奶牛快传</h2><p><strong>Aria2</strong><br><strong>优点</strong>:速度快、体积小、资源占用少；支持 HTTP/FTP/BT/Magnet磁力链接等类型的文件下载，据说速度超级快;<br><br><strong>缺点</strong>: 配置麻烦，上手较难。</p>
<p>教程：<br><a href="https://github.com/aria2/aria2/releases/tag/release-1.35.0">github-aria2</a><br><a href="https://cloud.tencent.com/developer/article/1142142">编译安装</a><br><a href="https://blog.readgroup.cn/m/?post=92">一键安装脚本（需要root权限）</a></p>
<center><img src="/img/Figures/Aria2-wrong.png" alt="Aria-wrong" style="zoom:60%;" /></center>

<p>另外尝试下载win版Arial2，再利用奶牛快传传至服务器<br>教程：</p>
<p>抛弃迅雷，Aria2 新手入门](<a href="https://zhuanlan.zhihu.com/p/37021947">https://zhuanlan.zhihu.com/p/37021947</a>)<br>用ftp地址，3G的数据下的超快。大概10分钟？感觉这边的速度是骗人的</p>
<center><img src="/img/Figures/Aria2-speed.png" alt="Aria-speed" style="zoom:60%;" /></center>

<p><a href="https://cowtransfer.com/"><strong>奶牛快传</strong></a></p>
<ul>
<li>单次传输上限20GB  </li>
<li>3TB云盘空间  </li>
<li>上传下载不限速  </li>
<li>在网页上上传本地文件后，会提供下载链接和密码</li>
</ul>
<center><img src="/img/Figures/upload.png" alt="cow" style="zoom:45%;" /></center>

<p>需要下载linux版<br><a href="https://github.com/Mikubill/cowtransfer-uploader">github-cowtransfer uploader</a><br><a href="https://www.jianshu.com/p/5c29e8fcb0f0">Linux奶牛快传使用手册</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从云端下载数据</span></span><br><span class="line"><span class="comment"># 输入提供的链接和密码</span></span><br><span class="line">cowtransfer-uploader --password=test1234 https://yilingzhang.cowtransfer.com/s/90c7eb9b3d1a44</span><br></pre></td></tr></table></figure>
<p>传到服务器8M/s的速度太感人了！！还可以加线程！</p>
<center><img src="/img/Figures/toserver.png" alt="cow-to-server" style="zoom:100%;" /></center>

<h1 id="质控与去接头"><a href="#质控与去接头" class="headerlink" title="质控与去接头"></a>质控与去接头</h1><h2 id="文件格式转换"><a href="#文件格式转换" class="headerlink" title="文件格式转换"></a>文件格式转换</h2><h3 id="fastq-dump"><a href="#fastq-dump" class="headerlink" title="fastq-dump"></a>fastq-dump</h3><p>官方文档：<br><a href="https://ncbi.github.io/sra-tools/fastq-dump.html">github: fastq-dump</a><br>教程：<br><a href="https://www.jianshu.com/p/a8d70b66794c">Fastq-dump: 一个神奇的软件</a></p>
<blockquote>
<p>常用参数:<br>split-spot: 将双端测序分为两份,但是都放在同一个文件中<br>split-files: 将双端测序分为两份,放在不同的文件,但是对于一方有而一方没有的reads直接丢弃<br>split-3 : 将双端测序分为两份,放在不同的文件,但是对于一方有而一方没有的reads会单独放在一个文件夹里<br>–gzip 输出文件以gz压缩<br>-A 输出文件名<br>-O 输出目录</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -------------------------------&gt;</span></span><br><span class="line"><span class="comment"># fastq-dump--sratoolkit-2.9.2</span></span><br><span class="line"><span class="comment"># -------------------------------&gt;</span></span><br><span class="line">cat 0.sra/sra.infor/sample | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">time fastq-dump -A <span class="variable">$&#123;id&#125;</span> -O 1.rawfastq/ \</span><br><span class="line">--gzip --split-3 0.sra/<span class="variable">$&#123;id&#125;</span>.sra &gt; <span class="built_in">log</span>/sra2fq.log/<span class="variable">$&#123;id&#125;</span>.<span class="built_in">log</span> 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h3 id="faterq-dump"><a href="#faterq-dump" class="headerlink" title="faterq-dump"></a>faterq-dump</h3><p><code>fastq-dump</code>只能单个线程，速度特别的慢。2018年的6月份，sra-tools更新了一个新的sra解压工具，<code>fasterq-dump</code>，能利用临时文件和多线程加速从SRA文件提取FASTQ。</p>
<p><strong>注意：</strong><code>fasterq-dump</code>不提供–gzip的参数用于压缩文件，提取出来的fastq文件只是文本文件，记得压缩，减小存储压力。（原文：There is no –gzip|–bizp2 option, you have to compress your files explicitly after they have been written.）</p>
<p>官方文档：<br><a href="https://github.com/ncbi/sra-tools/wiki/HowTo:-fasterq-dump">github: fasterq-dump</a></p>
<p>教程：<br><a href="https://www.plob.org/article/14565.html">fasterq-dump使用介绍</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -------------------------------&gt;</span></span><br><span class="line"><span class="comment"># fasterq-dump-sratoolkit-2.9.2</span></span><br><span class="line"><span class="comment"># -------------------------------&gt;</span></span><br><span class="line">cat 0.sra/sra.infor/sample | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  time fasterq-dump -3 -e 5 ./0.sra/<span class="variable">$&#123;id&#125;</span>.sra -O ./1.rawfastq --outfile <span class="variable">$&#123;id&#125;</span>.fastq  &gt; ./<span class="built_in">log</span>/sra2fq.log/<span class="variable">$&#123;id&#125;</span>.<span class="built_in">log</span> 2&gt;&amp;1</span><br><span class="line">  time pigz -p 3 -f ./1.rawfastq/<span class="variable">$&#123;id&#125;</span>_1.fastq &gt; ./1.rawfastq/<span class="variable">$&#123;id&#125;</span>_1.fastq.gz</span><br><span class="line">  time pigz -p 3 -f ./1.rawfastq/<span class="variable">$&#123;id&#125;</span>_2.fastq &gt; ./1.rawfastq/<span class="variable">$&#123;id&#125;</span>_2.fastq.gz</span><br><span class="line"><span class="keyword">done</span> </span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>Troubleshooting</strong><br>err: cmn_iter.c cmn_iter_open_db().VDBManagerOpenDBRead( ‘case1_germline.sra’ ) -&gt; RC(rcVFS,rcMgr,rcOpening,rcDirectory,rcNotFound)<br>2021-03-18T09:53:03 fasterq-dump.2.9.2 err: sorter.c run_producer_pool(): row_count == 0!<br>2021-03-18T09:53:03 fasterq-dump.2.9.2 err: sorter.c execute_lookup_production() -&gt; RC(rcVDB,rcNoTarg,rcConstructing,rcParam,rcInvalid)2021-03-18T09:53:03 fasterq-dump.2.9.2 err: fasterq-dump.c produce_lookup_files() -&gt;<br> RC(rcVDB,rcNoTarg,rcConstructing,rcParam,rcInvalid)#<br><strong>Replied by contributor:</strong> Perhaps it should strip the .sra from the leaf name before creating .fastq output<br></p>
</blockquote>
<hr>
<h2 id="质控"><a href="#质控" class="headerlink" title="质控"></a>质控</h2><p>通过<code>config</code>文件进行批量操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -------------------------------&gt;</span></span><br><span class="line"><span class="comment"># FastQC-v0.11.8 </span></span><br><span class="line"><span class="comment"># -------------------------------&gt;</span></span><br><span class="line">cat 0.sra/sra.infor/sample | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  fastqc --outdir ./2.qc/raw.qc/ --threads 5 ./1.rawfastq/<span class="variable">$&#123;id&#125;</span>*.fastq.gz &gt;&gt; ./<span class="built_in">log</span>/qc.log/rawqc/<span class="variable">$&#123;id&#125;</span>_fastqc.log 2&gt;&amp;1 &amp; </span><br><span class="line"><span class="keyword">done</span> </span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/fastqc.png" alt="fastqc" style="zoom:90%;" /></center>

<p>利用<code>multiqc</code>软件对所有样本的结果进行整合，方便查看。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -------------------------------&gt;</span></span><br><span class="line"><span class="comment"># MultiQC-v1.9</span></span><br><span class="line"><span class="comment"># -------------------------------&gt;</span></span><br><span class="line">multiqc  ./2.qc/raw.qc/*zip  -o ./2.qc/raw.qc/multiqc</span><br></pre></td></tr></table></figure>
<p>输出文件: ./Supplementary/raw_multiqc_report.html</p>
<center><img src="/img/Figures/raw_status_check.png" alt="raw-status" style="zoom:90%;" /></center>

<p>发现测序质量非常好，怀疑已经经过一定的处理</p>
<h2 id="fastp"><a href="#fastp" class="headerlink" title="fastp"></a>fastp</h2><center><img src="/img/Figures/adaptor.png" alt="adapter" style="zoom:90%;" /></center>

<p><code>fastqc</code>和<code>MultiQC</code>给出的报告均显示未发现接头，这里用<code>fastp</code>的默认参数处理。教程中用的<code>trim_galore</code>之前在做ATAC-seq是使用过，跑的非常非常慢。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -------------------------------&gt;</span></span><br><span class="line"><span class="comment"># fastp-v0.20.0</span></span><br><span class="line"><span class="comment"># -------------------------------&gt; </span></span><br><span class="line">cat 0.sra/sra.infor/sample | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  fastp -i ./1.rawfastq/<span class="variable">$&#123;id&#125;</span>_1.fastq.gz -o ./3.cleanfastq/<span class="variable">$&#123;id&#125;</span>_1.fastq.gz \</span><br><span class="line">        -I ./1.rawfastq/<span class="variable">$&#123;id&#125;</span>_2.fastq.gz -O ./3.cleanfastq/<span class="variable">$&#123;id&#125;</span>_2.fastq.gz \</span><br><span class="line">        --thread=6 \</span><br><span class="line">        &gt; <span class="built_in">log</span>/fastp.log/<span class="variable">$&#123;id&#125;</span>.fastp.log 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>以case1_germline样本为例：</p>
<center><img src="/img/Figures/g1_fastp.png" alt="adapter" style="zoom:80%;" /></center>

<p>发现还是有一定效果的。</p>
<h1 id="比对"><a href="#比对" class="headerlink" title="比对"></a>比对</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -------------------------------&gt;</span></span><br><span class="line"><span class="comment"># bwa-v0.7.17</span></span><br><span class="line"><span class="comment"># -------------------------------&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引文件：</span></span><br><span class="line">INDEX=/public/workspace/lincs/wes_cancer/data/gatk_hg38</span><br><span class="line"></span><br><span class="line">cat 0.sra/sra.infor/sample | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;start bwa for <span class="variable">$&#123;id&#125;</span>&quot;</span> `date`</span><br><span class="line">  fq1=./3.cleanfastq/<span class="variable">$&#123;id&#125;</span>_1.fq.gz</span><br><span class="line">  fq2=./3.cleanfastq/<span class="variable">$&#123;id&#125;</span>_2.fq.gz</span><br><span class="line">  bwa mem -M -t 6 -R <span class="string">&quot;@RG\tID:<span class="variable">$&#123;id&#125;</span>\tSM:<span class="variable">$&#123;id&#125;</span>\tLB:WXS\tPL:Illumina&quot;</span> <span class="variable">$&#123;INDEX&#125;</span> <span class="variable">$&#123;fq1&#125;</span> <span class="variable">$&#123;fq2&#125;</span> | samtools sort -@ 6 -m 1G  -o ./4.alignment/<span class="variable">$&#123;id&#125;</span>.bam -</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;end bwa for <span class="variable">$&#123;id&#125;</span>&quot;</span> `date`</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/bamfile.png" alt="bamfile" style="zoom:90%;" /></center>

<p>bwa比对后先产生sam文件，但是因为sam文件太大，占用空间，要转换成二进制的bam文件。因此，脚本中把比对的结果通过管道符1传给 <code>samtools</code>进行排序后直接生存bam文件(中划线“-”作为缓存占位符)，排序的依据是bam文件中reads比对到参考基因组的染色体和坐标。</p>
<p>bam文件格式：</p>
<center><img src="/img/Figures/bam_info.png" alt="bamfile" style="zoom:50%;" /></center>

<h1 id="比对结果的质控"><a href="#比对结果的质控" class="headerlink" title="比对结果的质控"></a>比对结果的质控</h1><h2 id="samtools-stats-plot-bamstats"><a href="#samtools-stats-plot-bamstats" class="headerlink" title="samtools stats + plot-bamstats"></a>samtools stats + plot-bamstats</h2><p>利用<code>samtools stats</code>对bam文件进行统计</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -------------------------------&gt;</span></span><br><span class="line"><span class="comment"># samtools-v1.9</span></span><br><span class="line"><span class="comment"># -------------------------------&gt; </span></span><br><span class="line">cat 0.sra/sra.infor/sample | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  bam=./4.alignment/<span class="variable">$&#123;id&#125;</span>.bam</span><br><span class="line">  samtools stats -@ 6 --reference ~/public/workspace/lincs/wes_cancer/data/Homo_sapiens_assembly38.fasta <span class="variable">$&#123;bam&#125;</span> &gt; ./4.alignment/stats/<span class="variable">$&#123;id&#125;</span>.<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line">  plot-bamstats -p ./4.alignment/stats/<span class="variable">$&#123;id&#125;</span> ./4.alignment/stats/<span class="variable">$&#123;id&#125;</span>.<span class="built_in">stat</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>可以查看bamfile比对的信息（以case1_germine为例）：</p>
<center><img src="/img/Figures/g1-stat.png" alt="bam-info" style="zoom:60%;" /></center>

<hr>
<p><strong>Troubleshooting</strong><br>在<code>plot-bamstats</code>时遇到了如下报错（用的samtools-v1.9，samtools-v1.7显示command not found）。因为plot-bamstats需要调用<code>gnuplot</code>去画图，这里缺少了<code>libjpeg.so.8</code>这个库（是一款开源的jpeg解压库）。</p>
<center><img src="/img/Figures/plot-error.png" alt="plot-error" style="zoom:90%;" /></center>

<p>用conda安装<code>libjpeg.so.8</code>库：</p>
<center><img src="/img/Figures/conda-libjpeg.png" alt="libjpeg" style="zoom:90%;" /></center>

<p>然后报错了,用mamba install也一样是报错：<br><br><img src="/img/Figures/conda-install-error.png" alt="install-error" style="zoom:100%;" /></p>
<p>最后只能去官网下载tar.gz自己编译安装：<br>官网：<a href="http://www.ijg.org/">http://www.ijg.org/</a><br>我下载的是：<a href="http://www.ijg.org/files/jpegsrc.v8d.tar.gz">http://www.ijg.org/files/jpegsrc.v8d.tar.gz</a></p>
<p>但是一直显示编译错误，没有权限，可能要sudo? </p>
<center><img src="/img/Figures/make-error.png" alt="make-error" style="zoom:100%;" /></center>

<p>编译警告：warning: Clock skew detected. Your build may be incomplete. 按着教程写了这个：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f | xargs -n 5 touch</span><br></pre></td></tr></table></figure>
<p>但是还是报一样的错</p>
<p>又试了一下mamba install！！成功了！！</p>
<center><img src="/img/Figures/mamba-success.png" alt="mamba" style="zoom:100%;" /></center>

<p>但是！！<code>libjpeg-turbo</code>是libjpeg是的升级版，<code>plot-bamstats</code>不支持用<code>libjpeg-turbo</code>。</p>
<p>再创建新环境，重新装了<code>gnuplot</code>之后新报错又来了！conda gnuplot自动装上了jpeg的解压库。所以上面<code>libjpeg.so.8</code>库缺失这个问题算是解决了！</p>
<p>先调用<code>gnuplot</code>试一下（需要写全路径，相对路径会报错）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gnuplot ~/MyCourse/CancerGenomics/WES.proj/4.alignment/stats/plot/case1_germline-quals.gp</span><br></pre></td></tr></table></figure>
<p>可以成功画图了！</p>
<center><img src="/img/Figures/case1_germline-quals.png" style="zoom:75%;" /></center>

<p>然后用<code>plot-bamstats</code>，虽然这里有报错，但图片都出来了</p>
<center><img src="/img/Figures/samtool1.9error.png" alt="error" style="zoom:80%;" /></center>

<p>参考：<br><a href="https://www.jieandze1314.com/post/cnposts/166/">166-为什么使用samtools检查bam质量时报错？</a><br><a href="https://blog.csdn.net/wp133716/article/details/107197125">libjpeg.so.8: cannot open shared object file: No such file or directory.</a><br><a href="https://www.linuxquestions.org/questions/linux-newbie-8/error-clock-skew-detected-make-may-be-incomplete-what%27s-wrong-125912/?__cf_chl_jschl_tk__=cfbca89553aa9c176c35b0156876e5b800ec1c51-1617019792-0-AZ3wgOYkBndrrNqbZ2jUZh3XuYSB1HGsI9OaMmmL0cPqIrKE2XFuDAYw-UufXgiH8ArtnWymYKCGqM8C4mbGIaE7zSFwS2d4QSLFAadibrZLkjNxWVHMFsWah0IBlhOQg-LruE45VXiyVrY1g-DQbSib83JEEaV86GXVe4l4QHFwabMGxZgoiUJzGvvDOOFJN7qH1BvkDC0p-aPA5VjiuEunTLdiUR92A_x9ZRXQFB85eer1Zgp5d82FRB-5LjpJ3jBPXA_lSZGQED2DAv078tYyFshTQQAhfe7dM0ZYJY1hFBdEURdlGF9QUEhx54i30OQe_2xnKVQrOpyTSAeWLrDZK04zCpBOQuC4RAMbefGRmQ_-3bpTZ6zpLE023V0AmkAUjQbcM6O-HDdeypZv6DPjrc7-ji7ljm4eX1llhiLBa1O8DEN6f8fM4E4BtGRXIDaJA-RP9Y-LOs5ROXVTtqs0-CGVmsA5CJw06kvS_y2xjZ_BRepHX9DgU-l4Kz5iqQ">Error -&gt;Clock Skew Detected..Make may be incomplete….What’s wrong?</a><br><a href="https://blog.csdn.net/cxq2046/article/details/50253949">安装libjpeg库后提示libjpeg.so.8不存在（linux环境）</a><br><a href="https://blog.csdn.net/jiejinquanil/article/details/106414938">编译警告：warning: Clock skew detected. Your build may be incomplete.</a></p>
<hr>
<p>以case1_germline和case1_biorep_B为例：</p>
<center><img src="/img/Figures/plot-succ.png" alt="show the plot" style="zoom:80%;" /></center>

<h2 id="qualimap"><a href="#qualimap" class="headerlink" title="qualimap"></a>qualimap</h2><p><code>qualimap</code>可用来查看覆盖深度等信息，需要py=3.9，跑的时候占用很多内存，大概跑了30分钟</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -------------------------------&gt;</span></span><br><span class="line"><span class="comment"># qualimap-v2.2.2</span></span><br><span class="line"><span class="comment"># -------------------------------&gt; </span></span><br><span class="line">cat 0.sra/sra.infor/sample | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  qualimap bamqc --java-mem-size=10G -gff /public/workspace/lincs/wes_cancer/data/hg38.exon.bed -nr 100000 -nw 500 -nt 8 -bam ./4.alignment/<span class="variable">$&#123;id&#125;</span>.bam -outdir ./4.alignment/qualimap/<span class="variable">$&#123;id&#125;</span> &amp;</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>可得到HTML格式的报告，以case1_germline为例：</p>
<center><img src="/img/Figures/qualimap-res.png" alt="qualimap-res" style="zoom:80%;" /></center>

<p>下图展现了测序深度与基因组的覆盖信息，结果表明：有65%的位点测序深度达到50X</p>
<table><tr>
<td><img src="/img/Figures/coverage.png" border=0></td>
<td><img src="/img/Figures/genome-fraction.png" border=0></td>
</tr></table>

<h1 id="GATK流程和找变异"><a href="#GATK流程和找变异" class="headerlink" title="GATK流程和找变异"></a>GATK流程和找变异</h1><h2 id="Mark-Duplicates-Picard"><a href="#Mark-Duplicates-Picard" class="headerlink" title="Mark Duplicates(Picard)"></a>Mark Duplicates(Picard)</h2><p><a href="https://gatk.broadinstitute.org/hc/en-us/articles/360057439771-MarkDuplicates-Picard-">Manual-Mark Duplicates(Picard)</a></p>
<p><code>- Xmx20G -Djava. io. tmpdir=./</code>: 设置调用的内存大小为20G<br><code>-I $BAM</code>:指定输入文件<br><code>--REMOVE_DUPLICATES=true</code>: 删除掉重复序列，如果不加这个参数，就只是标记重复序列而不会删除。<br><code>-O $&#123;id&#125;_ marked.bam</code>: 输出文件</p>
<ul>
<li>脚本思路：<ol>
<li>进入到<code>while read id;do... ;done</code>循环后，每read读取一行为一个id,也就是一个样本名，对于每一个样本,再赋值bam文件的具体路径，命名为<code>BAM</code>；</li>
<li>if判断语句，判断是否已经存在生成的<code>./5. gatk/ok.$&#123;id&#125;_ marked.status</code>文件，如果存在,就不再执行，如果不存在就继续往下走。需要注意的是，如果在shell命令执行后，会有一个返回值$?，如果返回值为0，只上一步命令成功执行，否则执行失败;</li>
<li><code>echo start.. .date</code>这是为了记录时间，和后面的<code>echo end. . . date</code>相对应，这样我们可以知道跑完一个样本需要的时间;</li>
<li>如果命令成功执行，就创建一个空文件<code>ok.$&#123;id&#125;_ marked.status</code>。</li>
</ol>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -------------------------------&gt;</span></span><br><span class="line"><span class="comment"># GATK-v4.2.0.0</span></span><br><span class="line"><span class="comment"># -------------------------------&gt; </span></span><br><span class="line"></span><br><span class="line">cat 0.sra/sra.infor/sample  | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  BAM=./4.alignment/<span class="variable">$&#123;id&#125;</span>.bam</span><br><span class="line">  <span class="keyword">if</span> [ ! -f ./5.gatk/ok.<span class="variable">$&#123;id&#125;</span>_marked.status ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;start MarkDuplicates for <span class="variable">$&#123;id&#125;</span>&quot;</span> `date`</span><br><span class="line">    gatk --java-options <span class="string">&quot;-Xmx20G -Djava.io.tmpdir=./&quot;</span> MarkDuplicates \</span><br><span class="line">    -I <span class="variable">$&#123;BAM&#125;</span> \</span><br><span class="line">    --REMOVE_DUPLICATES <span class="literal">true</span> \</span><br><span class="line">    -O ./5.gatk/<span class="variable">$&#123;id&#125;</span>_marked.bam \</span><br><span class="line">    -M ./5.gatk/<span class="variable">$&#123;id&#125;</span>.metrics \</span><br><span class="line">    1&gt;./<span class="built_in">log</span>/redup.log/<span class="variable">$&#123;id&#125;</span>_log.mark 2&gt;&amp;1 </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> [ $? -eq 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      touch ./5.gatk/ok.<span class="variable">$&#123;id&#125;</span>_marked.status</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;end MarkDuplicates for <span class="variable">$&#123;id&#125;</span>&quot;</span> `date`</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>比对好后50G的bam一共跑了三个半小时：</p>
<center><img src="/img/Figures/redup-time.png" alt="redup-time" style="zoom:80%;" /></center>

<p>最后是用samtools对生成的bam文件构建索引，这是后续步骤的要求。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -------------------------------&gt;</span></span><br><span class="line"><span class="comment"># samtools-v1.9</span></span><br><span class="line"><span class="comment"># -------------------------------&gt; </span></span><br><span class="line">cat 0.sra/sra.infor/sample  | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  samtools index -@ 16 -m 4G -b ./5.gatk/<span class="variable">$&#123;id&#125;</span>_marked.bam ./5.gatk/<span class="variable">$&#123;id&#125;</span>_marked.bai</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/redup-res.png" alt="redup-res" style="zoom:80%;" /></center>

<p>查看redup的结果:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -------------------------------&gt;</span></span><br><span class="line"><span class="comment"># samtools-v1.9</span></span><br><span class="line"><span class="comment"># -------------------------------&gt; </span></span><br><span class="line"><span class="comment"># wc -l 查看行数</span></span><br><span class="line">samtools view ./4.alignment/case1_biorep_A_techrep.bam |wc -l</span><br><span class="line">samtools view ./5.gatk/case1_biorep_A_techrep_marked.bam |wc -l</span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/redup-res-view.png" alt="redup-res-view" style="zoom:100%;" /></center>

<h2 id="碱基质量重校正-BQSR"><a href="#碱基质量重校正-BQSR" class="headerlink" title="碱基质量重校正 BQSR"></a>碱基质量重校正 BQSR</h2><p>对于WGS或者WES的测序数据，最关心的问题是变异检测，而变异检测和碱基质量值密切相关。但碱基的质量值由测序仪和测序系统产生，机器带来的系统误差和噪声是不可避免的。因此，找变异之前，需要进行碱基质量重校正BQSR(Base Quality Score Recalibration)。用到了GATK的两个工具<code>BaseRecalibrator</code>和<code>ApplyBQSR</code>。</p>
<p><a href="https://gatk.broadinstitute.org/hc/en-us/articles/360056969412-BaseRecalibrator">Manual-BaseRecalibrator</a></p>
<blockquote>
<p><strong>Input</strong><br>    The input read data whose base quality scores need to be assessed.<br>    A database of known polymorphic sites to skip over.<br> <strong>Output</strong><br>    A GATK Report file with many tables:<br>    1. The list of arguments<br>    2. The quantized qualities table<br>    3. The recalibration table by read group<br>    1. The recalibration table by quality score<br>    1. The recalibration table for all the optional covariates  <br><br>    这里计算出了所有需要进行重校正的reads和特征值，然后把这些信息输出为一份校准表文件(recal.table) 。<br>    – known-sites参数需要输入已知且可靠的变异位点。</p>
</blockquote>
<p><a href="https://gatk.broadinstitute.org/hc/en-us/articles/360056968652-ApplyBQSR">Manual-ApplyBQSR</a></p>
<blockquote>
<p><strong>Input</strong><br>    A BAM or CRAM file containing input read data<br>    The covariates table (= recalibration file) generated by BaseRecalibrator on the input BAM or CRAM file<br><strong>Output</strong><br>    A BAM or CRAM file containing the recalibrated read data  <br><br>    这一步利用第-步得到的校准表文件(recal.table)重新调整原来BAM文件中的碱基质量值，并使用这个新的质量值重新输出一份新的BAM文件。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">snp=~/Reference/dbsnp_146.hg38/dbsnp_146.hg38.vcf.gz</span><br><span class="line">indel=~/Reference/GATK/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz</span><br><span class="line">ref=~/Reference/GATK/Homo_sapiens_assembly38.fasta</span><br><span class="line">cat ./0.sra/sra.infor/sample  | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> [ ! -f ./5.gatk/<span class="variable">$&#123;id&#125;</span>_bqsr.bam ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;start BQSR for <span class="variable">$&#123;id&#125;</span>&quot;</span> `date`</span><br><span class="line">    gatk --java-options <span class="string">&quot;-Xmx60G -Djava.io.tmpdir=./&quot;</span>  BaseRecalibrator \</span><br><span class="line">    -R <span class="variable">$ref</span>  \</span><br><span class="line">    -I ./5.gatk/<span class="variable">$&#123;id&#125;</span>_marked.bam  \</span><br><span class="line">    --known-sites <span class="variable">$&#123;snp&#125;</span> \</span><br><span class="line">    --known-sites <span class="variable">$&#123;indel&#125;</span> \</span><br><span class="line">    -O ./5.gatk/recal.table/<span class="variable">$&#123;id&#125;</span>_recal.table \</span><br><span class="line">    1&gt;./5.gatk/recal.log/<span class="variable">$&#123;id&#125;</span>_log.recal 2&gt;&amp;1 </span><br><span class="line">    </span><br><span class="line">    gatk --java-options <span class="string">&quot;-Xmx60G -Djava.io.tmpdir=./&quot;</span>  ApplyBQSR \</span><br><span class="line">    -R <span class="variable">$ref</span>  \</span><br><span class="line">    -I ./5.gatk/<span class="variable">$&#123;id&#125;</span>_marked.bam  \</span><br><span class="line">    -bqsr ./5.gatk/recal.table/<span class="variable">$&#123;id&#125;</span>_recal.table \</span><br><span class="line">    -O ./5.gatk/bqsr.bam/<span class="variable">$&#123;id&#125;</span>_bqsr.bam \</span><br><span class="line">    1&gt;./5.gatk/applyBQSR.log/<span class="variable">$&#123;id&#125;</span>_log.ApplyBQSR  2&gt;&amp;1 </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;end BQSR for <span class="variable">$&#123;id&#125;</span>&quot;</span> `date`</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/bqsr-time.png" alt="bqsr-time" style="zoom:60%;" /></center>

<hr>
<p><strong>Troubleshooting</strong></p>
<blockquote>
<p>A USER ERROR has occurred: Input files reference and features have incompatible contigs: No overlapping contigs found.</p>
</blockquote>
<p>–known-sites的版本选择问题，dbsnp146不报错，dbsnp153报错，需要使用与input文件contig name一致的reference。<br><strong>官网的论坛里开发者回复：</strong><br>the exception you get arises from the fact that you are using decoy reference genome version while attempting to recalibrate on known-sites for nonDecoy reference genome. Note that it might use different contig names (N instead of chrN)</p>
<hr>
<center><img src="/img/Figures/bqsr-res.png" alt="bqsr-res" style="zoom:50%;" /></center>

<h2 id="单样本找Germline-SNPs-INDELs"><a href="#单样本找Germline-SNPs-INDELs" class="headerlink" title="单样本找Germline SNPs/INDELs"></a>单样本找Germline SNPs/INDELs</h2><center><img src="/img/Figures/mainstep-ssGermline.png" alt="mainstep" style="zoom:70%;" /></center>

<p><a href="https://gatk.broadinstitute.org/hc/en-us/articles/360056969012-HaplotypeCaller">Manual-HaplotypeCaller</a></p>
<blockquote>
<p><strong>Input</strong><br> Input bam file(s) from which to make variant calls<br><strong>Output</strong><br> Either a VCF or GVCF file with raw, unfiltered SNP and indel calls. Regular VCFs must be filtered either by variant recalibration (Best Practice) or hard-filtering before use in downstream analyses. If using the GVCF workflow, the output is a GVCF file that must first be run through GenotypeGVCFs and then filtering before further analysis.</p>
</blockquote>
<p>原理：</p>
<ol>
<li>定义变异区间：首先寻找确定进行变异检测的区间</li>
<li>数据组装：对区间内的数据及基因组进行组装(De Bruijnlike graph)并预估单倍型</li>
<li>根据比对结果，确定单倍型的最大似然值：将reads回帖单倍型数据(PairHMM algorithm)，计算各个单倍型出现的最大似然值</li>
<li>将单倍型比对结果转化为在特定位置位置处的分型左右滑动查看全部内容。</li>
<li>模块分步分析说明</li>
</ol>
<center><img src="/img/Figures/g-vcf.png" alt="vcf-file" style="zoom:80%;" /></center>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">snp=~/Reference/dbsnp_146.hg38/dbsnp_146.hg38.vcf.gz</span><br><span class="line">indel=~/Reference/GATK/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz</span><br><span class="line">ref=~/Reference/GATK/Homo_sapiens_assembly38.fasta</span><br><span class="line">bed=~/Reference/GATK/hg38_exon.bed</span><br><span class="line"></span><br><span class="line">cat ./0.sra/sra.infor/sample | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;start HC for <span class="variable">$&#123;id&#125;</span>&quot;</span> `date`</span><br><span class="line">  gatk --java-options <span class="string">&quot;-Xmx25g&quot;</span> HaplotypeCaller -ERC GVCF \</span><br><span class="line">  -R <span class="variable">$&#123;ref&#125;</span> \</span><br><span class="line">  -I ./5.gatk/bqsr.bam/<span class="variable">$&#123;id&#125;</span>_bqsr.bam \</span><br><span class="line">  --dbsnp <span class="variable">$&#123;snp&#125;</span> \</span><br><span class="line">  -L <span class="variable">$&#123;bed&#125;</span> \</span><br><span class="line">  -O ./5.gatk/gvcf/<span class="variable">$&#123;id&#125;</span>_raw.vcf \</span><br><span class="line">  1&gt;./<span class="built_in">log</span>/HaplotypeCaller.log<span class="variable">$&#123;id&#125;</span>_log.HC 2&gt;&amp;1</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;end HC for <span class="variable">$&#123;id&#125;</span>&quot;</span> `date`</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>共跑了五个小时：</p>
<center><img src="/img/Figures/HC-time.png" alt="HC" style="zoom:70%;" /></center>

<p>输出文件：</p>
<center><img src="/img/Figures/vcf-file.png" alt="vcf-file" style="zoom:80%;" /></center>

<p><a href="https://gatk.broadinstitute.org/hc/en-us/articles/360057439331-GenomicsDBImport">Manual-GenomicsDBImport</a><br>The GATK4 Best Practice Workflow for SNP and Indel calling uses GenomicsDBImport to merge GVCFs from multiple samples. </p>
<blockquote>
<p><strong>Input</strong><br> One or more GVCFs produced by in HaplotypeCaller with the <code>-ERC GVCF</code> or <code>-ERC BP_RESOLUTION</code> settings, containing the samples to joint-genotype.<br><strong>Output</strong><br> A GenomicsDB workspace</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ref=~/Reference/GATK/Homo_sapiens_assembly38.fasta</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ./5.gatk/gvcf</span><br><span class="line"><span class="keyword">for</span> chr <span class="keyword">in</span> chr&#123;1..22&#125; chrX chrY chrM</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">time gatk --java-options <span class="string">&quot;-Xmx60G -Djava.io.tmpdir=./&quot;</span> GenomicsDBImport \</span><br><span class="line">-R <span class="variable">$&#123;ref&#125;</span> \</span><br><span class="line">$(ls ~/MyCourse/CancerGenomics/WES.proj/5.gatk/gvcf/*_raw.vcf | awk <span class="string">&#x27;&#123;print &quot;-V &quot;$0&quot; &quot;&#125;&#x27;</span>) \</span><br><span class="line">-L <span class="variable">$&#123;chr&#125;</span> \</span><br><span class="line">--genomicsdb-workspace-path gvcfs_<span class="variable">$&#123;chr&#125;</span>.db</span><br><span class="line"></span><br><span class="line">time gatk --java-options <span class="string">&quot;-Xmx60G -Djava.io.tmpdir=./&quot;</span> GenotypeGVCFs \</span><br><span class="line">-R <span class="variable">$&#123;ref&#125;</span> \</span><br><span class="line">-V gendb://gvcfs_<span class="variable">$&#123;chr&#125;</span>.db \</span><br><span class="line">-O gvcfs_<span class="variable">$&#123;chr&#125;</span>.vcf</span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p><a href="https://gatk.broadinstitute.org/hc/en-us/articles/360056968552-GatherVcfs-Picard-">Manual-GatherVcfs</a><br>Gathers multiple VCF files from a scatter operation into a single VCF file. Input files must be supplied in genomic order and must not have events at overlapping positions.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gatk --java-options <span class="string">&quot;-Xmx60G -Djava.io.tmpdir=./&quot;</span> GatherVcfs \</span><br><span class="line">$(<span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..22&#125; X Y M;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;-I gvcfs_chr<span class="variable">$&#123;i&#125;</span>.vcf&quot;</span> ;<span class="keyword">done</span>) \</span><br><span class="line">-O merge.vcf</span><br></pre></td></tr></table></figure>
<p>得到</p>
<center><img src="/img/Figures/vcf-file2.png" alt="vcf-file" style="zoom:100%;" /></center>

<hr>
<p>vcf文件分为两个部分：</p>
<ul>
<li>以##开头的头文件信息：主要包括vcf文件版本、FORMAT、INFO、参考基因组以及执行程序等信息</li>
<li>主体部分：<ol>
<li>CHROM(chromosome):染色体</li>
<li>POS  变异位点在参考基因组中的位置</li>
<li>ID - identifier: variant的ID。比如在dbSNP中有该SNP的id，则会在此行给出；若没有，则用<code>.</code>表示其为一个novel variant。</li>
<li>REF - reference base(s):参考碱基，染色体上面的碱基，必须是ATCGN中的一个，N表示不确定碱基</li>
<li>ALT - alternate base(s):与参考序列比较发生突变的碱基</li>
<li>QUAL - quality: Phred格式(Phred_scaled)的质量值，表示在该位点存在variant的可能性；该值越高，则variant的可能性越大；计算方法：Phred值 = -10 * log (1-p) p为variant存在的概率。</li>
<li>FILTER - _filter status: 使用上一个QUAL值来进行过滤的话，是不够的。GATK能使用其它的方法来进行过滤，过滤结果中通过则该值为<code>PASS</code>;若variant不可靠，则该项不为<code>PASS</code>或<code>.</code>。</li>
<li>INFO - additional information: 这一行是variant的详细信息，具体如下：<ul>
<li>DP-read depth：样本在这个位置的reads覆盖度。是一些reads被过滤掉后的覆盖度。DP4:高质量测序碱基，位于REF或者ALT前后<ul>
<li>QD：通过深度来评估一个变异的可信度。</li>
<li>MQ：表示覆盖序列质量的均方值RMS Mapping Quality</li>
<li>FQ：phred值关于所有样本相似的可能性</li>
<li>AC，AF和AN：AC(Allele Count) 表示该Allele的数目；AF(Allele Frequency) 表示Allele的频率； AN(Allele Number) 表示Allele的总数目。<br>对于1个diploid sample而言：则基因型 0/1 表示sample为杂合子，Allele数为1(双倍体的sample在该位点只有1个等位基因发生了突变)，<br>Allele的频率为0.5(双倍体的sample在该位点只有50%的等位基因发生了突变)，总的Allele为2；<br>基因型 1/1 则表示sample为纯合的，Allele数为2，Allele的频率为1，总的Allele为2。</li>
<li>BaseQRankSum：比较支持变异的碱基和支持参考基因组的碱基的质量。<br>负值表示支持变异的碱基质量值不及支持参考基因组的，<br>正值则相反，支持变异的质量值好于参考基因组的。<br>0表示两者无明显差异。</li>
<li>ReadPosRankSum：检测变异位点是否有位置偏好性（是否存在于序列末端，此时往往容易出错）。最佳值为0，表示变异与其在序列上的位置无关。负值表示变异位点更容易在末端出现，正值表示参考基因组中的等位基因更容易在末端出现。</li>
</ul>
</li>
</ul>
</li>
<li>FORMAT和最后一列sample中的信息是对应的<ul>
<li>AD和DP：AD(Allele Depth)为sample中每一种allele的reads覆盖度,在diploid中则是用逗号分割的两个值，前者对应ref基因型，后者对应variant基因型；<br>DP（Depth）为sample中该位点的覆盖度。</li>
<li>GT：样品的基因型（genotype）。两个数字中间用<code>/</code>分开，这两个数字表示双倍体的sample的基因型。<br>0 表示样品中有ref的allele; 1表示样品中variant的allele；2表示有第二个variant的allele。因此：0/0 表示sample中该位点为纯合的，和ref一致； 0/1 表示sample中该位点为杂合的，有ref和variant两个基因型； 1/1 表示sample中该位点为纯合的，和variant一致。</li>
<li>GQ：即第二可能的基因型的PL值，相对于最可能基因型的PL值（其PL=0）而言，大于99时，其信息量已不大，因此大于99的全部赋值99。当GQ值很小时，意味着第二可能基因型与最可能基因型差别不大。</li>
<li>GL：三种基因型（RR RA AA）出现的可能性，R表示参考碱基，A表示变异碱基</li>
<li>DV：高质量的非参考碱基</li>
<li>SP：phred的p值误差线</li>
<li>PL：指定的三种基因型的可能性(provieds the likelihoods of the given genotypes)。这三种指定的基因型为(0/0,0/1,1/1)，这三种基因型的概率总和为1。和之前不一致，该值越大，表明为该种基因型的可能性越小。</li>
</ul>
</li>
</ol>
</li>
</ul>
<hr>
<h2 id="Mutect找Somatic-Mutations"><a href="#Mutect找Somatic-Mutations" class="headerlink" title="Mutect找Somatic Mutations"></a>Mutect找Somatic Mutations</h2><p>前面单样本走GATK HaplotypeCaller流程得到vcf文件主要包含了germline mutations信息。但是我们这里分析的是肿瘤样本，包含成对的tumor和normal样本，更加关心的是tumor样本中所包含的somatic mutations信息。所以我们应该走GATK的somatic mutations流程:<br>Identify somatic short variants (SNVs and Indels) in one or more tumor samples from a single individual, with or without a matched normal sample.</p>
<center><img src="/img/Figures/somatic.png" alt="somatic" style="zoom:60%;" /></center>

<p><a href="https://gatk.broadinstitute.org/hc/en-us/articles/360056969692-Mutect2">Maunal-Mutect2</a><br>Call somatic short mutations via local assembly of haplotypes. Short mutations include single nucleotide (SNA) and insertion and deletion (indel) alterations. The caller uses a Bayesian somatic genotyping model that differs from the original MuTect and uses the assembly-based machinery of HaplotypeCaller.</p>
<blockquote>
<p>三种模式：</p>
<ol>
<li>tumor-normal mode where a tumor sample is matched with a normal sample in analysis;</li>
<li>tumor-only mode where a single sample’s alignment data undergoes analysis;</li>
<li>mitochondrial mode where sensitive calling at high depths is desirable</li>
</ol>
</blockquote>
<p>制作config文件，normal和tumor样本成对出现</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># matched.sample</span></span><br><span class="line">case1_germline  case1_biorep_A_techrep</span><br><span class="line">case1_germline  case1_biorep_B</span><br><span class="line">case1_germline  case1_biorep_C</span><br><span class="line">case1_germline  case1_techrep</span><br><span class="line"></span><br><span class="line"><span class="comment">## mutect.sh</span></span><br><span class="line">ref=~/Reference/GATK/Homo_sapiens_assembly38.fasta</span><br><span class="line">bed=~/Reference/GATK/hg38_exon.bed</span><br><span class="line"></span><br><span class="line">cat 6.mutect/sample.infor/matched.sample | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  arr=(<span class="variable">$&#123;id&#125;</span>)</span><br><span class="line">  sample=<span class="variable">$&#123;arr[1]&#125;</span></span><br><span class="line">  T=./5.gatk/bqsr.bam/<span class="variable">$&#123;arr[1]&#125;</span>_bqsr.bam</span><br><span class="line">  N=./5.gatk/bqsr.bam/<span class="variable">$&#123;arr[0]&#125;</span>_bqsr.bam</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;start Mutect2 for <span class="variable">$&#123;id&#125;</span>&quot;</span> `date`</span><br><span class="line">  gatk  --java-options <span class="string">&quot;-Xmx36G -Djava.io.tmpdir=./&quot;</span>  Mutect2 -R <span class="variable">$&#123;ref&#125;</span> \</span><br><span class="line">  -I <span class="variable">$&#123;T&#125;</span> -tumor  $(basename <span class="string">&quot;<span class="variable">$T</span>&quot;</span> _bqsr.bam) \</span><br><span class="line">  -I <span class="variable">$&#123;N&#125;</span> -normal $(basename <span class="string">&quot;<span class="variable">$N</span>&quot;</span> _bqsr.bam) \</span><br><span class="line">  -L <span class="variable">$&#123;bed&#125;</span>  \</span><br><span class="line">  -O ./6.mutect/<span class="variable">$&#123;sample&#125;</span>_mutect2.vcf</span><br><span class="line"></span><br><span class="line">  gatk  FilterMutectCalls \</span><br><span class="line">  -R <span class="variable">$&#123;ref&#125;</span> \</span><br><span class="line">  -V ./6.mutect/<span class="variable">$&#123;sample&#125;</span>_mutect2.vcf \</span><br><span class="line">  -O ./6.mutect/<span class="variable">$&#123;sample&#125;</span>_somatic.vcf</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;end Mutect2 for <span class="variable">$&#123;id&#125;</span>&quot;</span> `date`</span><br><span class="line"></span><br><span class="line">  cat ./6.mutect/<span class="variable">$&#123;sample&#125;</span>_somatic.vcf | perl -alne <span class="string">&#x27;&#123;if(/^#/)&#123;print&#125;else&#123;next unless $F[6] eq &quot;PASS&quot;;next if $F[0] =~/_/;print &#125; &#125;&#x27;</span> &gt; ./6.mutect/<span class="variable">$&#123;sample&#125;</span>_filter.vcf</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>以上代码跑了四个小时。代码解释:首先是<code>Mutect2</code>，主要是根据对正常-肿瘤样本进行位点比较寻找体细胞突变somatic<br>mutations。这里输入了两个配对的T-N样本<code>-I $&#123;T&#125; -tumor $(basename &quot;$T&quot;_ bqsr.bam)</code> 和<code>-I $&#123;N&#125; -normal $(basename &quot;$N&quot;_ bqsr. bam)</code>。<br>这样我们就拿到了每个tumor样本中的突变位点<code>$&#123;samp1e&#125;_ mutect2.vcf</code>。但是这还不够，还要通过<code>FilterMutectCalls</code>过滤，过滤后就是可信度较高的somatic突变位点会被打上<strong>PASS标签</strong>,就是<code>$&#123;samp1e&#125;_ somatic.vcf</code>。<br>最后我们再用一个简单的脚本把打上PASS标签的位点提取出来，得到了<code>$&#123;sample&#125;_ filter.vcf</code>: </p>
<center><img src="/img/Figures/vcf-filter.png" alt="vcf-filter" style="zoom:70%;" /></center>

<h1 id="VEP注释"><a href="#VEP注释" class="headerlink" title="VEP注释"></a>VEP注释</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装vep</span></span><br><span class="line">mamba install -c bioconda ensembl-vep</span><br><span class="line"><span class="comment"># 下载vep的cache及ref</span></span><br><span class="line"><span class="comment"># VEP推荐下载缓冲文件进行注释，后面跑的时候会比较快</span></span><br><span class="line">vep_install -a cf -s homo_sapiens -y GRCh38 -c ~/Reference/vep/ --CONVERT</span><br></pre></td></tr></table></figure>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p><a href="https://asia.ensembl.org/info/docs/tools/vep/script/vep_options.html">Manual-VEP</a></p>
<p>仅注释肿瘤样本（除了case1_germline）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat 0.sra/sra.infor/config.tumor | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;start vep_annotation for <span class="variable">$&#123;id&#125;</span> &quot;</span> `date`</span><br><span class="line">vep --fork 6 --cache --cache_version 103 --offline --format vcf --vcf --force_overwrite \</span><br><span class="line">--fasta /home/data/vip8t02/Reference/vep//homo_sapiens/103_GRCh38/Homo_sapiens.GRCh38.dna.toplevel.fa.gz \</span><br><span class="line">--dir ~/Reference/vep \</span><br><span class="line">--input_file ./6.mutect/<span class="variable">$&#123;id&#125;</span>_filter.vcf \</span><br><span class="line">--output_file ./7.annotation/vep/<span class="variable">$&#123;id&#125;</span>_vep.vcf </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;end vep_annotation for <span class="variable">$&#123;id&#125;</span> &quot;</span> `date`</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>可以得到HTML格式文件及新的vcf（在INFO列加了很多信息）</p>
<center><img src="/img/Figures/annovep.png" alt="annotation" style="zoom:70%;" /></center>

<h2 id="注释结果转maf"><a href="#注释结果转maf" class="headerlink" title="注释结果转maf"></a>注释结果转maf</h2><p>vep注释后需要将vcf文件转换成maf，用到的工具是vcf2maf<br><a href="https://github.com/mskcc/vcf2maf">Github-vcf2maf</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">mamba install -c bioconda vcf2maf</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------------&gt;</span></span><br><span class="line"><span class="comment"># vcf2maf-v1.6.17</span></span><br><span class="line"><span class="comment"># -------------------------------&gt; </span></span><br><span class="line">cat 0.sra/sra.infor/config.tumor | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  sample=./6.mutect/<span class="variable">$&#123;id&#125;</span>_filter.vcf</span><br><span class="line">  normal=case1_germline</span><br><span class="line">  vcf2maf.pl \</span><br><span class="line">  --input-vcf  <span class="variable">$&#123;sample&#125;</span>  \</span><br><span class="line">  --output-maf ./7.annotation/vep/<span class="variable">$&#123;id&#125;</span>_vep.maf \</span><br><span class="line">  --ref-fasta ~/Reference/GATK/Homo_sapiens_assembly38.fasta \</span><br><span class="line">  --tumor-id  <span class="variable">$&#123;id&#125;</span> \</span><br><span class="line">  --normal-id <span class="variable">$&#123;normal&#125;</span> \</span><br><span class="line">  --ncbi-build GRCh38 \</span><br><span class="line">  --vep-path /home/data/vip8t02/anaconda3/envs/vep-103.1/bin \</span><br><span class="line">  --vep-data ~/Reference/vep</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 检查转换后结果</span></span><br><span class="line">less ./7.annotation/vep/case1_biorep_A_techrep_vep.maf | cut -f 10 | sort | uniq -c</span><br><span class="line"></span><br><span class="line">less ./7.annotation/vep/case1_biorep_A_techrep_vep.maf | cut -f 10 | sort | uniq -c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并maf</span></span><br><span class="line">cat ./7.annotation/vep/*maf | grep -v <span class="string">&#x27;^#&#x27;</span>| grep -v <span class="string">&#x27;^Hugo_Symbol&#x27;</span> &gt;./7.annotation/vep/tmp </span><br><span class="line">grep <span class="string">&#x27;Hugo_Symbol&#x27;</span> ./7.annotation/vep/case1_biorep_A_techrep_vep.maf &gt;./7.annotation/vep/header</span><br><span class="line">cat ./7.annotation/vep/header ./7.annotation/vep/tmp &gt;./7.annotation/vep/vep_merge.maf</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/maf-info.png" alt="maf-info" style="zoom:80%;" /></center>

<h2 id="可视化注释结果"><a href="#可视化注释结果" class="headerlink" title="可视化注释结果"></a>可视化注释结果</h2><h3 id="读入数据"><a href="#读入数据" class="headerlink" title="读入数据"></a>读入数据</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library(maftools)</span><br><span class="line"></span><br><span class="line">rm(<span class="built_in">list</span> = ls())</span><br><span class="line">options(stringsAsFactors = <span class="built_in">F</span>)</span><br><span class="line">setwd(<span class="string">&quot;~/MyCourse/CancerGenomics/WES.proj/&quot;</span>)</span><br><span class="line"><span class="comment">## vep</span></span><br><span class="line">vep.laml = read.maf(maf = <span class="string">&#x27;./7.annotation/vep/case1_biorep_A_techrep_vep.maf&#x27;</span>)</span><br><span class="line"><span class="comment">## for vep.laml</span></span><br><span class="line">library(stringr)</span><br><span class="line">vep.laml@data$Protein_Change = paste0(<span class="string">&quot;p.&quot;</span>,</span><br><span class="line">                                      str_sub(vep.laml@data$Amino_acids,<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">                                      vep.laml@data$Protein_position,</span><br><span class="line">                                      str_sub(vep.laml@data$Amino_acids,<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">## save Rdata</span></span><br><span class="line">save(vep.laml, file = <span class="string">&#x27;7.annotation/visualization//laml.Rdata&#x27;</span>)</span><br><span class="line"><span class="comment">## Summary</span></span><br><span class="line">laml=vep.laml</span><br><span class="line">unique(laml@data$Tumor_Sample_Barcode)</span><br><span class="line">getSampleSummary(laml)</span><br><span class="line">getGeneSummary(laml)</span><br><span class="line">getFields(laml)</span><br></pre></td></tr></table></figure>
<h3 id="mafSummary"><a href="#mafSummary" class="headerlink" title="mafSummary"></a>mafSummary</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rm(list = ls())</span></span><br><span class="line"><span class="comment"># require(maftools)</span></span><br><span class="line"><span class="comment"># options(stringsAsFactors = F)</span></span><br><span class="line"><span class="comment"># laml &lt;- load(file = &#x27;laml.Rdata&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## mafsummary</span></span><br><span class="line">png(<span class="string">&#x27;./7.annotation/visualization/plotmafSummary_vep.png&#x27;</span>,res = <span class="number">150</span>,width = <span class="number">1080</span>,height = <span class="number">1080</span>)</span><br><span class="line">plotmafSummary(maf = laml,</span><br><span class="line">                 rmOutlier = <span class="literal">TRUE</span>,</span><br><span class="line">                 showBarcodes = <span class="built_in">T</span>,</span><br><span class="line">                 textSize = <span class="number">0.4</span>,</span><br><span class="line">                 addStat = <span class="string">&#x27;median&#x27;</span>,</span><br><span class="line">                 dashboard = <span class="literal">TRUE</span>,</span><br><span class="line">                 titvRaw = <span class="literal">FALSE</span>)</span><br><span class="line">dev.off()</span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/plot-mat-sum.png" alt="maf-info" style="zoom:60%;" /></center>

<h3 id="oncoplot"><a href="#oncoplot" class="headerlink" title="oncoplot"></a>oncoplot</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">png(<span class="string">&#x27;./7.annotation/visualization/oncoplot_top30.png&#x27;</span>,res = <span class="number">150</span>,width = <span class="number">1080</span>,height = <span class="number">1080</span>)</span><br><span class="line">oncoplot(maf = laml,</span><br><span class="line">           top = <span class="number">30</span>,</span><br><span class="line">           fontSize = <span class="number">0.5</span>,</span><br><span class="line">           sampleOrder = laml@clinical.data$Tumor_Sample_Barcode,</span><br><span class="line">           showTumorSampleBarcodes = <span class="built_in">T</span>)</span><br><span class="line">dev.off()</span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/oncoplot.png" alt="oncoplot" style="zoom:60%;" /></center>

<h3 id="lollopopPlot"><a href="#lollopopPlot" class="headerlink" title="lollopopPlot"></a>lollopopPlot</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">## lollipopPlot for CDH2</span></span><br><span class="line">gene=<span class="string">&#x27;CDH2&#x27;</span></span><br><span class="line"></span><br><span class="line">png(<span class="string">&quot;./7.annotation/visualization/CDH2_vep.png&quot;</span>,res = <span class="number">150</span>,width = <span class="number">1080</span>,height = <span class="number">1080</span>)</span><br><span class="line">maftools::lollipopPlot(maf = laml,</span><br><span class="line">                       gene = gene,</span><br><span class="line">                       AACol = <span class="string">&quot;RefSeq&quot;</span>,</span><br><span class="line">                       labelPos = <span class="string">&#x27;all&#x27;</span>)</span><br><span class="line">dev.off()</span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/CDH2.png" alt="CDH2" style="zoom:60%;" /></center>

<h1 id="拷贝数变异分析（GATK流程）"><a href="#拷贝数变异分析（GATK流程）" class="headerlink" title="拷贝数变异分析（GATK流程）"></a>拷贝数变异分析（GATK流程）</h1><p>拷贝数变异(copy number variations, CNVs)是属于基因组结构变异(structural variation, SV)，是指DNA片段长度在1Kb-3Mb的基因组结构变异。我们首先从GATK的CNV流程开始CNV的分析。</p>
<h2 id="外显子坐标的interval文件"><a href="#外显子坐标的interval文件" class="headerlink" title="外显子坐标的interval文件"></a>外显子坐标的interval文件</h2><p>interval文件其实也是一个坐标文件，类似bed,只不过bed文件的坐标是从0开始记录，而interval文件的坐标是从1开始记录。使用基因组interval 文件可以定义软件分析的分辨率。如果是全基因组测序，interval 文件就用全基因组坐标的等间隔区间就好。对于外显子组的数据，我们使用捕获试剂盒的目标区域，理论上应该返回原文查找对应试剂盒，去搜索其捕获外显子的区域，一般是外显子侧翼上下游250bp以内。</p>
<p>首先使用<code>BedToIntervalist</code>工具将bed转成interval格式(其实前面已经完成)，然后用<code>PreprocessIntervals</code>工具获取target区间，即外显子侧翼上下游250bp.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ref=~/Reference/GATK/Homo_sapiens_assembly38.fasta</span><br><span class="line">bed=~/Reference/GATK/hg38_exon.bed</span><br><span class="line">dict=~/Reference/GATK/Homo_sapiens_assembly38.dict</span><br><span class="line"></span><br><span class="line"><span class="comment">## bed to intervals_list</span></span><br><span class="line">gatk BedToIntervalList -I <span class="variable">$&#123;bed&#125;</span> -O ~/Reference/GATK/hg38.exon.interval_list -SD <span class="variable">$&#123;dict&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Preprocess Intervals</span></span><br><span class="line">gatk  PreprocessIntervals \</span><br><span class="line">-L ~/Reference/GATK/hg38.exon.interval_list \</span><br><span class="line">--sequence-dictionary <span class="variable">$&#123;dict&#125;</span> \</span><br><span class="line">--reference <span class="variable">$&#123;ref&#125;</span>  \</span><br><span class="line">--padding 250 \</span><br><span class="line">--bin-length 0 \</span><br><span class="line">--interval-merging-rule OVERLAPPING_ONLY \</span><br><span class="line">--output ~/Reference/GATK/targets.preprocessed.interval_list</span><br></pre></td></tr></table></figure>
<h2 id="获取样本的read-counts"><a href="#获取样本的read-counts" class="headerlink" title="获取样本的read counts"></a>获取样本的read counts</h2><p>这里分为两小步进行:</p>
<ol>
<li>首先是获取所有样本的read counts, 用到了工具是<code>CollectReadCounts</code>，其根据所提供的interval文件，对bam文件进行reads计数，可以简单理解为把bam文件转换成interval区间的reads数。最后会生成一个HDF5格式的文件，需要用第三方软件HDFView来查看，这里不做展示。这个文件记录了每个基因组interval文件的CONTIG, START， END和原始COUNT值，并制成表格。</li>
<li>然后构建正常样本的<code>CNV panel of normals</code>，生成正常样本的<code>cnvponM.pon.hdf5</code> 文件。对于外显子组捕获测序数据，捕获过程会引入一定的的噪音。因此后面需要降噪，该文件就是用于后面第3步<code>DenoiseReadCounts</code>。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">interval=~/Reference/GATK/targets.preprocessed.interval_list</span><br><span class="line">ref=~/Reference/GATK/Homo_sapiens_assembly38.fasta</span><br><span class="line"></span><br><span class="line">cat 0.sra/sra.infor/config.sample | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  i=./5.gatk/bqsr.bam/<span class="variable">$&#123;id&#125;</span>_bqsr.bam</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$&#123;i&#125;</span></span><br><span class="line">  <span class="comment">## step1 : CollectReadCounts</span></span><br><span class="line">  time gatk  --java-options <span class="string">&quot;-Xmx48G&quot;</span> CollectReadCounts \</span><br><span class="line">  -I <span class="variable">$&#123;i&#125;</span> \</span><br><span class="line">  -L <span class="variable">$&#123;interval&#125;</span> \</span><br><span class="line">  -R <span class="variable">$&#123;ref&#125;</span> \</span><br><span class="line">  --format TSV  \</span><br><span class="line">  --interval-merging-rule OVERLAPPING_ONLY \</span><br><span class="line">  --output ./8.cnv/counts/hdf5/<span class="variable">$&#123;id&#125;</span>.clean_counts.tsv</span><br><span class="line">  </span><br><span class="line">  <span class="comment">## step2 : Generate a CNV panel of normals:cnvponM.pon.tsv</span></span><br><span class="line">  gatk  --java-options <span class="string">&quot;-Xmx48G&quot;</span> CreateReadCountPanelOfNormals \</span><br><span class="line">  --minimum-interval-median-percentile 5.0 \</span><br><span class="line">  --output ./8.cnv/cnvponM.pon.tsv \</span><br><span class="line">  --input ./8.cnv/counts/hdf5/case1_germline.clean_counts.tsv</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>跑了半个小时</p>
<h2 id="降噪-DenoiseReadCounts"><a href="#降噪-DenoiseReadCounts" class="headerlink" title="降噪 DenoiseReadCounts"></a>降噪 DenoiseReadCounts</h2><p>该步骤用到的工具是<code>DenoiseReadCounts</code>，主要是做了一个标准化和降噪，会生成两个文件<code>$&#123;id&#125;. clean. standardizedCR.tsv</code>和<code>$&#123;id&#125;.clean.denoisedCR.tsv</code>,该工具会根据PoN的counts中位数对输入文件<code>$&#123;id&#125;.clean_counts.hdf5</code> 进行标准化，包括log2转换。然后使用PoN的主成分进行标准化后的copy ratios降噪。实际上这里只需要对tumor样本进行降噪的，为了比较，可以把tumor和normal样本都分析了一遍，后面可以做个对比。</p>
<p><a href="https://gatk.broadinstitute.org/hc/en-us/articles/360057440151-DenoiseReadCounts">Manual-DeoiseReadCounts</a></p>
<p>The input counts are standardized by: </p>
<ol>
<li>transforming to fractional coverage,</li>
<li>performing optional explicit GC-bias correction (if the panel contains GC-content annotated intervals),</li>
<li>filtering intervals to those contained in the panel,</li>
<li>dividing by interval medians contained in the panel, </li>
<li>dividing by the sample median,</li>
<li>transforming to log2 copy ratio. </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat 0.sra/sra.infor/config.sample | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  i=./8.cnv/counts/<span class="variable">$&#123;id&#125;</span>.clean_counts.tsv</span><br><span class="line">  gatk --java-options <span class="string">&quot;-Xmx48g&quot;</span> DenoiseReadCounts \</span><br><span class="line">  -I <span class="variable">$&#123;i&#125;</span> \</span><br><span class="line">  --count-panel-of-normals ./8.cnv/cnvponM.pon.tsv \</span><br><span class="line">  --standardized-copy-ratios ./8.cnv/standardizedCR/<span class="variable">$&#123;id&#125;</span>.clean.standardizedCR.tsv \</span><br><span class="line">  --denoised-copy-ratios ./8.cnv/denoisedCR/<span class="variable">$&#123;id&#125;</span>.clean.denoisedCR.tsv</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>Troubleshooting</strong></p>
<blockquote>
<p>HDF5-DIAG: Error detected in HDF5 (1.8.14) thread 0:<br> #000: /mnt/scr1/abyrne/HDFJava-platypus-2.11/native/HDF5-prefix/src/HDF5/src/H5D.c line 358 in H5Dopen2(): not found<br>    major: Dataset<br>    minor: Object not found</p>
</blockquote>
<p>解决：CollectReadCounts时生成TSV文件<br>mamba install -c anaconda hdf5=1.8.14</p>
<hr>
<h2 id="可视化降噪后的copy-ratio"><a href="#可视化降噪后的copy-ratio" class="headerlink" title="可视化降噪后的copy ratio"></a>可视化降噪后的copy ratio</h2><p>使用<code>PlotDenoisedCopyRatios</code>可视化标准化和去噪的read counts。这些图可以直观地评估去噪的效果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install ahead</span></span><br><span class="line">conda install -c conda-forge r-optparse</span><br><span class="line"></span><br><span class="line">dict=~/Reference/GATK/Homo_sapiens_assembly38.dict</span><br><span class="line">cat 0.sra/sra.infor/config.sample | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  gatk --java-options <span class="string">&quot;-Xmx48g&quot;</span> PlotDenoisedCopyRatios \</span><br><span class="line">  --standardized-copy-ratios 	./8.cnv/standardizedCR/<span class="variable">$&#123;id&#125;</span>.clean.standardizedCR.tsv \</span><br><span class="line">  --denoised-copy-ratios ./8.cnv/denoisedCR/<span class="variable">$&#123;id&#125;</span>.clean.denoisedCR.tsv \</span><br><span class="line">  --sequence-dictionary <span class="variable">$&#123;dict&#125;</span> \</span><br><span class="line">  --output ./8.cnv/cnv_plots \</span><br><span class="line">  --output-prefix <span class="variable">$&#123;id&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>Troubleshooting</strong></p>
<blockquote>
<p>A USER ERROR has occurred: Bad input: format error in ‘./8.cnv/denoisedCR/case1_biorep_A_techrep.clean.denoisedCR.tsv’ at line 160284: mismatch between number of values in line (3) and number of columns (4)</p>
</blockquote>
<p>解决：<br>先用sed查看报错处的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 查看行数</span></span><br><span class="line">wc -l case1_biorep_A_techrep.clean.denoisedCR.tsv</span><br><span class="line"><span class="comment"># 160283 case1_biorep_A_techrep.clean.denoisedCR.tsv</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看160284行是什么</span></span><br><span class="line">sed -n <span class="string">&#x27;160280,160284p&#x27;</span> case1_biorep_A_techrep.clean.denoisedCR.tsv</span><br><span class="line"><span class="comment"># chr19   13145079        13145644        0.453168</span></span><br><span class="line"><span class="comment"># chr19   13148779        13149294        -0.807650</span></span><br><span class="line"><span class="comment"># chr19   13149295        13149660        0.044055</span></span><br><span class="line"><span class="comment"># chr19   13149661        13150017        0.143591</span></span><br><span class="line"><span class="comment"># chr19   13150018        13</span></span><br></pre></td></tr></table></figure>
<h2 id="怀疑是denoise程序终止，重新运行case1-biorep-A-techrep样本"><a href="#怀疑是denoise程序终止，重新运行case1-biorep-A-techrep样本" class="headerlink" title="怀疑是denoise程序终止，重新运行case1_biorep_A_techrep样本"></a>怀疑是denoise程序终止，重新运行case1_biorep_A_techrep样本</h2><center><img src="/img/Figures/case1_biorep_B.denoised.png" alt="case1_biorep_B.denoised" style="zoom:70%;" /></center>

<p>图片展示的是标准化和降噪后的copy ratios，底下还有中位数绝对偏差(median absolute deviation, MAD)，只不过一张图片把y轴设置为0到4。假如tumor样本的拷贝数没有发生变化，copy ratio应该稳定在1附近。如果发生了CNV事件，那应该就在1附近波动。</p>
<h2 id="计算常见的germline-mutation位点"><a href="#计算常见的germline-mutation位点" class="headerlink" title="计算常见的germline mutation位点"></a>计算常见的germline mutation位点</h2><p>这一步用到了<code>CollectAllelicCounts</code>工具，对输入的bam文件，根据指定的interval区间，进行germline mutation的检测(仅仅是SNPs位点，不包括INDELS )，并计算该位点覆盖的reads数，即该位点的<strong>测序深度</strong>。值得注意的是，该工具一个默认参数是MAPQ值大于20的reads才会被纳入计数，最后生成一个tsv文件。注意：这一步非常消耗CPU和内存！运行了3小时</p>
<p><a href="https://gatk.broadinstitute.org/hc/en-us/articles/360056969912-CollectAllelicCounts">Manual-CollectAllelicCounts</a><br>Collects reference and alternate allele counts at specified sites. The <strong>alt count</strong> is defined as <em>the total count minus the ref count</em>, and the <strong>alt nucleotide</strong> is defined as <em>the non-ref base with the highest count, with ties broken by the order of the bases in AllelicCountCollector#BASES</em>. Only reads that pass the specified read filters and bases that exceed the specified minimum-base-quality will be counted.</p>
<blockquote>
<p><strong>Inputs</strong><br> SAM format read data<br> Reference FASTA file<br> Sites at which allelic counts will be collected<br> <strong>Output</strong><br> Allelic-counts file. This is a tab-separated values (TSV) file with a SAM-style header containing a read group sample name, a sequence dictionary, a row specifying the column headers contained in AllelicCountCollection.AllelicCountTableColumn, and the corresponding entry rows.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## script</span></span><br><span class="line">interval=~/Reference/GATK/targets.preprocessed.interval_list</span><br><span class="line">GENOME=~/Reference/GATK/Homo_sapiens_assembly38.fasta</span><br><span class="line"></span><br><span class="line">cat 0.sra/sra.infor/config.sample | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  i=./5.gatk/bqsr.bam/<span class="variable">$&#123;id&#125;</span>_bqsr.bam</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$&#123;i&#125;</span></span><br><span class="line">  gatk --java-options <span class="string">&quot;-Xmx20G -Djava.io.tmpdir=./&quot;</span>  CollectAllelicCounts \</span><br><span class="line">  -I <span class="variable">$&#123;i&#125;</span> \</span><br><span class="line">  -L <span class="variable">$&#123;interval&#125;</span> \</span><br><span class="line">  -R <span class="variable">$&#123;GENOME&#125;</span> \</span><br><span class="line">  -O ./8.cnv/allelicCounts/<span class="variable">$&#123;id&#125;</span>.allelicCounts.tsv</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">less ./8.cnv/allelicCounts/case1_biorep_A_techrep.allelicCounts.tsv | grep -v ^@ | awk <span class="string">&#x27;&#123;if($6 != &quot;N&quot;) print$0 &#125;&#x27;</span>| less</span><br><span class="line"></span><br><span class="line">less ./8.cnv/denoisedCR/case1_biorep_A_techrep.clean.denoisedCR.tsv | grep -v ^@| less</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/a-warning.png" alt="warning" style="zoom:100%;" /></center>

<center><img src="/img/Figures/allele-res.png" alt="res" style="zoom:100%;" /></center>

<h2 id="ModelSegments"><a href="#ModelSegments" class="headerlink" title="ModelSegments"></a>ModelSegments</h2><p>利用前面拿到的<strong>标准化&amp;降噪后tsv文件</strong>和<strong>等位基因测序深度tsv文件</strong>进行call segment，需要注意的是输入文件要求tumor match normal。这一步用到的工具是<code>ModelSegments</code>，它根据降噪后的reads counts值对copy ratios进行分割，并根据第五步的CollectAllelicCounts等位基因计数对分割片段进行分类。<br>注意：这一步非常非常非常非常耗内存和CPU</p>
<p><a href="https://gatk.broadinstitute.org/hc/en-us/articles/360057439631-ModelSegments">Manual-ModelSegments</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat 0.sra/sra.infor/config.tumor  | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  gatk --java-options <span class="string">&quot;-Xmx20g&quot;</span> ModelSegments \</span><br><span class="line">  --denoised-copy-ratios ./8.cnv/denoisedCR/<span class="variable">$&#123;id&#125;</span>.clean.denoisedCR.tsv \</span><br><span class="line">  --allelic-counts ./8.cnv/allelicCounts/<span class="variable">$&#123;id&#125;</span>.allelicCounts.tsv \</span><br><span class="line">  --normal-allelic-counts ./8.cnv/allelicCounts/case1_germline.allelicCounts.tsv \</span><br><span class="line">  --output ./8.cnv/segments \</span><br><span class="line">  --output-prefix <span class="variable">$&#123;id&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<hr>
<p>Exception in thread “main” java.lang.OutOfMemoryError: GC overhead limit exceeded<br>        at java.util.Arrays.copyOfRange(Arrays.java:3664)<br>        at java.lang.String.<init>(String.java:207)<br>        at java.lang.StringBuilder.toString(StringBuilder.java:407)<br>        …<br>啊啊啊啊啊啊啊啊啊我疯了！！！都给你60G了！！<br>Github有人题类似的问题，但是官方还没回答，等回答了再来看看</p>
<hr>
<h1 id="拷贝数变异分析（CNVkit）"><a href="#拷贝数变异分析（CNVkit）" class="headerlink" title="拷贝数变异分析（CNVkit）"></a>拷贝数变异分析（CNVkit）</h1><p><a href="https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004873">CNVkit: Genome-Wide Copy Number Detection and Visualization from Targeted DNA Sequencing</a><br><a href="https://cnvkit.readthedocs.io/en/stable/index.html">Manual-CNVkit</a><br><a href="https://github.com/etal/cnvkit">Github-CNVkit</a><br><a href="https://www.jianshu.com/p/d5310b76f1f2">CNVkit教程</a></p>
<p><code>batch</code>是脚本内的一个整合了很多命令的方法，当然也可以使用<code>cnvkit.py</code>提供的<code>access</code>、<code>coverrage</code>、<code>fix</code>等方法一起来完成和batch同样功能的分析，但是作为懒人还是用了<code>batch</code>。而且CNVkit也太快了吧，这里还没写完就已经跑好了！</p>
<blockquote>
<p>重要参数：<br> Tumor.bam 和Normal.bam都是相应样本的bam文件<br> –targets 想要分析的区域信息<br> –annotate refFlat格式的基因注释信息，可以从UCSC上下载<br> –fasta 参考基因组<br> –access 需要跟bed文件，可用过cnvkit.py access mm10.fasta -s 10000 -o access-10kb.mm10.bed 生成<br> –output-reference 输出的reference.cnn可以作为下一批tumor数据分析的输入文件，reference.cnn和输入的normal.bam有关<br> –diagram –scatter 两个都是顺带绘图的参数<br> –drop-low-coverage to ignore bins with log2 normalized coverage values below -15.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -------------------------------&gt;</span></span><br><span class="line"><span class="comment"># CNVkit-v0.9.8</span></span><br><span class="line"><span class="comment"># -------------------------------&gt; </span></span><br><span class="line"><span class="comment"># installation</span></span><br><span class="line">mamba install -c bioconda cnvkit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用命令 batch 进行 CNV 分析</span></span><br><span class="line"><span class="comment"># From baits and tumor/normal BAMs</span></span><br><span class="line">GENOME=~/Reference/GATK/Homo_sapiens_assembly38.fasta</span><br><span class="line">bed=~/Reference/GATK/hg38_exon.bed</span><br><span class="line"></span><br><span class="line">/home/data/vip8t02/anaconda3/envs/CNVkit-0.9.8/bin/cnvkit.py batch ./5.gatk/bqsr.bam/*[ABC]*bqsr.bam   ./5.gatk/bqsr.bam/case1_techrep_bqsr.bam \</span><br><span class="line">--normal  ./5.gatk/bqsr.bam/case1_germline_bqsr.bam \</span><br><span class="line">--targets  <span class="variable">$&#123;bed&#125;</span> \</span><br><span class="line">--fasta <span class="variable">$GENOME</span>  \</span><br><span class="line">--drop-low-coverage --scatter --diagram --method amplicon -p 16 \</span><br><span class="line">--output-reference my_reference.cnn --output-dir ./8.cnv/cnvkit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分segment</span></span><br><span class="line">/home/data/vip8t02/anaconda3/envs/CNVkit-0.9.8/bin/cnvkit.py <span class="built_in">export</span> seg *bqsr.cns -o gistic.segments</span><br><span class="line">sed <span class="string">&#x27;s/_bqsr//&#x27;</span> gistic.segments</span><br><span class="line"></span><br><span class="line">awk <span class="string">&#x27;&#123;print FILENAME&quot;\t&quot;$0&#125;&#x27;</span> *bqsr.cns  | grep -v chromosome |sed <span class="string">&#x27;s/_bqsr.cns//g&#x27;</span> |awk <span class="string">&#x27;&#123;print $1&quot;\t&quot;$2&quot;\t&quot;$3&quot;\t&quot;$4&quot;\t&quot;$8&quot;\t&quot;$6&#125;&#x27;</span> &gt;final.seg</span><br><span class="line"></span><br><span class="line">cat 0.sra/sra.infor/config.tumor | <span class="keyword">while</span> <span class="built_in">read</span> id;</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">  /home/data/vip8t02/anaconda3/envs/CNVkit-0.9.8/bin/cnvkit.py <span class="built_in">export</span> seg ./8.cnv/cnvkit/<span class="variable">$&#123;id&#125;</span>_bqsr.cns \</span><br><span class="line">  -o ./8.cnv/cnvkit/<span class="variable">$&#123;id&#125;</span>.seg</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Visualization</span></span><br><span class="line">/home/data/vip8t02/anaconda3/envs/CNVkit-0.9.8/bin/cnvkit.py heatmap *.cns</span><br></pre></td></tr></table></figure>
<p>diagram用于展示单个样本的CNV在染色体上的分布:</p>
<center><img src="/img/Figures/cnvkit-case1.png" alt="res" style="zoom:40%;" /></center>

<p>scatter展示单个样本染色体区域上log2 ratio值的分布:</p>
<center><img src="/img/Figures/case1_biorep_A_techrep_bqsr-scatter.png" alt="scatter" style="zoom:65%;" /></center>

<p>heatmap展示多个样本的CNV分布情况:</p>
<center><img src="/img/Figures/heatmap.png" alt="heatmap" style="zoom:65%;" /></center>

<h1 id="突变Somatic-Signature图谱"><a href="#突变Somatic-Signature图谱" class="headerlink" title="突变Somatic Signature图谱"></a>突变Somatic Signature图谱</h1><ul>
<li>点突变SNV的类型，可以分为6类: <code>C&gt;A</code>, <code>C&gt;G</code>,<code>C&gt;T</code>, <code>A&gt;C</code>,<code>A&gt;G</code>, <code>A&gt;T</code>,而其他的点突变，如T&gt;G其实与A&gt;C是等效的，因为突变发生在哪条DNA链.上是无法确定的。如果把突变位点的侧翼各1 bp的碱基也考虑进来，也就是三连核苷酸突变，就有4x6x4=96种碱基突变类型。</li>
<li>发生Somatic mutations的原因:DNA replication infidelity, exogenous and endogenous genotoxins exposures, defective DNA repair pathways and DNA enzymatic editing。不同的突变原因会产生独特的突变类型组合，称为Mutations Signature。</li>
</ul>
<p>利用VEP注释后的maf文件来分析Signatures。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rm(<span class="built_in">list</span>=ls())</span><br><span class="line">options(stringsAsFactors=<span class="literal">FALSE</span>)</span><br><span class="line"><span class="comment">## 切换镜像</span></span><br><span class="line">options(BioC_mirror=<span class="string">&quot;https://mirrors.ustc.edu.cn/bioc/&quot;</span>)</span><br><span class="line">options(<span class="string">&quot;repos&quot;</span> = <span class="built_in">c</span>(CRAN=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;</span>))</span><br><span class="line"><span class="comment">## 安装R包</span></span><br><span class="line">install.packages(<span class="string">&#x27;deconstructSigs&#x27;</span>)</span><br><span class="line">BiocManager::install(<span class="string">&#x27;BSgenome&#x27;</span>)</span><br><span class="line">BiocManager::install(<span class="string">&#x27;BSgenome.Hsapiens.UCSC.hg38&#x27;</span>)</span><br><span class="line">library(deconstructSigs)</span><br><span class="line"><span class="comment">## https://github.com/raerose01/deconstructSigs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 读入数据</span></span><br><span class="line">maf=read.table(<span class="string">&#x27;./7.annotation/vep/VEP_merge.maf&#x27;</span>,header = <span class="built_in">T</span>,sep = <span class="string">&#x27;\t&#x27;</span>,<span class="built_in">quote</span> = <span class="string">&quot;&quot;</span>)</span><br><span class="line">maf[<span class="number">1</span>:<span class="number">5</span>,<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 构建肿瘤突变数据框，需要5列信息: sample.ID,chr,pos,ref,alt </span></span><br><span class="line">sample.mut.ref &lt;- data.frame(Sample=maf[,<span class="number">16</span>], </span><br><span class="line">                            chr = maf[,<span class="number">5</span>],</span><br><span class="line">                            pos = maf[,<span class="number">6</span>],</span><br><span class="line">                            ref = maf[,<span class="number">11</span>],</span><br><span class="line">                            alt = maf[,<span class="number">13</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看构建的文件</span></span><br><span class="line">sample.mut.ref[<span class="number">1</span>:<span class="number">5</span>,<span class="number">1</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/mut-ref.png" alt="mut-ref" style="zoom:70%;" /></center>

<p>使用函数<code>mut.to.sigs.input</code>，将肿瘤的突变数据转换为n行和96列数据框，其中n是存在的样本数,这里是4个样本。每一列表示在每个三联核苷酸范围内发现突变的个数。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">sigs.input &lt;- mut.to.sigs.input(mut.ref = sample.mut.ref,</span><br><span class="line">                                sample.id = <span class="string">&quot;Sample&quot;</span>, </span><br><span class="line">                                chr = <span class="string">&quot;chr&quot;</span>, </span><br><span class="line">                                pos = <span class="string">&quot;pos&quot;</span>, </span><br><span class="line">                                ref = <span class="string">&quot;ref&quot;</span>, </span><br><span class="line">                                alt = <span class="string">&quot;alt&quot;</span>,</span><br><span class="line">                                bsg = BSgenome.Hsapiens.UCSC.hg38)</span><br><span class="line">sigs.input[<span class="number">1</span>:<span class="number">4</span>,<span class="number">1</span>:<span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/sig-input.png" alt="sig-input" style="zoom:70%;" /></center>

<p>最后用函数<code>whichSignatures</code>确定给定样本中每个签名的数量，这里的<code>signatures.ref</code>参数指选定的参考数据库的signature可以选择<code>signatures.cosmic</code>或者<code>signatures.nature2013</code>，以<code>case1_biorep_A_techrep</code>为例进行可视化</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">sigs.output &lt;- whichSignatures(tumor.ref = sigs.input,</span><br><span class="line">                                signatures.ref = signatures.cosmic, </span><br><span class="line">                                sample.id = <span class="string">&#x27;case1_biorep_A_techrep&#x27;</span>,</span><br><span class="line">                                contexts.needed = <span class="literal">TRUE</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot output</span></span><br><span class="line">plotSignatures(sigs.output)</span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/MutSig.png" alt="sig-onput" style="zoom:70%;" /></center>

<p>挑选出样本数大于0的Signature，绘制热图（因为样本数少，按照教程中挑出大于5的Sig的做法不可行）</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pheatmap</span></span><br><span class="line">df = data.frame()</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> rownames(sigs.input)) &#123;</span><br><span class="line">  sigs.output &lt;- whichSignatures(tumor.ref = sigs.input,</span><br><span class="line">                                 signatures.ref = signatures.cosmic, </span><br><span class="line">                                 sample.id = i,</span><br><span class="line">                                 contexts.needed = <span class="literal">TRUE</span>)</span><br><span class="line">  df = rbind(df,sigs.output$weights)</span><br><span class="line">&#125;</span><br><span class="line">df = df[ , apply(df, <span class="number">2</span>, <span class="keyword">function</span>(x)&#123;<span class="built_in">sum</span>(x&gt;<span class="number">0</span>)&#125;)&gt;<span class="number">0</span>]</span><br><span class="line">pheatmap::pheatmap(df,cluster_cols = <span class="built_in">F</span>,cluster_rows = <span class="built_in">F</span>,fontsize = <span class="number">20</span>)</span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/sig-heatmap.png" alt="sig-onput" style="zoom:40%;" /></center>

<h1 id="探究肿瘤异质性"><a href="#探究肿瘤异质性" class="headerlink" title="探究肿瘤异质性"></a>探究肿瘤异质性</h1><h2 id="同一病人的SNV分布"><a href="#同一病人的SNV分布" class="headerlink" title="同一病人的SNV分布"></a>同一病人的SNV分布</h2><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rm(<span class="built_in">list</span> = ls())</span><br><span class="line">options(stringsAsFactors = <span class="built_in">F</span>)</span><br><span class="line">library(dplyr)</span><br><span class="line">library(stringr)</span><br><span class="line">library(maftools)</span><br><span class="line"><span class="comment"># 读入数据</span></span><br><span class="line">laml = read.maf(<span class="string">&#x27;./7.annotation/vep/VEP_merge.maf&#x27;</span>)</span><br><span class="line">laml@data = laml@data[!grepl(<span class="string">&#x27;^MT-&#x27;</span>, laml@data$Hugo_Symbol),] </span><br><span class="line"><span class="comment"># 增加一列t_vaf，即肿瘤样本中突变位点的覆盖深度t_alt_count占测序覆盖深度t_depth的比值</span></span><br><span class="line">laml@data$t_vaf = (laml@data$t_alt_count/laml@data$t_depth)</span><br><span class="line">unique(laml@data$Tumor_Sample_Barcode)</span><br><span class="line">getSampleSummary(laml) </span><br><span class="line">getGeneSummary(laml) </span><br><span class="line">getFields(laml)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mut = laml@data[laml@data$t_alt_count &gt;= <span class="number">5</span> &amp;</span><br><span class="line">                  laml@data$t_vaf &gt;= <span class="number">0.05</span>, <span class="built_in">c</span>(<span class="string">&quot;Hugo_Symbol&quot;</span>,</span><br><span class="line">                                             <span class="string">&quot;Chromosome&quot;</span>,</span><br><span class="line">                                             <span class="string">&quot;Start_Position&quot;</span>,</span><br><span class="line">                                             <span class="string">&quot;Tumor_Sample_Barcode&quot;</span>,</span><br><span class="line">                                             <span class="string">&quot;t_vaf&quot;</span>)]</span><br><span class="line"></span><br><span class="line">mut$patient = substr(mut$Tumor_Sample_Barcode, <span class="number">1</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/heter-mut.png" alt="mut-df" style="zoom:70%;" /></center>

<p>利用<code>pheatmap</code>进行可视化</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library(tidyr)</span><br><span class="line">library(Cairo)</span><br><span class="line"></span><br><span class="line">pid = unique(mut$patient)</span><br><span class="line"></span><br><span class="line">mat = unique(mut[mut$patient == <span class="string">&quot;case1&quot;</span>,<span class="built_in">c</span>(<span class="string">&quot;Tumor_Sample_Barcode&quot;</span>,<span class="string">&#x27;Hugo_Symbol&#x27;</span>)]) </span><br><span class="line">mat$tmp = <span class="number">1</span></span><br><span class="line"><span class="comment"># 长变扁</span></span><br><span class="line">mat = spread(mat,Tumor_Sample_Barcode,tmp,fill = <span class="number">0</span>)</span><br><span class="line"><span class="built_in">class</span>(mat)</span><br><span class="line">mat = as.data.frame(mat)</span><br><span class="line">rownames(mat) = mat$Hugo_Symbol</span><br><span class="line">mat = mat[,-<span class="number">1</span>]</span><br><span class="line">dat = mat[order(mat[,<span class="number">1</span>],mat[,<span class="number">2</span>],mat[,<span class="number">3</span>],mat[,<span class="number">4</span>]),]</span><br><span class="line"></span><br><span class="line">CairoPNG(file=<span class="string">&quot;./10.heterogeneity/case1.png&quot;</span>,width=<span class="number">300</span>,height=<span class="number">1500</span>)</span><br><span class="line">pheatmap::pheatmap(mat = dat, cluster_cols = <span class="built_in">F</span>, cluster_rows = <span class="built_in">F</span>, show_rownames = <span class="built_in">T</span>, legend = <span class="built_in">F</span>,fontsize_row = <span class="number">16</span>,fontsize_col = <span class="number">30</span>)</span><br><span class="line">dev.off()</span><br></pre></td></tr></table></figure>
<p>热图太长了，仅截取展示</p>
<center><img src="/img/Figures/heatmap-hetero.png" alt="mut-df" style="zoom:80%;" /></center>

<h2 id="肿瘤样本中的异质性"><a href="#肿瘤样本中的异质性" class="headerlink" title="肿瘤样本中的异质性"></a>肿瘤样本中的异质性</h2><p>肿瘤通常是异质性的，即由多个克隆组成。在这里，我们通过肿瘤样本中的变异等位基因频率(Variant Allele Frequecy)值，来进行分析。使用的是maftools的<code>inferHeterogeneity</code>函数:<br>This function clusters variants based on VAF to estimate univariate density and cluster classification. There are two methods available for clustering. Default using parametric finite mixture models and another method using nonparametric inifinite mixture models (Dirichlet process).</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rm(<span class="built_in">list</span> = ls())</span><br><span class="line">options(stringsAsFactors = <span class="built_in">F</span>)</span><br><span class="line"></span><br><span class="line">library(maftools)</span><br><span class="line">library(dplyr)</span><br><span class="line">library(stringr)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 读入数据</span></span><br><span class="line">laml = read.maf(<span class="string">&#x27;./7.annotation/vep/vep_merge.maf&#x27;</span>)</span><br><span class="line">laml@data = laml@data[!grepl(<span class="string">&#x27;^MT-&#x27;</span>,laml@data$Hugo_Symbol),] </span><br><span class="line"></span><br><span class="line"><span class="comment">## 增加一列 t_vaf，即肿瘤样本中突变位点的覆盖深度t_alt_count占测序覆盖深度t_depth的比值</span></span><br><span class="line">laml@data$t_vaf = (laml@data$t_alt_count/laml@data$t_depth)</span><br><span class="line">heter = inferHeterogeneity(maf = laml, top = <span class="number">24</span>,vafCol = <span class="string">&#x27;t_vaf&#x27;</span>)</span><br><span class="line"></span><br><span class="line">heter</span><br><span class="line"></span><br><span class="line"><span class="comment">## Visualization</span></span><br><span class="line">plotClusters(clusters = heter,</span><br><span class="line">             showCNvars = <span class="built_in">T</span>,</span><br><span class="line">             tsb = <span class="string">&#x27;case1_biorep_A_techrep&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>得到的<code>heter</code>是一个包括<code>clusterData</code>和<code>clusterMeans</code>的列表</p>
<figure class="half">
    <img src="/img/Figures/case1-vaf2.png" style="zoom:60%;">
    <img src="/img/Figures/case1-vaf.png" style="zoom:40%;">
</figure>

<p>上图显示了不同的突变位点的vaf值，并将这些位点进行分群，在样本case1_biorep_A_techrep中就可以分为4群，即该样本可以分为4个克隆，同样还给出了MATH 值:52.95。</p>
<h1 id="注释突变位点所在基因"><a href="#注释突变位点所在基因" class="headerlink" title="注释突变位点所在基因"></a>注释突变位点所在基因</h1><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rm(<span class="built_in">list</span>=ls())</span><br><span class="line">options(stringsAsFactors = <span class="built_in">F</span>)</span><br><span class="line">library(dplyr)</span><br><span class="line">library(stringr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入数据</span></span><br><span class="line">setwd(<span class="string">&quot;/home/data/vip8t02/MyCourse/CancerGenomics/WES.proj/&quot;</span>)</span><br><span class="line">laml = read.maf(<span class="string">&#x27;./7.annotation/vep/vep_merge.maf&#x27;</span>)</span><br><span class="line">laml@data=laml@data[!grepl(<span class="string">&#x27;^MT-&#x27;</span>,laml@data$Hugo_Symbol),] </span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一列t_vaf，即肿瘤样本中突变位点的覆盖深度t_alt_count占测序覆盖深度t_depth的比值</span></span><br><span class="line">laml@data$t_vaf = (laml@data$t_alt_count/laml@data$t_depth)</span><br><span class="line">unique(laml@data$Tumor_Sample_Barcode)</span><br><span class="line">getSampleSummary(laml) </span><br><span class="line">getGeneSummary(laml) </span><br><span class="line">getFields(laml)</span><br><span class="line"></span><br><span class="line">mut = laml@data[laml@data$t_alt_count &gt;= <span class="number">5</span> &amp;</span><br><span class="line">                  laml@data$t_vaf &gt;= <span class="number">0.05</span>, <span class="built_in">c</span>(<span class="string">&quot;Hugo_Symbol&quot;</span>,</span><br><span class="line">                                             <span class="string">&quot;Chromosome&quot;</span>,</span><br><span class="line">                                             <span class="string">&quot;Start_Position&quot;</span>,</span><br><span class="line">                                             <span class="string">&quot;Tumor_Sample_Barcode&quot;</span>,</span><br><span class="line">                                             <span class="string">&quot;t_vaf&quot;</span>)]</span><br><span class="line"></span><br><span class="line">mut$patient = substr(mut$Tumor_Sample_Barcode, <span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">pid = unique(mut$patient)</span><br><span class="line"></span><br><span class="line">mat=unique(mut[mut$patient %in% <span class="string">&quot;case1&quot;</span>,<span class="built_in">c</span>(<span class="string">&quot;Tumor_Sample_Barcode&quot;</span>,<span class="string">&#x27;Hugo_Symbol&#x27;</span>)]) </span><br><span class="line">mat$tmp = <span class="number">1</span></span><br><span class="line"><span class="comment"># 长变扁</span></span><br><span class="line">mat = spread(mat,Tumor_Sample_Barcode,tmp,fill = <span class="number">0</span>)</span><br><span class="line"><span class="built_in">class</span>(mat)</span><br><span class="line">mat = as.data.frame(mat)</span><br><span class="line">rownames(mat) = mat$Hugo_Symbol</span><br><span class="line">mat=mat[,-<span class="number">1</span>]</span><br><span class="line">dat = mat[order(mat[,<span class="number">1</span>],mat[,<span class="number">2</span>],mat[,<span class="number">3</span>],mat[,<span class="number">4</span>]),]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 突变分类</span></span><br><span class="line">trunk_gene = rownames(dat[rowSums(dat)==<span class="number">4</span>,]) <span class="comment"># mutate in 4 samples</span></span><br><span class="line">branch_gene = rownames(dat[rowSums(dat)==<span class="number">3</span>,]) <span class="comment"># mutate in 3 samples</span></span><br><span class="line">private_gene = rownames(dat[rowSums(dat)==<span class="number">1</span>,]) <span class="comment"># mutate in 1 samples</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># KEGG</span></span><br><span class="line">options(connectionObserver = <span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line">library(org.Hs.eg.db)</span><br><span class="line">library(clusterProfiler)</span><br><span class="line">library(Cairo)</span><br><span class="line"></span><br><span class="line">kegg_SYMBOL_hsa &lt;- <span class="keyword">function</span>(genes)&#123; </span><br><span class="line">  gene.df &lt;- bitr(genes, fromType = <span class="string">&quot;SYMBOL&quot;</span>,</span><br><span class="line">                  toType = <span class="built_in">c</span>(<span class="string">&quot;SYMBOL&quot;</span>, <span class="string">&quot;ENTREZID&quot;</span>),</span><br><span class="line">                  OrgDb = org.Hs.eg.db)</span><br><span class="line">  head(gene.df) </span><br><span class="line">  diff.kk &lt;- enrichKEGG(gene         = gene.df$ENTREZID,</span><br><span class="line">                        organism     = <span class="string">&#x27;hsa&#x27;</span>,</span><br><span class="line">                        pvalueCutoff = <span class="number">0.99</span>,</span><br><span class="line">                        qvalueCutoff = <span class="number">0.99</span></span><br><span class="line">  )</span><br><span class="line">  <span class="built_in">return</span>( setReadable(diff.kk, OrgDb = org.Hs.eg.db,keyType = <span class="string">&#x27;ENTREZID&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## trunk</span></span><br><span class="line">trunk_kk=kegg_SYMBOL_hsa(trunk_gene)</span><br><span class="line">trunk_df=trunk_kk@result</span><br><span class="line"></span><br><span class="line">write.csv(trunk_df,file = <span class="string">&#x27;./11.KEGG//trunk_kegg.csv&#x27;</span>)</span><br><span class="line">CairoPNG(file=<span class="string">&quot;./11.KEGG/trunk_kegg.png&quot;</span>,width=<span class="number">1080</span>,height=<span class="number">540</span>)</span><br><span class="line">barplot(trunk_kk,font.size = <span class="number">20</span>)</span><br><span class="line">dev.off()</span><br><span class="line"></span><br><span class="line"><span class="comment">## branch</span></span><br><span class="line">branch_kk=kegg_SYMBOL_hsa(branch_gene)</span><br><span class="line">branch_df=branch_kk@result</span><br><span class="line"></span><br><span class="line">write.csv(branch_df,file = <span class="string">&#x27;./11.KEGG/branch_kegg.csv&#x27;</span>)</span><br><span class="line">CairoPNG(file=<span class="string">&quot;./11.KEGG/branch_kegg.png&quot;</span>,width=<span class="number">1080</span>,height=<span class="number">540</span>)</span><br><span class="line">barplot(branch_kk,font.size = <span class="number">20</span>)</span><br><span class="line">dev.off()</span><br><span class="line"></span><br><span class="line"><span class="comment">## private</span></span><br><span class="line">private_kk=kegg_SYMBOL_hsa(private_gene)</span><br><span class="line">private_df=private_kk@result</span><br><span class="line"></span><br><span class="line">write.csv(private_df,file = <span class="string">&#x27;./11.KEGG/private_kegg.csv&#x27;</span>)</span><br><span class="line">CairoPNG(file=<span class="string">&quot;./11.KEGG/private_kegg.png&quot;</span>,width=<span class="number">1080</span>,height=<span class="number">540</span>)</span><br><span class="line">barplot(private_kk,font.size = <span class="number">20</span>)</span><br><span class="line">dev.off()</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>Troubleshooting</strong></p>
<blockquote>
<p>library(org.Hs.eg.db)<br> Error: package or namespace load failed for ‘org.Hs.eg.db’:<br> .onLoad failed in loadNamespace() for ‘org.Hs.eg.db’, details:<br>  call: l$contains<br>  error: $ operator is invalid for atomic vectors</p>
</blockquote>
<p>在Bioconductor上已经有人提了问题，并且有了回答（地址：<a href="https://support.bioconductor.org/p/9136329/%EF%BC%89">https://support.bioconductor.org/p/9136329/）</a><br>简单的说，就是Rstduio出来背锅，最新的RSQLite(v2.2.6)和Rstudio存在冲突，以后要么是RSQLite迁就RStduio，要么就是Rstudio迁就RQLite。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法1 手动设置环境变量</span></span><br><span class="line">options(connectionObserver = <span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2: 装个旧版本RSQLite，2.2.5之前即可</span></span><br><span class="line">install.packages(<span class="string">&quot;remotes&quot;</span>)</span><br><span class="line">remotes::install_version(<span class="string">&quot;RSQLite&quot;</span>, <span class="string">&quot;2.2.5&quot;</span>)</span><br></pre></td></tr></table></figure>
<hr>
<p>注释结果：</p>
<ol>
<li><p><strong>trunk_gene</strong></p>
<center><img src="/img/Figures/trunk_kegg.png" alt="trunk_kegg" style="zoom:70%;" /></center>  

<p> 结核？？？？<br> Tuberculosis (TB) is a potentially serious infectious disease that mainly affects your lungs. The bacteria that cause tuberculosis are spread from one person to another through tiny droplets released into the air via coughs and sneezes.</p>
<p> 百日咳？？？？？？？<br> Pertussis, also known as whooping cough, is a highly contagious respiratory disease. It is caused by the bacterium Bordetella pertussis. Pertussis is known for uncontrollable, violent coughing which often makes it hard to breathe.</p>
<p> <strong>NF-kB Signaling Pathway</strong><br> NF-κB蛋白通常会由p65和p50形成同源/异源二聚体，在胞质中因与抑制蛋白IkB结合形成了三聚体复合物而处于失活状态。当上游信号因子TNF结合到细胞膜表面受体后，受体构象改变并将信号传递给IKK激酶（IkB kinase），进而使IkB蛋白磷酸化并将其从三聚体中解离。随后NF-κB二聚体暴露出核定位序列（NLS），迅速从细胞质进入细胞核内，与核内DNA上的特异序列相结合，促进相关基因的转录，比如CyclinD1、c-Myc、MMP-9、VEGF等。NF-κB的持续性激活能够导致与细胞周期相关的蛋白活性异常，提高一些促进肿瘤生长的细胞因子水平，介导新血管生成。</p>
</li>
<li><p><strong>branch_gene</strong></p>
<center><img src="/img/Figures/branch_kegg.png" alt="branch_kegg" style="zoom:70%;" /></center>  
 

<p> <strong>Notch signaling pathway</strong><br> Notch信号通路广泛参与了恶性肿瘤的发生发展。Notch信号传导通路发挥致癌作用，导致细胞在增殖，细胞周期抑制，分化，和凋亡的过程失调和失控，造成了细胞的转化及恶性化，最终导致了恶性肿瘤的发生。</p>
<p> <strong>Adherens junctions（黏着链接）</strong><br> Adherens junctions (AJs) are evolutionarily conserved plasma-membrane structures that mediate cell–cell adhesions in multicellular organisms. They are organized by several types of adhesive integral membrane proteins, most notably cadherins and nectins that are clustered and stabilized by a number of cytoplasmic scaffolds.</p>
</li>
<li><p><strong>private_gene</strong></p>
<center><img src="/img/Figures/private_kegg.png" alt="private_kegg" style="zoom:70%;" /></center>  
 

<p> <strong>Wnt signaling pathway</strong><br> The Wnt signaling pathway is an ancient and evolutionarily conserved pathway that regulates crucial aspects of cell fate determination, cell migration, cell polarity, neural patterning and organogenesis during embryonic development. Wnt信号传导途径是由配体蛋白质Wnt和膜蛋白受体结合激发的一组多下游通道的信号转导途径。</p>
</li>
</ol>
<h1 id="ABSOLUTE使用"><a href="#ABSOLUTE使用" class="headerlink" title="ABSOLUTE使用"></a>ABSOLUTE使用</h1><p>ABSOLUTE是一种直接从体细胞突变和拷贝数变异的结果中<strong>推断肿瘤纯度和倍性</strong>的计算方法。</p>
<p><a href="https://www.nature.com/articles/nbt.2203#Sec11">文献：2012-NBT-Absolute quantification of somatic DNA alterations in human cancer</a><br><a href="https://software.broadinstitute.org/cancer/cga/absolute">ABSOLUTE Homepage</a></p>
<p>通常来说，我们取肿瘤组织进行测序,往往是一个混合样品，既包括肿瘤细胞也包括正常细胞，因此需要进行肿瘤纯度purity的评估。当从混合样品中提取DNA进行测序后，得到的也是一个混合样品的结果。肿瘤不一定是单纯的二倍体了，其本身异质性高，存在部分突变部分不突变的情况，直接分析拷贝数变异,得到的结果并不准确，评估肿瘤倍性ploidy也更加必要。</p>
<p>而ABSOLUTE可以从混合的DNA群体中重新推算样品中的绝对拷贝数、肿瘤纯度(purity)和倍性(ploidy) 。该算法首先从拷贝数分析得到的segments文件,以及体细胞突变的maf文件，然后基于预先计算好癌症核型的模型(数据来自于TCGA)进行评分，最后给出若干个模型供用户<br>选择。需要注意的是，最高分模型不一样是最优的，需要用户根据自己的数据和经验进行一定的检查。</p>
<p>ABSOLUTE每次仅能处理一个样本，GitHub上有个叫<code>DoAbsolute</code>的项目，可以实现一次处理多个样本：<a href="https://github.com/ShixiangWang/DoAbsolute#:~:text=ABSOLUTE%20is%20a%20famous%20software%20developed%20by%20Broad,to%20input%20data%20easily%20and%20runs%20RunAbsolute%20parallelly.">GitHub-ShixiangWang/DoAbsolute</a></p>
<blockquote>
<p><strong>Algorithm</strong><br> ABSOLUTE extracts the absolute copy number of local DNA segments per cancer cell from the mixed DNA population in three steps:</p>
<ol>
<li>Estimates the tumor purity and ploidy from observed relative copy profiles and, if provided, from somatic point mutation data.</li>
<li>Resolves ambiguous cases of purity and ploidy using pre-computed statistical models of recurrent cancer karyotypes based on a large and diverse reference sample collection.</li>
<li>Attempts to account for copy number alterations and point mutations in tumor subclones.</li>
</ol>
<p>ABSOLUTE expects copy-ratios very close to 1.0 and will fail if ratios are less than 0.75 or greater than 1.25. ABSOLUTE analysis can fail due to exceeding the max.as.seg.count threshold. Too many segments are associated with noisy or poor quality data. </p>
</blockquote>
<h2 id="ABSOLUTE安装"><a href="#ABSOLUTE安装" class="headerlink" title="ABSOLUTE安装"></a>ABSOLUTE安装</h2><p>需要在<a href="https://software.broadinstitute.org/cancer/cga/absolute">官网</a>注册账号后，才能下载ABSOLUTE的tar.gz版本，然后在R里面本地安装。还需要下载他的依赖数据HAPSEG(163MB)及依赖包</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 首先需要先安装两个依赖包</span></span><br><span class="line">install.packages(<span class="string">&quot;numDeriv&quot;</span>)</span><br><span class="line">BiocManager::install(<span class="string">&quot;DNAcopy&quot;</span>)</span><br><span class="line"><span class="comment">## 下载 HAPSEG_1.1.1.tar.gz，地址是</span></span><br><span class="line"><span class="comment">## http://software.broadinstitute.org/cancer/cga/sites/default/files/data/tools/absolute/HAPSEG_1.1.1.tar.gz</span></span><br><span class="line"><span class="comment">## 本地安装 HAPSEG，需要注意路径的问题</span></span><br><span class="line">install.packages(<span class="string">&quot;./12.ABSOLUTE/HAPSEG_1.1.1.tar.gz&quot;</span>, repos = <span class="literal">NULL</span>)</span><br><span class="line"><span class="comment">## 最后才是 ABSOLUTE，也是采用本地安装</span></span><br><span class="line"><span class="comment">## http://software.broadinstitute.org/cancer/cga/sites/default/files/data/tools/absolute/ABSOLUTE_1.0.6.tar.gz</span></span><br><span class="line">install.packages(<span class="string">&quot;./12.ABSOLUTE/ABSOLUTE_1.0.6.tar.gz&quot;</span>,repos = <span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/install-ABSOLUTE.png" alt="ABSOLUTE installation" style="zoom:90%;" /></center>

<h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><p><strong>input</strong></p>
<ol>
<li><p><strong>Segment文件</strong><br>Segmented copy ratios data file in either of the following two formats:</p>
<ul>
<li>For ALLELIC copy number type analysis, supply an RData file produced by HAPSEG or AllelicCapseg. These datasets allow incorporation of copy neutral LOH events. </li>
<li>Segmentation data produced by any other means must conform to the output formats of HAPSEG/AllelicCapseg for ABSOLUTE to consider copy neutral LOH events. </li>
</ul>
<p>ABSOLUTE algorithm v1.0.6 requires the following five columns：Chromosome(In either chr# or # format), Start, End, Num_Probes, Segment_Mean</p>
<center><img src="/img/Figures/input-seg.png" alt="input-seg" style="zoom:90%;" /></center>  

<p>segment文件不符合要求</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat 0.sra/sra.infor/config.tumor | <span class="keyword">while</span> <span class="built_in">read</span> id;</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">sed -e <span class="string">&#x27;s/chrom/Chromosome/g&#x27;</span> -e <span class="string">&#x27;s/loc.start/Start/g&#x27;</span> -e <span class="string">&#x27;s/loc.end/End/g&#x27;</span> -e <span class="string">&#x27;s/num.mark/Num_Probes/g&#x27;</span> -e <span class="string">&#x27;s/seg.mean/Segment_Mean/g&#x27;</span> ./8.cnv/cnvkit/<span class="variable">$&#123;id&#125;</span>.seg &gt; ./12.ABSOLUTE/<span class="variable">$&#123;id&#125;</span>_absolute.seg;</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>maf文件</strong><br>(Optional) Somatic mutation data in mutation annotation format (MAF) and as a plain text file. ABSOLUTE algorithm v1.0.6 requires the following seven columns： </p>
<ul>
<li>t_ref_count OR i_t_ref_count： Count of reference alleles in tumor.</li>
<li>t_alt_count OR i_t_alt_count：Count of alternate alleles in tumor. </li>
<li>dbSNP_Val_Status：Fields may be blank and multiple values are separated with nonspaced semicolon. Example values include bySubmitter, by1000genomes, by2Hit2Allele, and byHapMap.</li>
<li>Start_position：Note the <strong>lowercase “p”</strong>. Also, note that the End_position column is not required. This implies that ABSOLUTE algorithm v1.0.6 <strong>treats all mutation data equally as point mutations</strong>, the expected type of mutation data.</li>
<li>Tumor_Sample_Barcode：Fields may be blank.</li>
<li>Hugo_Symbol：Fields may be blank or “unknown”.</li>
<li>Chromosome：<strong>Must be in # format and not chr# format</strong>. </li>
</ul>
<center><img src="/img/Figures/input-maf.png" alt="input-maf" style="zoom:90%;" /></center>  

<p>可以看到是大写“ P ”，和chr1，需要修改格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat 0.sra/sra.infor/config.tumor | <span class="keyword">while</span> <span class="built_in">read</span> id;</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">sed -e <span class="string">&#x27;1d&#x27;</span> -e <span class="string">&#x27;s/Start_Position/Start_position/&#x27;</span> -e <span class="string">&#x27;s/chr//&#x27;</span> ./7.annotation/vep/<span class="variable">$&#123;id&#125;</span>_vep.maf &gt; ./12.ABSOLUTE/<span class="variable">$&#123;id&#125;</span>_absolute.maf;</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>重要参数：<br><code>max sigma h</code>: 这个可以根据情况设大点，因为样本间误差设小了，结果反而不好。<br><code>max as seg count</code>: 这个最好事先看一些每个样本segmentation数目的分布，默认设置为1500，也就是超过这个数目，样本会直接打上“Fail”标签，不会出现在最后的结果中。<br><code>max non clonal</code>: 这个参数我看到作者处理示例数据使用的是1，也就是运行基因组存在non-clonal的最大比例<br><code>copy number type</code>: 一般我们处理的都是total copy number，ABSOLUTE仅支持由HAPSEG或AllelicCapseg输入的allelic数据。<br>BTW:作者说过默认参数的设置是为了平衡过拟合以及解的复杂性。</p>
</blockquote>
</li>
</ol>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library(ABSOLUTE)</span><br><span class="line">RunAbsolute(</span><br><span class="line">  seg.dat.fn = <span class="string">&quot;./12.ABSOLUTE/case1_biorep_A_techrep_absolute.seg&quot;</span>, </span><br><span class="line">  sigma.p = <span class="number">0</span>,</span><br><span class="line">  max.sigma.h = <span class="number">0.2</span>,</span><br><span class="line">  min.ploidy = <span class="number">0.5</span>, </span><br><span class="line">  max.ploidy = <span class="number">8</span>, </span><br><span class="line">  primary.disease = <span class="string">&quot;BRCA&quot;</span>, </span><br><span class="line">  platform = <span class="string">&quot;Illumina_WES&quot;</span>, </span><br><span class="line">  results.dir = <span class="string">&quot;./12.ABSOLUTE/case1_biorep_A_techrep&quot;</span>, </span><br><span class="line">  sample.name = <span class="string">&quot;case1_biorep_A_techrep&quot;</span>, </span><br><span class="line">  max.as.seg.count = <span class="number">1500</span>, </span><br><span class="line">  max.neg.genome = <span class="number">0.005</span>,</span><br><span class="line">  max.non.clonal = <span class="number">1</span>, </span><br><span class="line">  copy_num_type = <span class="string">&quot;total&quot;</span>,</span><br><span class="line">  maf.fn = <span class="string">&quot;./12.ABSOLUTE/case1_biorep_A_techrep_absolute.maf&quot;</span>,</span><br><span class="line">  min.mut.af = <span class="number">0.05</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 其余样本的代码同上</span></span><br></pre></td></tr></table></figure>
<h2 id="结果解读"><a href="#结果解读" class="headerlink" title="结果解读"></a>结果解读</h2><p>以下结果解读以case1_biorep_A_techrep为例，每种颜色代表一个模型：</p>
<ol>
<li><p>纯度/倍性图以及模型打分<br>右图表示肿瘤纯度与倍性的关系。每个点表示软件给出的一个模型，彩色的点表示得分高的<br>左图中展示了3个打分最高的解，每个解通过不同的模型进行评估，主要是SCNA，核型模型以及它们的整合模型。</p>
<center><img src="/img/Figures/ab-fig1.png" alt="Fig.1" style="zoom:90%;" /></center>
</li>
<li><p>备选的拷贝轮廓<br>这个图显示了前面3个模型对应的拷贝轮廓，即拷贝率copy ratio与Genomic fraction的关系，像纯度，倍性，异质性片段的比例以及还有一些看不懂为什么是负数的参数值。其实有个参数跟我们输入时密切相关，就是\sigma_h，它标定了样本允许的最大的方差。虚线代表基因组倍性。</p>
<center><img src="/img/Figures/ab-fig2.png" alt="Fig.2" style="zoom:90%;" /></center>
</li>
<li><p>等位基因比例图<br>该图表示这个模型体细胞突变SSNV (Somatic Single Nucleotide Variation)等位基因分数的分布。等位基因比例可以解释为每个cancer细胞平均的等位基因拷贝数，也称为多样性（multiplicity），它可以揭示亚克隆突变。这其实跟利用VCF文件计算vaf分布差不多，不过这里用copy number进行了校正。CCF是指癌细胞分数。</p>
<center><img src="/img/Figures/ab-fig3.png" alt="Fig.3" style="zoom:90%;" /></center>

</li>
</ol>
<h1 id="Pyclone推断肿瘤细胞的克隆组成"><a href="#Pyclone推断肿瘤细胞的克隆组成" class="headerlink" title="Pyclone推断肿瘤细胞的克隆组成"></a>Pyclone推断肿瘤细胞的克隆组成</h1><p><a href="https://github.com/Roth-Lab/pyclone">GitHub-Pyclone</a></p>
<p>肿瘤异质性可分为肿瘤间异质性和肿瘤内异质性，其中肿瘤内异质性 Intra-tumor heterogeneity (ITH) 指的是，随着癌细胞的不断生长，其分裂后的子代细胞呈现出与同代细胞或者父细胞的不同，从而使得其各个方面有了较大的差异。</p>
<p>对存在异质性的肿瘤，多次不同部位取样，或者不同时间取样，那么虽然说是同一个肿瘤病人，他们不同的测序结果理论上不一致的，Pyclone就可以分析出来，同一个病人的不同测序数据里面共有哪些亚克隆。</p>
<p>考虑到突变频率的影响因素的复杂性:肿瘤组织中混有的正常细胞、携带该突变的肿瘤细胞的比例、每个细胞中突变的等位基因拷贝数、以及未知的技术噪声来源，Pyclone 基于<strong>贝叶斯聚类方法</strong>，用于将一个或多个位点取样深度测序(通常大于1000x)的体细胞突变归类为推定的克隆clusters,同时估算其细胞患病率，并解释由拷贝数变异和正常细胞污染引起的等位基因失衡问题。</p>
<h2 id="Pyclone安装"><a href="#Pyclone安装" class="headerlink" title="Pyclone安装"></a>Pyclone安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 创建虚拟环境</span></span><br><span class="line">conda create -n pyclone-py27</span><br><span class="line">conda activate pyclone-py27</span><br><span class="line"><span class="comment">## 用mamba安装pyclone</span></span><br><span class="line">mamba install -c hcc pyclone</span><br><span class="line">mamba install pyclone -c bioconda -c conda-forge</span><br></pre></td></tr></table></figure>
<h2 id="数据分析-1"><a href="#数据分析-1" class="headerlink" title="数据分析"></a>数据分析</h2><p><strong>input</strong><br>.tsv文件需要包括：</p>
<ul>
<li>mutation_id: A unique identifier for the mutation. This should be the same across datasets.</li>
<li>ref_counts: The number of reads overlapping the locus matching the reference allele.</li>
<li>var_counts: The number of reads overlapping the locus matching the variant allele.</li>
<li>normal_cn: The copy number of the locus in non-malignant cells. This should generally be 2 except for sex chromosomes in males.</li>
<li>（以上四列在VEP注释后得到的.maf文件里）</li>
<li>minor_cn: The copy number of the minor allele in the malignant cells. This must be less than equal the value in the major_cn column.</li>
<li>major_cn: The copy number of the major allele in the malignant cells. This should be greater than equal to the value in the minor_cn column and greater than 0.</li>
</ul>
<p>作者建议在没有<code>minor_cn</code>和<code>major_cn</code>的情况下，把<code>minor_cn</code>设置为0，把<code>major_cn</code>设置为推断出来的拷贝数，然后加<code>--prior total_copy_number</code>参数。</p>
<p>先从前面的拷贝数变异分析的结果来获取major_cn,然后根据突变坐标映射到拷贝数变异分析的segments文件，这里根据.seg文件的Segment_Mean来计算拷贝数，Segment_Mean大于0则拷贝数扩增，小于0则拷贝数缺失，但是通常在-0.2~0.2之间都认为是正常，也有一些软件的cutoff是0.3。</p>
<center><img src="/img/Figures/cpnum.png" alt="copy number" style="zoom:40%;" /></center>

<p><strong>input构建过程：</strong></p>
<ol>
<li><p>下面的临时tsv文件前三列是暂时添加的，而<code>mutation_ id</code>合并于maf文件的<code>Hugo_ Symbol</code>、<code>Chromosome</code>和<code>Start_Position</code>, 把<code>major_cn</code>暂定为2，后面再做修改，最后生成文件命名为<code>$&#123;id&#125;.tmp.tsv</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat 0.sra/sra.infor/config.tumor | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">cat ./7.annotation/vep/<span class="variable">$&#123;id&#125;</span>_vep.maf | sed <span class="string">&#x27;1,2d&#x27;</span> | awk -F <span class="string">&#x27;\t&#x27;</span> <span class="string">&#x27;&#123;print $5&quot;\t&quot;$6&quot;\t&quot;$7&quot;\t&quot;$5&quot;:&quot;$6&quot;:&quot;$1&quot;\t&quot;$41&quot;\t&quot;$42&quot;\t&quot;2&quot;\t&quot;0&quot;\t&quot;2&quot;\t&quot;&#125;&#x27;</span> &gt;./13.pyclone/<span class="variable">$&#123;id&#125;</span>.tmp.tsv</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/pyclone-tmp1.png" alt="tmp" style="zoom:90%;" /></center>
</li>
<li><p>然后从segments文件中获取突变位点的<code>Segment_Mean</code>需要先把segments文件进行处理，由于直接计算出来的拷贝数为小数，因此需要进行取舍，这里简单的进行四舍五入，如果为0，则删除这条记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat 0.sra/sra.infor/config.tumor | <span class="keyword">while</span> <span class="built_in">read</span> id</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">sed <span class="string">&#x27;1d&#x27;</span> ./8.cnv/cnvkit/<span class="variable">$&#123;id&#125;</span>.seg | awk <span class="string">&#x27;BEGIN&#123;OFS=&quot;\t&quot;&#125;&#123;print $0&quot;\t&quot;int((2^$6)*2+0.5)&#125;&#x27;</span>| awk <span class="string">&#x27;BEGIN&#123;OFS=&quot;\t&quot;&#125;&#123;if ($7!=0)print $0&#125;&#x27;</span> | cut -f 2-7  &gt;./13.pyclone/<span class="variable">$&#123;id&#125;</span>.bed</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/pyclone-tmp2.png" alt="tmp" style="zoom:90%;" /></center>
</li>
<li><p>最后用到了bedtools工具，把两个文件的坐标进行overlap一下，取出必要的列<br><a href="https://www.jianshu.com/p/f8bbd51b5199">bedtools教程</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat 0.sra/sra.infor/config.tumor | <span class="keyword">while</span> <span class="built_in">read</span> id;</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">bedtools window -a ./13.pyclone/<span class="variable">$&#123;id&#125;</span>.tmp.tsv  -b ./13.pyclone/<span class="variable">$&#123;id&#125;</span>.bed | cut -f 4-8,15 | awk <span class="string">&#x27;BEGIN&#123;OFS=&quot;\t&quot;;print &quot;mutation_id\tref_counts\tvar_counts\tnormal_cn\tminor_cn\tmajor_cn&quot;&#125;&#123;print $0&#125;&#x27;</span> &gt;./13.pyclone/<span class="variable">$&#123;id&#125;</span>.tsv</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/pyclone-tmp3.png" alt="tmp" style="zoom:90%;" /></center>

</li>
</ol>
<p><strong>pyclone分析</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PyClone run_analysis_pipeline --prior total_copy_number \</span><br><span class="line">--in_files ./13.pyclone/*.tsv \</span><br><span class="line">--working_dir ./13.pyclone/case1_pyclone_analysis 1&gt;./<span class="built_in">log</span>/pyclone.log/case1.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>
<h2 id="结果解读-1"><a href="#结果解读-1" class="headerlink" title="结果解读"></a>结果解读</h2><p>case1的4个样本:从下面左边的图可以看到，这4个样本的突变可以分为3个clusters,每个clusters的细胞患病率有所异同，每个clusters所含有的突变数量n也不同(cluster0=21，cluster1=32, cluster2=1)总共有21个突变位点。和教程的图很像。</p>
<center><img src="/img/Figures/pyclone1.png" alt="tmp" style="zoom:70%;" /></center>

<p>右图和上面的图表达的意思相同。左图则展示了样本间的clusters的相关性。</p>
<center><img src="/img/Figures/pyclone2.png" alt="tmp" style="zoom:90%;" /></center>

<h1 id="肿瘤进化分析"><a href="#肿瘤进化分析" class="headerlink" title="肿瘤进化分析"></a>肿瘤进化分析</h1><h2 id="citup"><a href="#citup" class="headerlink" title="citup"></a>citup</h2><p>CITUP(Conality Inference in Tumors Using Phylogeny)是一种使用系统发育论进行肿瘤的克隆推断生物信息学工具，可用于从单个患者获得的多个样本来推断肿瘤异质性。给定每个样本的突变频率, CITUP使用基于优化的算法来找到最能解释数据的进化树。但是，前提条件是，CITUP是针对于深度测序数据的。<br><a href="https://github.com/amcpherson/citup">Github-citup</a></p>
<h3 id="citup安装"><a href="#citup安装" class="headerlink" title="citup安装"></a>citup安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n citup-0.1.2</span><br><span class="line">mamba install -c dranew citup  <span class="comment"># 574MB</span></span><br><span class="line">mamba install -c conda-forge h5py  <span class="comment"># 依赖库</span></span><br></pre></td></tr></table></figure>
<h3 id="数据分析-2"><a href="#数据分析-2" class="headerlink" title="数据分析"></a>数据分析</h3><p>实际运行需要准备两个文件，一个是突变位点在不同样本的突变频率，行是突变位点，列是样本。另一个是突变的cluster,只有单列，记录每个突变位点所在的cluster。两个文件的突变位点顺序要一致。</p>
<p><strong>输入文件构建</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ./13.pyclone/case1_pyclone_analysis/tables/loci.tsv | cut -f 6 | sed <span class="string">&#x27;1d&#x27;</span> | paste - - - -  &gt;./13.pyclone/case1_pyclone_analysis/freq.txt</span><br><span class="line"></span><br><span class="line">cat ./13.pyclone/case1_pyclone_analysis/tables/loci.tsv | cut -f 3 | sed <span class="string">&#x27;1d&#x27;</span> | paste - - - - |cut -f 1 &gt;./13.pyclone/case1_pyclone_analysis/cluster.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取 sample_id 信息，后面画图要用到</span></span><br><span class="line">cat ./13.pyclone/case1_pyclone_analysis/tables/loci.tsv | cut -f 2 | sed <span class="string">&#x27;1d&#x27;</span> | head -4 &gt;./13.pyclone/case1_pyclone_analysis/sample_id</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">run_citup_qip.py --submit <span class="built_in">local</span> \</span><br><span class="line">./13.pyclone/case1_pyclone_analysis/freq.txt \</span><br><span class="line">./13.pyclone/case1_pyclone_analysis/cluster.txt \</span><br><span class="line">./13.pyclone/case1_pyclone_analysis/results.h5</span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/citup-eg.png" alt="tmp" style="zoom:70%;" /></center>

<p>接下来需要用python处理一下结果，因为得到的结果results.h5是一个hdf5格式，不是普通的文本文件，处理起来批较麻烦一些</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##### citup.py #####</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line">hf=h5py.File(sys.argv[<span class="number">1</span>],<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">hf.keys()</span><br><span class="line">opnum=hf[<span class="string">&quot;results/optimal/index&quot;</span>][<span class="number">0</span>]</span><br><span class="line">cellfreq=hf[<span class="string">&quot;trees/&quot;</span> + <span class="built_in">str</span>(opnum) + <span class="string">&quot;/clone_freq/block0_values&quot;</span>][:]</span><br><span class="line">tree=hf[<span class="string">&quot;trees/&quot;</span> + <span class="built_in">str</span>(opnum) + <span class="string">&quot;/adjacency_list/block0_values&quot;</span>][:]</span><br><span class="line"><span class="built_in">print</span> cellfreq</span><br><span class="line"><span class="built_in">print</span> tree</span><br><span class="line"><span class="comment">####################</span></span><br><span class="line"></span><br><span class="line">python <span class="built_in">all</span>.my.script/citup.py ./<span class="number">13.</span>pyclone/case1_pyclone_analysis/results.h5 | sed <span class="string">&#x27;s/^ \[//;s/\[//g;s/\]//g&#x27;</span> | tr <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;\t&#x27;</span>| grep <span class="string">&#x27;\.&#x27;</span> &gt;./<span class="number">13.</span>pyclone/case1_pyclone_analysis/cellfreq.txt</span><br><span class="line"></span><br><span class="line">python <span class="built_in">all</span>.my.script/citup.py ./<span class="number">13.</span>pyclone/case1_pyclone_analysis/results.h5 | sed <span class="string">&#x27;s/^ \[//;s/\[//g;s/\]//g&#x27;</span> | tr <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;\t&#x27;</span>| grep -v <span class="string">&#x27;\.&#x27;</span> &gt;./<span class="number">13.</span>pyclone/case1_pyclone_analysis/tree.txt</span><br></pre></td></tr></table></figure>
<p>得到的<code>cellfreq.txt</code>和<code>tree.txt</code>这两个文件，前者行表示样本,列表示克隆clusters,每个值代表克隆频率。后者表示的是进化树的克隆分支关系，接下来利用Timescape进行可视化。</p>
<center><img src="/img/Figures/citup-res.png" alt="tmp" style="zoom:100%;" /></center>

<h2 id="Timescape"><a href="#Timescape" class="headerlink" title="Timescape"></a>Timescape</h2><p>输入格式：<br><code>tree. txt</code>不用做修改，<code>cellfreq.txt</code>需要被处理为3列time or space ID, the clone ID, and the clonal prevalence</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># BiocManager::install(&quot;timescape&quot;)</span></span><br><span class="line"><span class="comment"># example(&quot;timescape&quot;)</span></span><br><span class="line"><span class="comment"># browseVignettes(&quot;timescape&quot;)</span></span><br><span class="line">options(stringsAsFactors = <span class="built_in">F</span>)</span><br><span class="line"> </span><br><span class="line">library(timescape)</span><br><span class="line">library(plotly)</span><br><span class="line">library(htmlwidgets)</span><br><span class="line">library(webshot)</span><br><span class="line">library(tidyr)</span><br><span class="line"></span><br><span class="line">setwd(<span class="string">&quot;/home/data/vip8t02/MyCourse/CancerGenomics/WES.proj/&quot;</span>)</span><br><span class="line">tree_edges = read.table(<span class="string">&quot;./13.pyclone/case1_pyclone_analysis/tree.txt&quot;</span>)</span><br><span class="line">colnames(tree_edges) = <span class="built_in">c</span>(<span class="string">&quot;source&quot;</span>,<span class="string">&quot;target&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># clonal prevalences</span></span><br><span class="line">cellfreq = read.table(<span class="string">&quot;./13.pyclone/case1_pyclone_analysis/cellfreq.txt&quot;</span>)</span><br><span class="line">colnames(cellfreq) = <span class="number">0</span>:(<span class="built_in">length</span>(cellfreq)-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sample_id = read.table(<span class="string">&quot;./13.pyclone/case1_pyclone_analysis/sample_id&quot;</span>)</span><br><span class="line">cellfreq$timepoint = sample_id[ , <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">clonal_prev = gather(cellfreq, key=<span class="string">&quot;clone_id&quot;</span>, value = <span class="string">&quot;clonal_prev&quot;</span>, -timepoint)</span><br><span class="line">clonal_prev = clonal_prev[order(clonal_prev$timepoint),]</span><br><span class="line"><span class="comment"># targeted mutations</span></span><br><span class="line"><span class="comment"># mutations &lt;- read.csv(system.file(&quot;extdata&quot;, &quot;AML_mutations.csv&quot;, package = &quot;timescape&quot;))</span></span><br><span class="line">p = timescape(clonal_prev = clonal_prev, tree_edges = tree_edges,height=<span class="number">260</span>)</span><br><span class="line">saveWidget(p, <span class="string">&quot;./13.pyclone/case1_timescape.html&quot;</span>)</span><br></pre></td></tr></table></figure>
<center><img src="/img/Figures/timescape.png" alt="timescape" style="zoom:100%;" /></center>

<h1 id="总结复盘"><a href="#总结复盘" class="headerlink" title="总结复盘"></a>总结复盘</h1><ul>
<li>天呐！！他们开发软件的也太厉害了吧！！！</li>
<li>GATK的ModelSegments报错还是没解决，显示内存溢出，.6服务器的给了20G，自己的给了60G还是不行。。。。</li>
<li>关于vcf,bed,maf等等格式总算熟悉点了</li>
<li>好占内存！！！.sra, .fastq, bwa的.bam都删了<center><img src="/img/Figures/space.png" alt="timescape" style="zoom:65%;" /></center></li>
</ul>
]]></content>
      <categories>
        <category>WES</category>
      </categories>
  </entry>
</search>
